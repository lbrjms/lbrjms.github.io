{"meta":{"title":"WJ","subtitle":"","description":"临帝子之长洲， 得天人之旧馆。 层峦耸翠， 上出重霄； 飞阁流丹， 下临无地。 鹤汀凫渚， 穷岛屿之萦回； 桂殿兰宫， 即冈峦之体势。","author":"WJ Liu","url":"http://example.com","root":"/"},"pages":[{"title":"书单","date":"2023-12-19T08:01:29.786Z","updated":"2023-12-19T08:01:29.786Z","comments":false,"path":"books/index.html","permalink":"http://example.com/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2022-08-30T16:04:40.000Z","updated":"2023-12-19T08:01:29.786Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"1234567891011121314151617181920212223242526&#123; name: &#x27;lwj&#x27; age: 30, gender: &#x27;男&#x27;, profession: &#x27;Web、iOS、Mini Developer&#x27;, experience: &#x27;7年&#x27;, address: &#x27;神都&#x27;, education: &#x27;本科&#x27;, github: &#x27;https://github.com/lbrjms&#x27;, blog: &#x27;&#x27;, email: &#x27;&#x27;, description: &#x27;致力于网站建设与移动端开发&#x27;, skills: [ [&#x27;Html&#x27;, &#x27;Javascript&#x27;, &#x27;jQuery&#x27;, &#x27;CSS&#x27;, &#x27;ES6&#x27;, &#x27;Node&#x27;], [&#x27;Less&#x27;,&#x27;Sass&#x27;], [&#x27;Git&#x27;, &#x27;SVN&#x27;], [&#x27;Vue&#x27;], ], devTools: [ [&#x27;Xcode&#x27;, &#x27;Visual Studio Code&#x27;, &#x27;Ad&#x27;], [&#x27;Chrome DevTools&#x27;, &#x27;Fiddler&#x27;], [&#x27;SourceTree&#x27;,], ] &#125;"},{"title":"分类","date":"2023-12-19T08:01:29.787Z","updated":"2023-12-19T08:01:29.787Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2023-12-19T08:01:29.792Z","updated":"2023-12-19T08:01:29.792Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2023-12-19T08:01:29.792Z","updated":"2023-12-19T08:01:29.792Z","comments":false,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""},{"title":"linux之nginx、ssh","date":"2023-04-16T15:36:51.000Z","updated":"2023-12-19T08:01:29.792Z","comments":true,"path":"linux之nginx、ssh/index.html","permalink":"http://example.com/linux%E4%B9%8Bnginx%E3%80%81ssh/index.html","excerpt":"","text":""},{"title":"标签","date":"2023-12-19T08:01:29.792Z","updated":"2023-12-19T08:01:29.792Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"go基础","slug":"go基础","date":"2024-01-17T08:33:18.000Z","updated":"2024-01-18T00:50:09.704Z","comments":true,"path":"2024/01/17/go基础/","link":"","permalink":"http://example.com/2024/01/17/go%E5%9F%BA%E7%A1%80/","excerpt":"","text":"Go语言发展简史2007年，谷歌工程师Rob Pike, Ken Thompson和Robert Grisemer开始设计一门全新的语言，这是Go语言的最初原型。2009年11月，Google将Go语言以开放源代码的方式向全球发布。2015年8月，Go1.5版发布，本次更新中移除了”最后残余的c代码”2017年2月,Go语言Go 1.8版发布。2017年8月，Go语言Go 1.9版发布。2018年2月，Go语言Go1.10版发布。2018年8月，Go语言Go1.11版发布。2019年2月，Go语言Go1.12版发布。2019年9月，Go语言Go1.13版发布。2020年2月，Go语言Go1.14版发布。2020年8月，Go语言Go1.15版发布。….一直迭代Go语言的吉祥物 - 金花鼠Gordon。 数据类型 基本类型转string类型方式1:fmt.Sprintf(“%参数”,表达式)方式2:使用strconv包的函数 string类型转基本类型strconv.ParseBool()strconv.ParseInt()strconv.ParseFloat() 指针指针就是内存地址 &amp; 取内存地址 根据地址取值指针变量的地址不可以不匹配123456var age int = 18var ptr *int = &amp;agefmt.Println(ptr)fmt.Println(&quot;ptr本身这个存储空间的地址为：&quot;,&amp;ptr)//想获取ptr这个指针或者这个地址指向的那个数据：fmt.Printf(&quot;ptr指向的数值为：%v&quot;,*ptr) //ptr指向的数值为：18 函数 init函数 初始化函数，可以用来进行一些初始化的操作每一个源文件都可以包含一个init函数，该函数会在main函数执行前，被Go运行框架调用。 闭包 闭包就是一个函数和与其相关的引用环境组合的一个整体 defer关键字 为了在函数执行完毕后，及时的释放资源遇到defer关键字，会将后面的代码语句压入栈中，也会将相关的值同时拷贝入栈中，不会随着函数后面的变化而变化。 可变参数 123456789/定义一个函数，函数的参数为：可变参数 ... 参数的数量可变//args...int 可以传入任意多个数量的int类型的数据 传入0个，1个，，，，n个func test (args...int)&#123; //函数内部处理可变参数的时候，将可变参数当做切片来处理 //遍历可变参数： for i := 0; i &lt; len(args); i++ &#123; fmt.Println(args[i]) &#125;&#125; 基本数据类型和数组默认都是值传递的，即进行值拷贝。在函数内修改，不会影响到原来的值 如果希望在函数内的变量能修改函数外的变量，可以传入变量的地址&amp;，函数内以指针的方式操作变量。从效果来看类似引用传递 数组var 数组名 [数组大小]数据类型 切片可变数组 定义切片 123456789101112131415161718191、引用一个创建好的数组var arr [4] int = [3]int&#123;1,2,3,4&#125;slice := arr[1:3] 2、make内置函数var切片名[type = make([], len,[cap])slice := make([]int,4,20)3、直接指定具体的数组slece := []int&#123;1,2,3&#125;### 结构体```go//定义老师结构体，将老师中的各个属性 统一放入结构体中管理：type Teacher struct&#123; //变量名字大写外界可以访问这个属性 Name string Age int School string&#125;","categories":[{"name":"go","slug":"go","permalink":"http://example.com/categories/go/"}],"tags":[]},{"title":"创建vscode主题并发布到插件市场","slug":"创建vscode主题并发布到插件市场","date":"2024-01-08T08:14:04.000Z","updated":"2024-01-08T08:28:29.315Z","comments":true,"path":"2024/01/08/创建vscode主题并发布到插件市场/","link":"","permalink":"http://example.com/2024/01/08/%E5%88%9B%E5%BB%BAvscode%E4%B8%BB%E9%A2%98%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0%E6%8F%92%E4%BB%B6%E5%B8%82%E5%9C%BA/","excerpt":"","text":"初始化项目1234// 安装需要的包npm install -g yo generator-code// 运行yo code https://code.visualstudio.com/api/references/theme-color根据上面地址配置自己的json文件 获取Tokenshttps://dev.azure.com/创建账号-》创建组织到个人中的的 Personal Access Tokens 中新建token 并且保存发布到 VSCode Market 填入一个名字 将组织设置为 “所有可访问的组织” 自定义有效期，可以自定义设置时间长一些，上限是一年 将范围设置为自定义并选择 Marketplace &gt; Manage 创建发布者https://marketplace.visualstudio.com/manage登录账号并且创建发布者 并且配置package.json中的发布者publisher 安装 vsce 并发布123456npm install --global @vscode/vscevsce login &lt;publisher name&gt;# 例子vsce login Bitcookies 发布 12345# 打包成 VSIX 格式vsce package# 发布到 VS Code Marketvsce publish 之后就可以到发布者管理界面看到自己发布的应用了","categories":[{"name":"vscode","slug":"vscode","permalink":"http://example.com/categories/vscode/"}],"tags":[]},{"title":"常用模板项目调研","slug":"常用模板项目调研","date":"2023-12-27T08:16:52.000Z","updated":"2024-01-12T07:09:41.157Z","comments":true,"path":"2023/12/27/常用模板项目调研/","link":"","permalink":"http://example.com/2023/12/27/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF%E9%A1%B9%E7%9B%AE%E8%B0%83%E7%A0%94/","excerpt":"","text":"https://github.com/vueComponent/ant-design-vue-pro 版本低 vue2 http://doc.vvbin.cn/ ts语法 vue3+ad https://preview.pro.ant.design/dashboard/analysis ant design + react","categories":[],"tags":[]},{"title":"FUXA连接mqtt搭建组态应用","slug":"FUXA连接mqtt搭建组态应用","date":"2023-12-25T07:36:35.000Z","updated":"2023-12-25T09:08:23.990Z","comments":true,"path":"2023/12/25/FUXA连接mqtt搭建组态应用/","link":"","permalink":"http://example.com/2023/12/25/FUXA%E8%BF%9E%E6%8E%A5mqtt%E6%90%AD%E5%BB%BA%E7%BB%84%E6%80%81%E5%BA%94%E7%94%A8/","excerpt":"","text":"FUXAhttps://github.com/frangoteam/FUXA FUXA 技术栈： NodeJS (backend) and Angular (frontend).FUXA 是开源的web组态软件 可以快速搭建自己的web应用 启动下载最新的代码 注意node环境搭配 服务端 123cd ./servernpm installnpm start 客户端 123cd ./clientnpm inpm run start emqx 启动mqtt服务安装mqttx客户端 方便后面测试web应用组态搭建 web项目中配置mqtt服务 设置 &#x3D;&gt; Connections &#x3D;&gt; 新增 配置服务地址等 创建tag 到上面新增的服务里面创建tag 设置要订阅的主题 绑定主题里面对应的数据 如果是json数据 设置要监控的adress（也就是订阅主题的json数据的对应的key） 最后点击订阅按钮新增tag 这样就把一个主题下的所有json数据解析成一一对应的关系 可以在后面的设备上绑定不同的tag 回到编辑器界面 拖拽一条管道组态 选中进入属性&#x3D;&gt; actions 界面 绑定上面监控的tag通过tag监控到的不同值 改变管道的动态 回到mqttx 客户端发送tag对应的json数据 就可以控制管道的停止 运行","categories":[{"name":"FUXA, mqtt, web组态","slug":"FUXA-mqtt-web组态","permalink":"http://example.com/categories/FUXA-mqtt-web%E7%BB%84%E6%80%81/"}],"tags":[]},{"title":"EMQX","slug":"EMQX","date":"2023-12-24T09:17:26.000Z","updated":"2023-12-26T01:26:06.861Z","comments":true,"path":"2023/12/24/EMQX/","link":"","permalink":"http://example.com/2023/12/24/EMQX/","excerpt":"","text":"mqtt发布订阅模式的网络传输协议 MQTT 协议与 HTTP 协议相比，有何优点和弱点?HTTP 协议是一个无状态的协议，每个 HTTP 请求为 TCP 短连接，每次请求都需要重新创建一个 TCP 连接（可以通过 keep-alive 属性来优化 TCP 连接的使用，多个 HTTP 请求可以共享该 TCP 连接）；而 MQTT 协议为长连接协议，每个客户端都会保持一个长连接。与 HTTP 协议相比优势在于： MQTT 的长连接可以用于实现从设备端到服务器端的消息传送之外，还可以实现从服务器端到设备端的实时控制消息发送，而 HTTP 协议要实现此功能只能通过轮询的方式，效率相对来说比较低； MQTT 协议在维护连接的时候会发送心跳包，因此协议以最小代价内置支持设备 “探活” 的功能，而 HTTP 协议要实现此功能的话需要单独发出 HTTP 请求，实现的代价会更高； 低带宽、低功耗。MQTT 在传输报文的大小上与 HTTP 相比有巨大的优势，因为 MQTT 协议在连接建立之后，由于避免了建立连接所需要的额外的资源消耗，发送实际数据的时候报文传输所需带宽与 HTTP 相比有很大的优势，参考网上有人做的测评，发送一样大小的数据，MQTT 比 HTTP 少近 50 倍的网络传输数据，而且速度快了将近 20 倍。在网上有人做的另外一个评测显示，接收消息的场景，MQTT 协议的耗电量为 HTTP 协议的百分之一，而发送数据的时候 MQTT 协议的耗电量为 HTTP 协议的十分之一； MQTT 提供消息质量控制（QoS），消息质量等级越高，消息交付的质量就越有保障，在物联网的应用场景下，用户可以根据不同的使用场景来设定不同的消息质量等级； emqxmqtt服务器 用于保存或者分发数据 单独的物联网设备计算能力有限 应对多并发的场景会有问题因此就需要一个中转站 集中处理数据传输","categories":[{"name":"EMQX, mqtt","slug":"EMQX-mqtt","permalink":"http://example.com/categories/EMQX-mqtt/"}],"tags":[]},{"title":"js项目之断点调试","slug":"js项目之断点调试","date":"2023-12-22T05:47:26.000Z","updated":"2023-12-22T06:16:45.127Z","comments":true,"path":"2023/12/22/js项目之断点调试/","link":"","permalink":"http://example.com/2023/12/22/js%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/","excerpt":"","text":"vue 项目断点调试设置 Webpack 设置 devtool不同的构建工具略有不同 123456789configureWebpack: &#123; name: name, devtool: &#x27;source-map&#x27;, resolve: &#123; alias: &#123; &#x27;@&#x27;: resolve(&#x27;src&#x27;) &#125; &#125; &#125;, 安装jsdebug 调试插件 大部分ide自带有 idea 新建 JavaScript debug 启动项目npm run serve 启动调试 在启动的浏览器窗口中链接指向上面启动项目的链接 在vscode也是类似 123456789101112&#123; &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ &#123; &quot;type&quot;: &quot;chrome&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;name&quot;: &quot;Launch Chrome against localhost&quot;, &quot;url&quot;: &quot;http://localhost:8000&quot;, &quot;webRoot&quot;: &quot;$&#123;workspaceFolder&#125;&quot; &#125; ]&#125;","categories":[],"tags":[{"name":"vue, 断点调试","slug":"vue-断点调试","permalink":"http://example.com/tags/vue-%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/"}]},{"title":"web开发常用插件","slug":"web开发常用插件","date":"2023-12-21T05:53:53.000Z","updated":"2023-12-21T07:19:26.610Z","comments":true,"path":"2023/12/21/web开发常用插件/","link":"","permalink":"http://example.com/2023/12/21/web%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/","excerpt":"","text":"antd axios echart lodash material-ui moment tinycolor monaco-editor","categories":[{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"}],"tags":[]},{"title":"EMS储能知识背景","slug":"EMS储能知识背景","date":"2023-12-21T05:04:26.000Z","updated":"2023-12-21T05:06:21.067Z","comments":true,"path":"2023/12/21/EMS储能知识背景/","link":"","permalink":"http://example.com/2023/12/21/EMS%E5%82%A8%E8%83%BD%E7%9F%A5%E8%AF%86%E8%83%8C%E6%99%AF/","excerpt":"","text":"解决问题弃水、弃风、弃光问题去年全年弃水电量约691亿千瓦时，弃风电量277亿千瓦时，弃光电量54.9亿千瓦时，“三弃”电量共约1023亿千瓦时https://www.gov.cn/xinwen/2019-07/04/content_5405844.htm 新型储能具有响应快、配置灵活、建设周期短等优势，可在电力运行中发挥顶峰、调峰、调频、爬坡、黑启动等多种作用 https://www.gov.cn/zhengce/zhengceku/2022-06/07/content_5694423.htm 配电系统ems系统pcs系统bms系统 背景 电力市场改革 碳中和目标 房地产等其他产业降温 需要扶持其他产业 源网侧国家电网等电网发电是要供需平衡的每天发多少用多少电 都需要预测 和报备的最稳妥的还是煤炭发电光伏 风电 都是靠天吃饭现在规定发电项目必须配备储能项目 工商业用电解决的问题： 防逆流（电网停电等情况下 不能让储能电池的电流到母线里面） 需量控制（削峰平谷 防止出现瞬时大功率等情况 超过电网报备的功率 会面临巨额罚款） 峰谷套利（谷时充电 峰时放电） 户用侧在西方 大部分都是微电网 不像我们国家电网统一调度 因此家庭用户会出现断网情况 就需要安装户储产品 应变停电情况 未来微电网虚拟电厂（不是大型电厂 类似微电网的小型电厂）把周边的电 都聚合到一个统一的调度中心 再由这个调度中心就行统一分配绿电交易","categories":[{"name":"EMS","slug":"EMS","permalink":"http://example.com/categories/EMS/"}],"tags":[]},{"title":"EMS储能系统","slug":"EMS储能系统","date":"2023-12-21T05:03:27.000Z","updated":"2023-12-21T05:03:41.428Z","comments":true,"path":"2023/12/21/EMS储能系统/","link":"","permalink":"http://example.com/2023/12/21/EMS%E5%82%A8%E8%83%BD%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"EMS系统EMS是实现多个储能站点的集中监控和运维管理的智慧云平台，通过统⼀采集和控制终端可以快速将电站数据接⼊云平台，⽀持站点运⾏实时监控，多站数据汇总展⽰，电量收益报表分析，视频监控，单站监控，多电站集控管理，实时监视负荷聚合平台及历史指令记录查询等全⾯功能，帮助电站运维降本增效，保障安全，实现储能电站的⻓效运⾏。 展示中心 大屏展示 显⽰电站数量，总装机功率，总装机容量 ⽴体⾃转地球地图 收益指标&#x2F;电量指标&#x2F;总量指标&#x2F;能效指标&#x2F;报警指标&#x2F;收益排名 （客户总览）多站概览 显⽰站点各项指标 收益指标&#x2F;系统效率&#x2F;电量指标&#x2F;告警指标&#x2F;站点排名&#x2F;统计图 单站概览 显⽰站点各项指标 收益指标&#x2F;系统效率&#x2F;电量指标&#x2F;告警指标&#x2F;站点排名&#x2F;统计图 站点地图 显⽰站点地理位置分布 单站点实时运⾏指标 三维可视化 针对电站真实场景进⾏三维建模 电站实时运⾏指标监测 模拟电站真实巡检场景，精确到设备 监控中心 实时运⾏ 站点的实时运⾏各项指标汇总 单站实时运⾏详情 单站监控 单站监控⻚⾯，可对电站实现全⾯管控 视频监控 显⽰站点实时监控画⾯ 报警中⼼分析中⼼运维中⼼运营中⼼管理中⼼ 电价管理 配置电价方案 站点管理 显⽰站点位置&#x2F;投运时间&#x2F;装机功率&#x2F;站点容量&#x2F;前台显⽰状态&#x2F;更改操作 可新增站点 组织成员 * ⻆⾊管理 显⽰⻆⾊名称，创建时间 可进⾏更改操作和新增 外部公司 可与合作公司建⽴关联关系进⾏电站数据权限授权 ⽇志管理 显⽰最近操作内容及账号名称 个性配置 ⽤⼾可上传⾃定义logo和配置系统名称，进⾏个性化配置 iot中心 设备管理 测点管理 品牌型号 指标管理 soc一致性 电压一致性 电流一致性 客⼾中⼼ 客⼾⼾号管理 知识库","categories":[{"name":"EMS","slug":"EMS","permalink":"http://example.com/categories/EMS/"}],"tags":[]},{"title":"EMS储能系统常见问题","slug":"EMS储能系统常见问题","date":"2023-12-21T03:20:37.000Z","updated":"2023-12-21T05:27:19.136Z","comments":true,"path":"2023/12/21/EMS储能系统常见问题/","link":"","permalink":"http://example.com/2023/12/21/EMS%E5%82%A8%E8%83%BD%E7%B3%BB%E7%BB%9F%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/","excerpt":"","text":"时序数据库 用的是哪一种 数据的传递 实时传递还是间隔传递 （像电压电流的数据一秒内可能变化不大 是否需要实时传递到云端） 策略控制 怎么做 怎么保证不同时间 不同日期采用不同的策略控制 电价方案的录入 有没有替代方案 手动录入出错率比较高（角色控制 管理人员可以建立模版 其他人员直接使用） 数据中断的问题 怎么保证数据的稳定性 光储一体化系统解决方案 设备资产的管理（物模型） soc 校正 怎么做的 怎么做均衡分析 均衡的控制 是主动的还是被动的 是否需要介入均衡仪","categories":[{"name":"EMS","slug":"EMS","permalink":"http://example.com/categories/EMS/"}],"tags":[]},{"title":"组态相关研究","slug":"组态相关研究","date":"2023-12-20T06:19:27.000Z","updated":"2023-12-21T03:19:58.878Z","comments":true,"path":"2023/12/20/组态相关研究/","link":"","permalink":"http://example.com/2023/12/20/%E7%BB%84%E6%80%81%E7%9B%B8%E5%85%B3%E7%A0%94%E7%A9%B6/","excerpt":"","text":"物联大师禁止商用 技术栈： angular + go https://mp.weixin.qq.com/s/PSbK6UiSEXHN3MulZQj93w https://gitee.com/zgwit_labs/iot-master 宣传的版本没有找到微信咨询 说是最近代码正在更新中目前git上跑起来的是一个设备管理相关的系统 FUXAhttps://mp.weixin.qq.com/s?__biz=MzkzMDQ0MjE3Mg==&amp;mid=2247491181&amp;idx=1&amp;sn=971fd75d146f36b98cb3f363ab30dcbc&amp;chksm=c27b60bef50ce9a845138993a65219411e05a3039605e8ef1e2ba122bf21e2a8fb377535148c&amp;scene=132&amp;exptype=timeline_recommend_article_extendread_samebiz#wechat_redirect https://github.com/frangoteam/FUXA http://139.224.249.109:1881/editor 技术栈： angular + node 存在商用问题 Mxgraph-EasyFlowEditorvue + svg https://jason-chen-coder.github.io/Mxgraph-EasyFlowEditor/#/ https://github.com/Jason-chen-coder/Mxgraph-EasyFlowEditor Draw.io基于Mxgraph的官方产品 https://app.diagrams.net/ mxgraph鼻祖 js+svg","categories":[{"name":"组态","slug":"组态","permalink":"http://example.com/categories/%E7%BB%84%E6%80%81/"}],"tags":[]},{"title":"物模型","slug":"物模型","date":"2023-12-19T08:08:26.000Z","updated":"2023-12-19T08:24:40.563Z","comments":true,"path":"2023/12/19/物模型/","link":"","permalink":"http://example.com/2023/12/19/%E7%89%A9%E6%A8%A1%E5%9E%8B/","excerpt":"","text":"物模型是物联网平台中用于描述产品功能的数据模型。 在阿里云物联网平台中，物模型是物理空间中的实体（如传感器、车载装置、楼宇、工厂等）在云端的数字化表示，从属性、服务和事件三个维度，分别描述了该实体是什么、能做什么、可以对外提供哪些信息。具体来说物模型的: 属性维度描述了实体（物联设备）的性质和特征，例如传感器的温度、湿度和压力等； 服务维度描述了实体能够提供的操作和功能，例如控制开关、执行器等； 事件维度描述了实体在特定条件下触发的事件和行为，例如传感器检测到异常温度时触发报警。 通过定义物模型的这三个维度，即可完成产品功能的定义。在物联网平台中，支持为产品定义多组功能（属性、服务和事件），一组功能定义的集合就是一个物模型模块。多个物模型模块彼此互不影响，可以解决工业场景中复杂的设备建模，便于在同一产品下开发不同功能的设备。例如，电暖扇产品的功能属性有电源开关、档位（高、中、低）和室内温度，可以在一个模块添加前2个属性，在另一个模块添加3个属性，然后分别在不同设备端针对不同物模型模块功能进行开发。此时，该产品下不同设备就可以实现不同功能。 物模型通信格式物模型通信格式通常为JSON。在物联网平台中，物模型通信格式指的是设备与平台之间、平台与平台之间传输数据时使用的数据格式。JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，易于人类阅读和编写，也易于机器解析和生成。在物模型通信中，使用JSON格式可以方便地描述设备的属性、服务和事件等信息，使得设备与平台之间的通信更加便捷和高效。在物模型通信中，JSON格式通常包含以下内容： 设备信息： 包括设备的ID、类型、版本号等基本信息； 属性信息： 描述设备的属性，包括属性名、属性类型、属性值等； 服务信息： 描述设备能够提供的服务，包括服务的ID、类型、参数等； 事件信息： 描述设备在特定条件下触发的事件，包括事件类型、参数等。 以上信息在JSON中以键值对的形式表示，通过键来标识信息的类别，通过值来存储具体的信息。例如： 1&#123;&quot;device_id&quot;: &quot;123456789&quot;, &quot;device_type&quot;: &quot;sensor&quot;, &quot;version&quot;: &quot;1.0&quot;&#125; 在物联网平台中，使用JSON格式进行物模型通信可以使得不同平台、不同设备之间的通信更加标准化和规范化，有利于实现设备的互联互通和数据的共享共用。以下是一个简单的物模型示例，描述了一个温度传感器的属性、服务和事件 1234567891011121314151617181920212223242526272829303132&#123; &quot;设备信息&quot;: &#123; &quot;设备ID&quot;: &quot;123456789&quot;, &quot;设备类型&quot;: &quot;温度传感器&quot;, &quot;版本号&quot;: &quot;1.0&quot; &#125;, &quot;属性信息&quot;: [ &#123; &quot;属性名&quot;: &quot;温度&quot;, &quot;属性类型&quot;: &quot;float&quot;, &quot;属性值&quot;: 25.0 &#125; ], &quot;服务信息&quot;: [ &#123; &quot;服务ID&quot;: &quot;1&quot;, &quot;服务类型&quot;: &quot;监测温度&quot;, &quot;服务参数&quot;: &#123; &quot;温度&quot;: 25.0 &#125; &#125; ], &quot;事件信息&quot;: [ &#123; &quot;事件类型&quot;: &quot;温度异常&quot;, &quot;事件参数&quot;: &#123; &quot;温度&quot;: 30.0, &quot;阈值&quot;: 28.0 &#125; &#125; ]&#125; 简单来说，物模型就是物联网终端设备、物联网应用以及相关平台间进行沟通的普通话或者英语，规范了物联网终端与平台应用间数据流通的格式，让它们的沟通顺畅无阻。使用物模型，总结起来有三大好处： 升级开发模式与传统的烟囱式开发模式不同，终端侧和应用侧的开发可以同时进行，从而大大缩短了开发周期。 实现行业互通来自不同行业设备的各种数据，通过物模型以统一的格式上传至平台，从而实现了不同设备和应用之间的互联互通。 提升数据价值通过数据汇聚和智能分析，可以自动预测发展趋势，推动科技信息化在智慧城市、智慧农业等管理工作中的深层次应用，从而有效提升管理水平。","categories":[{"name":"iot","slug":"iot","permalink":"http://example.com/categories/iot/"}],"tags":[{"name":"物模型","slug":"物模型","permalink":"http://example.com/tags/%E7%89%A9%E6%A8%A1%E5%9E%8B/"}]},{"title":"","slug":"下载工具安装","date":"2023-12-19T08:01:29.783Z","updated":"2023-12-19T08:01:29.783Z","comments":true,"path":"2023/12/19/下载工具安装/","link":"","permalink":"http://example.com/2023/12/19/%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/","excerpt":"","text":"ffmpeg 下载 提交环境变量https://www.gyan.dev/ffmpeg/builds/安装包管理器https://github.com/cask-pkg/cask.rs lux安装https://github.com/iawia002/lux &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; python安装安装you-get$ pip3 install you-get","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2023-12-19T08:01:29.778Z","updated":"2023-12-19T08:01:29.778Z","comments":true,"path":"2023/12/19/hello-world/","link":"","permalink":"http://example.com/2023/12/19/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"","slug":"ealasticsearch和kibana","date":"2023-12-19T08:01:29.777Z","updated":"2023-12-19T08:01:29.778Z","comments":true,"path":"2023/12/19/ealasticsearch和kibana/","link":"","permalink":"http://example.com/2023/12/19/ealasticsearch%E5%92%8Ckibana/","excerpt":"","text":"1. ELASTICSEARCH1、安装elastic search dokcer中安装elastic search （1）下载ealastic search和kibana 12docker pull elasticsearch:7.6.2docker pull kibana:7.6.2 （2）配置 1234mkdir -p /mydata/elasticsearch/configmkdir -p /mydata/elasticsearch/dataecho &quot;http.host: 0.0.0.0&quot; &gt;/mydata/elasticsearch/config/elasticsearch.ymlchmod -R 777 /mydata/elasticsearch/ （3）启动Elastic search 1234567docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \\-e &quot;discovery.type=single-node&quot; \\-e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; \\-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \\-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \\-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \\-d elasticsearch:7.6.2 设置开机启动elasticsearch 1docker update elasticsearch --restart=always （4）启动kibana： 1docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.137.14:9200 -p 5601:5601 -d kibana:7.6.2 设置开机启动kibana 1docker update kibana --restart=always （5）测试 查看elasticsearch版本信息： http://192.168.137.14:9200/ 1234567891011121314151617&#123; &quot;name&quot;: &quot;0adeb7852e00&quot;, &quot;cluster_name&quot;: &quot;elasticsearch&quot;, &quot;cluster_uuid&quot;: &quot;9gglpP0HTfyOTRAaSe2rIg&quot;, &quot;version&quot;: &#123; &quot;number&quot;: &quot;7.6.2&quot;, &quot;build_flavor&quot;: &quot;default&quot;, &quot;build_type&quot;: &quot;docker&quot;, &quot;build_hash&quot;: &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;, &quot;build_date&quot;: &quot;2020-03-26T06:34:37.794943Z&quot;, &quot;build_snapshot&quot;: false, &quot;lucene_version&quot;: &quot;8.4.0&quot;, &quot;minimum_wire_compatibility_version&quot;: &quot;6.8.0&quot;, &quot;minimum_index_compatibility_version&quot;: &quot;6.0.0-beta1&quot; &#125;, &quot;tagline&quot;: &quot;You Know, for Search&quot;&#125; 显示elasticsearch 节点信息http://192.168.137.14:9200/_cat/nodes ， 1127.0.0.1 76 95 1 0.26 1.40 1.22 dilm * 0adeb7852e00 访问Kibana： http://192.168.137.14:5601/app/kibana 2、初步检索1）_CAT（1）GET&#x2F;cat&#x2F;nodes：查看所有节点 如：http://192.168.137.14:9200/_cat/nodes : 1127.0.0.1 61 91 11 0.08 0.49 0.87 dilm * 0adeb7852e00 注：*表示集群中的主节点 （2）GET&#x2F;cat&#x2F;health：查看es健康状况 如： http://192.168.137.14:9200/_cat/health 11588332616 11:30:16 elasticsearch green 1 1 3 3 0 0 0 0 - 100.0% 注：green表示健康值正常 （3）GET&#x2F;cat&#x2F;master：查看主节点 如： http://192.168.137.14:9200/_cat/master 1vfpgxbusTC6-W3C2Np31EQ 127.0.0.1 127.0.0.1 0adeb7852e00 （4）GET&#x2F;_cat&#x2F;indicies：查看所有索引 ，等价于mysql数据库的show databases; 如： http://192.168.137.14:9200/_cat/indices 123green open .kibana_task_manager_1 KWLtjcKRRuaV9so_v15WYg 1 0 2 0 39.8kb 39.8kbgreen open .apm-agent-configuration cuwCpJ5ER0OYsSgAJ7bVYA 1 0 0 0 283b 283bgreen open .kibana_1 PqK_LdUYRpWMy4fK0tMSPw 1 0 7 0 31.2kb 31.2kb 2）索引一个文档保存一个数据，保存在哪个索引的哪个类型下，指定用那个唯一标识PUT customer&#x2F;external&#x2F;1;在customer索引下的external类型下保存1号数据为 1PUT customer/external/1 123&#123; &quot;name&quot;:&quot;John Doe&quot;&#125; PUT和POST都可以POST新增。如果不指定id，会自动生成id。指定id就会修改这个数据，并新增版本号；PUT可以新增也可以修改。PUT必须指定id；由于PUT需要指定id，我们一般用来做修改操作，不指定id会报错。 下面是在postman中的测试数据： 创建数据成功后，显示201 created表示插入记录成功。 1234567891011121314&#123; &quot;_index&quot;: &quot;customer&quot;, &quot;_type&quot;: &quot;external&quot;, &quot;_id&quot;: &quot;1&quot;, &quot;_version&quot;: 1, &quot;result&quot;: &quot;created&quot;, &quot;_shards&quot;: &#123; &quot;total&quot;: 2, &quot;successful&quot;: 1, &quot;failed&quot;: 0 &#125;, &quot;_seq_no&quot;: 0, &quot;_primary_term&quot;: 1&#125; 这些返回的JSON串的含义；这些带有下划线开头的，称为元数据，反映了当前的基本信息。 “_index”: “customer” 表明该数据在哪个数据库下； “_type”: “external” 表明该数据在哪个类型下； “_id”: “1” 表明被保存数据的id； “_version”: 1, 被保存数据的版本 “result”: “created” 这里是创建了一条数据，如果重新put一条数据，则该状态会变为updated，并且版本号也会发生变化。 下面选用POST方式： 添加数据的时候，不指定ID，会自动的生成id，并且类型是新增： 再次使用POST插入数据，仍然是新增的： 添加数据的时候，指定ID，会使用该id，并且类型是新增： 再次使用POST插入数据，类型为updated 3）查看文档GET &#x2F;customer&#x2F;external&#x2F;1 http://192.168.137.14:9200/customer/external/1 123456789101112&#123; &quot;_index&quot;: &quot;customer&quot;,//在哪个索引 &quot;_type&quot;: &quot;external&quot;,//在哪个类型 &quot;_id&quot;: &quot;1&quot;,//记录id &quot;_version&quot;: 3,//版本号 &quot;_seq_no&quot;: 6,//并发控制字段，每次更新都会+1，用来做乐观锁 &quot;_primary_term&quot;: 1,//同上，主分片重新分配，如重启，就会变化 &quot;found&quot;: true, &quot;_source&quot;: &#123; &quot;name&quot;: &quot;John Doe&quot; &#125;&#125; 通过“if_seq_no&#x3D;1&amp;if_primary_term&#x3D;1 ”，当序列号匹配的时候，才进行修改，否则不修改。 实例：将id&#x3D;1的数据更新为name&#x3D;1，然后再次更新为name&#x3D;2，起始_seq_no&#x3D;6，_primary_term&#x3D;1 （1）将name更新为1 http://192.168.137.14:9200/customer/external/1?if_seq_no=6&amp;if_primary_term=1 （2）将name更新为2，更新过程中使用seq_no&#x3D;6 http://192.168.137.14:9200/customer/external/1?if_seq_no=6&amp;if_primary_term=1 出现更新错误。 （3）查询新的数据 http://192.168.137.14:9200/customer/external/1 能够看到_seq_no变为7。 （4）再次更新，更新成功 http://192.168.137.14:9200/customer/external/1?if_seq_no=7&amp;if_primary_term=1 4）更新文档 （1）POST更新文档，带有_update http://192.168.137.14:9200/customer/external/1/_update 如果再次执行更新，则不执行任何操作，序列号也不发生变化 POST更新方式，会对比原来的数据，和原来的相同，则不执行任何操作（version和_seq_no）都不变。 （2）POST更新文档，不带_update 在更新过程中，重复执行更新操作，数据也能够更新成功，不会和原来的数据进行对比。 5）删除文档或索引12DELETE customer/external/1DELETE customer 注：elasticsearch并没有提供删除类型的操作，只提供了删除索引和文档的操作。 实例：删除id&#x3D;1的数据，删除后继续查询 实例：删除整个costomer索引数据 删除前，所有的索引 1234green open .kibana_task_manager_1 KWLtjcKRRuaV9so_v15WYg 1 0 2 0 39.8kb 39.8kbgreen open .apm-agent-configuration cuwCpJ5ER0OYsSgAJ7bVYA 1 0 0 0 283b 283bgreen open .kibana_1 PqK_LdUYRpWMy4fK0tMSPw 1 0 7 0 31.2kb 31.2kbyellow open customer nzDYCdnvQjSsapJrAIT8Zw 1 1 4 0 4.4kb 4.4kb 删除“ customer ”索引 删除后，所有的索引 123green open .kibana_task_manager_1 KWLtjcKRRuaV9so_v15WYg 1 0 2 0 39.8kb 39.8kbgreen open .apm-agent-configuration cuwCpJ5ER0OYsSgAJ7bVYA 1 0 0 0 283b 283bgreen open .kibana_1 PqK_LdUYRpWMy4fK0tMSPw 1 0 7 0 31.2kb 31.2kb 6）eleasticsearch的批量操作——bulk语法格式： 12345&#123;action:&#123;metadata&#125;&#125;\\n&#123;request body &#125;\\n&#123;action:&#123;metadata&#125;&#125;\\n&#123;request body &#125;\\n 这里的批量操作，当发生某一条执行发生失败时，其他的数据仍然能够接着执行，也就是说彼此之间是独立的。 bulk api以此按顺序执行所有的action（动作）。如果一个单个的动作因任何原因失败，它将继续处理它后面剩余的动作。当bulk api返回时，它将提供每个动作的状态（与发送的顺序相同），所以您可以检查是否一个指定的动作是否失败了。 实例1: 执行多条数据 12345POST customer/external/_bulk&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125;&#123;&quot;name&quot;:&quot;John Doe&quot;&#125;&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;2&quot;&#125;&#125;&#123;&quot;name&quot;:&quot;John Doe&quot;&#125; 执行结果 123456789101112131415161718192021222324252627282930313233343536373839404142#! Deprecation: [types removal] Specifying types in bulk requests is deprecated.&#123; &quot;took&quot; : 491, &quot;errors&quot; : false, &quot;items&quot; : [ &#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;customer&quot;, &quot;_type&quot; : &quot;external&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_version&quot; : 1, &quot;result&quot; : &quot;created&quot;, &quot;_shards&quot; : &#123; &quot;total&quot; : 2, &quot;successful&quot; : 1, &quot;failed&quot; : 0 &#125;, &quot;_seq_no&quot; : 0, &quot;_primary_term&quot; : 1, &quot;status&quot; : 201 &#125; &#125;, &#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;customer&quot;, &quot;_type&quot; : &quot;external&quot;, &quot;_id&quot; : &quot;2&quot;, &quot;_version&quot; : 1, &quot;result&quot; : &quot;created&quot;, &quot;_shards&quot; : &#123; &quot;total&quot; : 2, &quot;successful&quot; : 1, &quot;failed&quot; : 0 &#125;, &quot;_seq_no&quot; : 1, &quot;_primary_term&quot; : 1, &quot;status&quot; : 201 &#125; &#125; ]&#125; 实例2：对于整个索引执行批量操作 12345678POST /_bulk&#123;&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;website&quot;,&quot;_type&quot;:&quot;blog&quot;,&quot;_id&quot;:&quot;123&quot;&#125;&#125;&#123;&quot;create&quot;:&#123;&quot;_index&quot;:&quot;website&quot;,&quot;_type&quot;:&quot;blog&quot;,&quot;_id&quot;:&quot;123&quot;&#125;&#125;&#123;&quot;title&quot;:&quot;my first blog post&quot;&#125;&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;website&quot;,&quot;_type&quot;:&quot;blog&quot;&#125;&#125;&#123;&quot;title&quot;:&quot;my second blog post&quot;&#125;&#123;&quot;update&quot;:&#123;&quot;_index&quot;:&quot;website&quot;,&quot;_type&quot;:&quot;blog&quot;,&quot;_id&quot;:&quot;123&quot;&#125;&#125;&#123;&quot;doc&quot;:&#123;&quot;title&quot;:&quot;my updated blog post&quot;&#125;&#125; 运行结果： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#! Deprecation: [types removal] Specifying types in bulk requests is deprecated.&#123; &quot;took&quot; : 608, &quot;errors&quot; : false, &quot;items&quot; : [ &#123; &quot;delete&quot; : &#123; &quot;_index&quot; : &quot;website&quot;, &quot;_type&quot; : &quot;blog&quot;, &quot;_id&quot; : &quot;123&quot;, &quot;_version&quot; : 1, &quot;result&quot; : &quot;not_found&quot;, &quot;_shards&quot; : &#123; &quot;total&quot; : 2, &quot;successful&quot; : 1, &quot;failed&quot; : 0 &#125;, &quot;_seq_no&quot; : 0, &quot;_primary_term&quot; : 1, &quot;status&quot; : 404 &#125; &#125;, &#123; &quot;create&quot; : &#123; &quot;_index&quot; : &quot;website&quot;, &quot;_type&quot; : &quot;blog&quot;, &quot;_id&quot; : &quot;123&quot;, &quot;_version&quot; : 2, &quot;result&quot; : &quot;created&quot;, &quot;_shards&quot; : &#123; &quot;total&quot; : 2, &quot;successful&quot; : 1, &quot;failed&quot; : 0 &#125;, &quot;_seq_no&quot; : 1, &quot;_primary_term&quot; : 1, &quot;status&quot; : 201 &#125; &#125;, &#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;website&quot;, &quot;_type&quot; : &quot;blog&quot;, &quot;_id&quot; : &quot;MCOs0HEBHYK_MJXUyYIz&quot;, &quot;_version&quot; : 1, &quot;result&quot; : &quot;created&quot;, &quot;_shards&quot; : &#123; &quot;total&quot; : 2, &quot;successful&quot; : 1, &quot;failed&quot; : 0 &#125;, &quot;_seq_no&quot; : 2, &quot;_primary_term&quot; : 1, &quot;status&quot; : 201 &#125; &#125;, &#123; &quot;update&quot; : &#123; &quot;_index&quot; : &quot;website&quot;, &quot;_type&quot; : &quot;blog&quot;, &quot;_id&quot; : &quot;123&quot;, &quot;_version&quot; : 3, &quot;result&quot; : &quot;updated&quot;, &quot;_shards&quot; : &#123; &quot;total&quot; : 2, &quot;successful&quot; : 1, &quot;failed&quot; : 0 &#125;, &quot;_seq_no&quot; : 3, &quot;_primary_term&quot; : 1, &quot;status&quot; : 200 &#125; &#125; ]&#125; 7）样本测试数据准备了一份顾客银行账户信息的虚构的JSON文档样本。每个文档都有下列的schema（模式）。 12345678910111213&#123; &quot;account_number&quot;: 1, &quot;balance&quot;: 39225, &quot;firstname&quot;: &quot;Amber&quot;, &quot;lastname&quot;: &quot;Duke&quot;, &quot;age&quot;: 32, &quot;gender&quot;: &quot;M&quot;, &quot;address&quot;: &quot;880 Holmes Lane&quot;, &quot;employer&quot;: &quot;Pyrami&quot;, &quot;email&quot;: &quot;amberduke@pyrami.com&quot;, &quot;city&quot;: &quot;Brogan&quot;, &quot;state&quot;: &quot;IL&quot;&#125; https://github.com/elastic/elasticsearch/blob/master/docs/src/test/resources/accounts.json ，导入测试数据， POST bank&#x2F;account&#x2F;_bulk 3、检索1）search ApiES支持两种基本方式检索； 通过REST request uri 发送搜索参数 （uri +检索参数）； 通过REST request body 来发送它们（uri+请求体）； 信息检索 uri+请求体进行检索 123456789GET /bank/_search&#123; &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;, &quot;sort&quot;: [ &#123; &quot;account_number&quot;: &quot;asc&quot; &#125;, &#123;&quot;balance&quot;:&quot;desc&quot;&#125; ]&#125; HTTP客户端工具（），get请求不能够携带请求体， 1GET bank/_search?q=*&amp;sort=account_number:asc 返回结果： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240&#123; &quot;took&quot; : 235, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1000, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : null, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;0&quot;, &quot;_score&quot; : null, &quot;_source&quot; : &#123; &quot;account_number&quot; : 0, &quot;balance&quot; : 16623, &quot;firstname&quot; : &quot;Bradshaw&quot;, &quot;lastname&quot; : &quot;Mckenzie&quot;, &quot;age&quot; : 29, &quot;gender&quot; : &quot;F&quot;, &quot;address&quot; : &quot;244 Columbus Place&quot;, &quot;employer&quot; : &quot;Euron&quot;, &quot;email&quot; : &quot;bradshawmckenzie@euron.com&quot;, &quot;city&quot; : &quot;Hobucken&quot;, &quot;state&quot; : &quot;CO&quot; &#125;, &quot;sort&quot; : [ 0 ] &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : null, &quot;_source&quot; : &#123; &quot;account_number&quot; : 1, &quot;balance&quot; : 39225, &quot;firstname&quot; : &quot;Amber&quot;, &quot;lastname&quot; : &quot;Duke&quot;, &quot;age&quot; : 32, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;880 Holmes Lane&quot;, &quot;employer&quot; : &quot;Pyrami&quot;, &quot;email&quot; : &quot;amberduke@pyrami.com&quot;, &quot;city&quot; : &quot;Brogan&quot;, &quot;state&quot; : &quot;IL&quot; &#125;, &quot;sort&quot; : [ 1 ] &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;2&quot;, &quot;_score&quot; : null, &quot;_source&quot; : &#123; &quot;account_number&quot; : 2, &quot;balance&quot; : 28838, &quot;firstname&quot; : &quot;Roberta&quot;, &quot;lastname&quot; : &quot;Bender&quot;, &quot;age&quot; : 22, &quot;gender&quot; : &quot;F&quot;, &quot;address&quot; : &quot;560 Kingsway Place&quot;, &quot;employer&quot; : &quot;Chillium&quot;, &quot;email&quot; : &quot;robertabender@chillium.com&quot;, &quot;city&quot; : &quot;Bennett&quot;, &quot;state&quot; : &quot;LA&quot; &#125;, &quot;sort&quot; : [ 2 ] &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;3&quot;, &quot;_score&quot; : null, &quot;_source&quot; : &#123; &quot;account_number&quot; : 3, &quot;balance&quot; : 44947, &quot;firstname&quot; : &quot;Levine&quot;, &quot;lastname&quot; : &quot;Burks&quot;, &quot;age&quot; : 26, &quot;gender&quot; : &quot;F&quot;, &quot;address&quot; : &quot;328 Wilson Avenue&quot;, &quot;employer&quot; : &quot;Amtap&quot;, &quot;email&quot; : &quot;levineburks@amtap.com&quot;, &quot;city&quot; : &quot;Cochranville&quot;, &quot;state&quot; : &quot;HI&quot; &#125;, &quot;sort&quot; : [ 3 ] &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;4&quot;, &quot;_score&quot; : null, &quot;_source&quot; : &#123; &quot;account_number&quot; : 4, &quot;balance&quot; : 27658, &quot;firstname&quot; : &quot;Rodriquez&quot;, &quot;lastname&quot; : &quot;Flores&quot;, &quot;age&quot; : 31, &quot;gender&quot; : &quot;F&quot;, &quot;address&quot; : &quot;986 Wyckoff Avenue&quot;, &quot;employer&quot; : &quot;Tourmania&quot;, &quot;email&quot; : &quot;rodriquezflores@tourmania.com&quot;, &quot;city&quot; : &quot;Eastvale&quot;, &quot;state&quot; : &quot;HI&quot; &#125;, &quot;sort&quot; : [ 4 ] &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;5&quot;, &quot;_score&quot; : null, &quot;_source&quot; : &#123; &quot;account_number&quot; : 5, &quot;balance&quot; : 29342, &quot;firstname&quot; : &quot;Leola&quot;, &quot;lastname&quot; : &quot;Stewart&quot;, &quot;age&quot; : 30, &quot;gender&quot; : &quot;F&quot;, &quot;address&quot; : &quot;311 Elm Place&quot;, &quot;employer&quot; : &quot;Diginetic&quot;, &quot;email&quot; : &quot;leolastewart@diginetic.com&quot;, &quot;city&quot; : &quot;Fairview&quot;, &quot;state&quot; : &quot;NJ&quot; &#125;, &quot;sort&quot; : [ 5 ] &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;6&quot;, &quot;_score&quot; : null, &quot;_source&quot; : &#123; &quot;account_number&quot; : 6, &quot;balance&quot; : 5686, &quot;firstname&quot; : &quot;Hattie&quot;, &quot;lastname&quot; : &quot;Bond&quot;, &quot;age&quot; : 36, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;671 Bristol Street&quot;, &quot;employer&quot; : &quot;Netagy&quot;, &quot;email&quot; : &quot;hattiebond@netagy.com&quot;, &quot;city&quot; : &quot;Dante&quot;, &quot;state&quot; : &quot;TN&quot; &#125;, &quot;sort&quot; : [ 6 ] &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;7&quot;, &quot;_score&quot; : null, &quot;_source&quot; : &#123; &quot;account_number&quot; : 7, &quot;balance&quot; : 39121, &quot;firstname&quot; : &quot;Levy&quot;, &quot;lastname&quot; : &quot;Richard&quot;, &quot;age&quot; : 22, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;820 Logan Street&quot;, &quot;employer&quot; : &quot;Teraprene&quot;, &quot;email&quot; : &quot;levyrichard@teraprene.com&quot;, &quot;city&quot; : &quot;Shrewsbury&quot;, &quot;state&quot; : &quot;MO&quot; &#125;, &quot;sort&quot; : [ 7 ] &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;8&quot;, &quot;_score&quot; : null, &quot;_source&quot; : &#123; &quot;account_number&quot; : 8, &quot;balance&quot; : 48868, &quot;firstname&quot; : &quot;Jan&quot;, &quot;lastname&quot; : &quot;Burns&quot;, &quot;age&quot; : 35, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;699 Visitation Place&quot;, &quot;employer&quot; : &quot;Glasstep&quot;, &quot;email&quot; : &quot;janburns@glasstep.com&quot;, &quot;city&quot; : &quot;Wakulla&quot;, &quot;state&quot; : &quot;AZ&quot; &#125;, &quot;sort&quot; : [ 8 ] &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;9&quot;, &quot;_score&quot; : null, &quot;_source&quot; : &#123; &quot;account_number&quot; : 9, &quot;balance&quot; : 24776, &quot;firstname&quot; : &quot;Opal&quot;, &quot;lastname&quot; : &quot;Meadows&quot;, &quot;age&quot; : 39, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;963 Neptune Avenue&quot;, &quot;employer&quot; : &quot;Cedward&quot;, &quot;email&quot; : &quot;opalmeadows@cedward.com&quot;, &quot;city&quot; : &quot;Olney&quot;, &quot;state&quot; : &quot;OH&quot; &#125;, &quot;sort&quot; : [ 9 ] &#125; ] &#125;&#125; （1）只有6条数据，这是因为存在分页查询； （2）详细的字段信息，参照： https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started-search.html The response also provides the following information about the search request: took – how long it took Elasticsearch to run the query, in milliseconds timed_out – whether or not the search request timed out _shards – how many shards were searched and a breakdown of how many shards succeeded, failed, or were skipped. max_score – the score of the most relevant document found hits.total.value - how many matching documents were found hits.sort - the document’s sort position (when not sorting by relevance score) hits._score - the document’s relevance score (not applicable when using match_all) 2）Query DSL（1）基本语法格式Elasticsearch提供了一个可以执行查询的Json风格的DSL。这个被称为Query DSL，该查询语言非常全面。 一个查询语句的典型结构 1234QUERY_NAME:&#123; ARGUMENT:VALUE, ARGUMENT:VALUE,...&#125; 如果针对于某个字段，那么它的结构如下： 12345678&#123; QUERY_NAME:&#123; FIELD_NAME:&#123; ARGUMENT:VALUE, ARGUMENT:VALUE,... &#125; &#125;&#125; 123456789101112131415GET bank/_search&#123; &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;, &quot;from&quot;: 0, &quot;size&quot;: 5, &quot;sort&quot;: [ &#123; &quot;account_number&quot;: &#123; &quot;order&quot;: &quot;desc&quot; &#125; &#125; ]&#125; query定义如何查询； match_all查询类型【代表查询所有的所有】，es中可以在query中组合非常多的查询类型完成复杂查询； 除了query参数之外，我们可也传递其他的参数以改变查询结果，如sort，size； from+size限定，完成分页功能； sort排序，多字段排序，会在前序字段相等时后续字段内部排序，否则以前序为准； （2）返回部分字段123456789101112131415161718GET bank/_search&#123; &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;, &quot;from&quot;: 0, &quot;size&quot;: 5, &quot;sort&quot;: [ &#123; &quot;account_number&quot;: &#123; &quot;order&quot;: &quot;desc&quot; &#125; &#125; ], &quot;_source&quot;: [&quot;balance&quot;,&quot;firstname&quot;] &#125; 查询结果： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485&#123; &quot;took&quot; : 18, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1000, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : null, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;999&quot;, &quot;_score&quot; : null, &quot;_source&quot; : &#123; &quot;firstname&quot; : &quot;Dorothy&quot;, &quot;balance&quot; : 6087 &#125;, &quot;sort&quot; : [ 999 ] &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;998&quot;, &quot;_score&quot; : null, &quot;_source&quot; : &#123; &quot;firstname&quot; : &quot;Letha&quot;, &quot;balance&quot; : 16869 &#125;, &quot;sort&quot; : [ 998 ] &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;997&quot;, &quot;_score&quot; : null, &quot;_source&quot; : &#123; &quot;firstname&quot; : &quot;Combs&quot;, &quot;balance&quot; : 25311 &#125;, &quot;sort&quot; : [ 997 ] &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;996&quot;, &quot;_score&quot; : null, &quot;_source&quot; : &#123; &quot;firstname&quot; : &quot;Andrews&quot;, &quot;balance&quot; : 17541 &#125;, &quot;sort&quot; : [ 996 ] &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;995&quot;, &quot;_score&quot; : null, &quot;_source&quot; : &#123; &quot;firstname&quot; : &quot;Phelps&quot;, &quot;balance&quot; : 21153 &#125;, &quot;sort&quot; : [ 995 ] &#125; ] &#125;&#125; （3）match匹配查询 基本类型（非字符串），精确控制 123456789GET bank/_search&#123; &quot;query&quot;: &#123; &quot;match&quot;: &#123; &quot;account_number&quot;: &quot;20&quot; &#125; &#125;&#125; match返回account_number&#x3D;20的数据。 查询结果： 123456789101112131415161718192021222324252627282930313233343536373839&#123; &quot;took&quot; : 1, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 1.0, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;20&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : &#123; &quot;account_number&quot; : 20, &quot;balance&quot; : 16418, &quot;firstname&quot; : &quot;Elinor&quot;, &quot;lastname&quot; : &quot;Ratliff&quot;, &quot;age&quot; : 36, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;282 Kings Place&quot;, &quot;employer&quot; : &quot;Scentric&quot;, &quot;email&quot; : &quot;elinorratliff@scentric.com&quot;, &quot;city&quot; : &quot;Ribera&quot;, &quot;state&quot; : &quot;WA&quot; &#125; &#125; ] &#125;&#125; 字符串，全文检索 12345678GET bank/_search&#123; &quot;query&quot;: &#123; &quot;match&quot;: &#123; &quot;address&quot;: &quot;kings&quot; &#125; &#125;&#125; 全文检索，最终会按照评分进行排序，会对检索条件进行分词匹配。 查询结果： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&#123; &quot;took&quot; : 30, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 2, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 5.990829, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;20&quot;, &quot;_score&quot; : 5.990829, &quot;_source&quot; : &#123; &quot;account_number&quot; : 20, &quot;balance&quot; : 16418, &quot;firstname&quot; : &quot;Elinor&quot;, &quot;lastname&quot; : &quot;Ratliff&quot;, &quot;age&quot; : 36, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;282 Kings Place&quot;, &quot;employer&quot; : &quot;Scentric&quot;, &quot;email&quot; : &quot;elinorratliff@scentric.com&quot;, &quot;city&quot; : &quot;Ribera&quot;, &quot;state&quot; : &quot;WA&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;722&quot;, &quot;_score&quot; : 5.990829, &quot;_source&quot; : &#123; &quot;account_number&quot; : 722, &quot;balance&quot; : 27256, &quot;firstname&quot; : &quot;Roberts&quot;, &quot;lastname&quot; : &quot;Beasley&quot;, &quot;age&quot; : 34, &quot;gender&quot; : &quot;F&quot;, &quot;address&quot; : &quot;305 Kings Hwy&quot;, &quot;employer&quot; : &quot;Quintity&quot;, &quot;email&quot; : &quot;robertsbeasley@quintity.com&quot;, &quot;city&quot; : &quot;Hayden&quot;, &quot;state&quot; : &quot;PA&quot; &#125; &#125; ] &#125;&#125; （4） match_phrase [短句匹配]将需要匹配的值当成一整个单词（不分词）进行检索 12345678GET bank/_search&#123; &quot;query&quot;: &#123; &quot;match_phrase&quot;: &#123; &quot;address&quot;: &quot;mill road&quot; &#125; &#125;&#125; 查处address中包含mill_road的所有记录，并给出相关性得分 查看结果： 123456789101112131415161718192021222324252627282930313233343536373839&#123; &quot;took&quot; : 32, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 8.926605, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;970&quot;, &quot;_score&quot; : 8.926605, &quot;_source&quot; : &#123; &quot;account_number&quot; : 970, &quot;balance&quot; : 19648, &quot;firstname&quot; : &quot;Forbes&quot;, &quot;lastname&quot; : &quot;Wallace&quot;, &quot;age&quot; : 28, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;990 Mill Road&quot;, &quot;employer&quot; : &quot;Pheast&quot;, &quot;email&quot; : &quot;forbeswallace@pheast.com&quot;, &quot;city&quot; : &quot;Lopezo&quot;, &quot;state&quot; : &quot;AK&quot; &#125; &#125; ] &#125;&#125; match_phrase和Match的区别，观察如下实例： 12345678GET bank/_search&#123; &quot;query&quot;: &#123; &quot;match_phrase&quot;: &#123; &quot;address&quot;: &quot;990 Mill&quot; &#125; &#125;&#125; 查询结果： 123456789101112131415161718192021222324252627282930313233343536373839&#123; &quot;took&quot; : 0, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 10.806405, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;970&quot;, &quot;_score&quot; : 10.806405, &quot;_source&quot; : &#123; &quot;account_number&quot; : 970, &quot;balance&quot; : 19648, &quot;firstname&quot; : &quot;Forbes&quot;, &quot;lastname&quot; : &quot;Wallace&quot;, &quot;age&quot; : 28, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;990 Mill Road&quot;, &quot;employer&quot; : &quot;Pheast&quot;, &quot;email&quot; : &quot;forbeswallace@pheast.com&quot;, &quot;city&quot; : &quot;Lopezo&quot;, &quot;state&quot; : &quot;AK&quot; &#125; &#125; ] &#125;&#125; 使用match的keyword 12345678GET bank/_search&#123; &quot;query&quot;: &#123; &quot;match&quot;: &#123; &quot;address.keyword&quot;: &quot;990 Mill&quot; &#125; &#125;&#125; 查询结果，一条也未匹配到 12345678910111213141516171819&#123; &quot;took&quot; : 0, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 0, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : null, &quot;hits&quot; : [ ] &#125;&#125; 修改匹配条件为“990 Mill Road” 12345678GET bank/_search&#123; &quot;query&quot;: &#123; &quot;match&quot;: &#123; &quot;address.keyword&quot;: &quot;990 Mill Road&quot; &#125; &#125;&#125; 查询出一条数据 123456789101112131415161718192021222324252627282930313233343536373839&#123; &quot;took&quot; : 1, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 6.5032897, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;970&quot;, &quot;_score&quot; : 6.5032897, &quot;_source&quot; : &#123; &quot;account_number&quot; : 970, &quot;balance&quot; : 19648, &quot;firstname&quot; : &quot;Forbes&quot;, &quot;lastname&quot; : &quot;Wallace&quot;, &quot;age&quot; : 28, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;990 Mill Road&quot;, &quot;employer&quot; : &quot;Pheast&quot;, &quot;email&quot; : &quot;forbeswallace@pheast.com&quot;, &quot;city&quot; : &quot;Lopezo&quot;, &quot;state&quot; : &quot;AK&quot; &#125; &#125; ] &#125;&#125; 文本字段的匹配，使用keyword，匹配的条件就是要显示字段的全部值，要进行精确匹配的。 match_phrase是做短语匹配，只要文本中包含匹配条件，就能匹配到。 （5）multi_math【多字段匹配】123456789101112GET bank/_search&#123; &quot;query&quot;: &#123; &quot;multi_match&quot;: &#123; &quot;query&quot;: &quot;mill&quot;, &quot;fields&quot;: [ &quot;state&quot;, &quot;address&quot; ] &#125; &#125;&#125; state或者address中包含mill，并且在查询过程中，会对于查询条件进行分词。 查询结果： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596&#123; &quot;took&quot; : 28, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 4, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 5.4032025, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;970&quot;, &quot;_score&quot; : 5.4032025, &quot;_source&quot; : &#123; &quot;account_number&quot; : 970, &quot;balance&quot; : 19648, &quot;firstname&quot; : &quot;Forbes&quot;, &quot;lastname&quot; : &quot;Wallace&quot;, &quot;age&quot; : 28, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;990 Mill Road&quot;, &quot;employer&quot; : &quot;Pheast&quot;, &quot;email&quot; : &quot;forbeswallace@pheast.com&quot;, &quot;city&quot; : &quot;Lopezo&quot;, &quot;state&quot; : &quot;AK&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;136&quot;, &quot;_score&quot; : 5.4032025, &quot;_source&quot; : &#123; &quot;account_number&quot; : 136, &quot;balance&quot; : 45801, &quot;firstname&quot; : &quot;Winnie&quot;, &quot;lastname&quot; : &quot;Holland&quot;, &quot;age&quot; : 38, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;198 Mill Lane&quot;, &quot;employer&quot; : &quot;Neteria&quot;, &quot;email&quot; : &quot;winnieholland@neteria.com&quot;, &quot;city&quot; : &quot;Urie&quot;, &quot;state&quot; : &quot;IL&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;345&quot;, &quot;_score&quot; : 5.4032025, &quot;_source&quot; : &#123; &quot;account_number&quot; : 345, &quot;balance&quot; : 9812, &quot;firstname&quot; : &quot;Parker&quot;, &quot;lastname&quot; : &quot;Hines&quot;, &quot;age&quot; : 38, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;715 Mill Avenue&quot;, &quot;employer&quot; : &quot;Baluba&quot;, &quot;email&quot; : &quot;parkerhines@baluba.com&quot;, &quot;city&quot; : &quot;Blackgum&quot;, &quot;state&quot; : &quot;KY&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;472&quot;, &quot;_score&quot; : 5.4032025, &quot;_source&quot; : &#123; &quot;account_number&quot; : 472, &quot;balance&quot; : 25571, &quot;firstname&quot; : &quot;Lee&quot;, &quot;lastname&quot; : &quot;Long&quot;, &quot;age&quot; : 32, &quot;gender&quot; : &quot;F&quot;, &quot;address&quot; : &quot;288 Mill Street&quot;, &quot;employer&quot; : &quot;Comverges&quot;, &quot;email&quot; : &quot;leelong@comverges.com&quot;, &quot;city&quot; : &quot;Movico&quot;, &quot;state&quot; : &quot;MT&quot; &#125; &#125; ] &#125;&#125; （6）bool用来做复合查询复合语句可以合并，任何其他查询语句，包括符合语句。这也就意味着，复合语句之间可以互相嵌套，可以表达非常复杂的逻辑。 must：必须达到must所列举的所有条件 1234567891011GET bank/_search&#123; &quot;query&quot;:&#123; &quot;bool&quot;:&#123; &quot;must&quot;:[ &#123;&quot;match&quot;:&#123;&quot;address&quot;:&quot;mill&quot;&#125;&#125;, &#123;&quot;match&quot;:&#123;&quot;gender&quot;:&quot;M&quot;&#125;&#125; ] &#125; &#125;&#125; must_not，必须不匹配must_not所列举的所有条件。 should，应该满足should所列举的条件。 实例：查询gender&#x3D;m，并且address&#x3D;mill的数据 12345678910111213141516171819GET bank/_search&#123; &quot;query&quot;: &#123; &quot;bool&quot;: &#123; &quot;must&quot;: [ &#123; &quot;match&quot;: &#123; &quot;gender&quot;: &quot;M&quot; &#125; &#125;, &#123; &quot;match&quot;: &#123; &quot;address&quot;: &quot;mill&quot; &#125; &#125; ] &#125; &#125;&#125; 查询结果： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&#123; &quot;took&quot; : 1, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 3, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 6.0824604, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;970&quot;, &quot;_score&quot; : 6.0824604, &quot;_source&quot; : &#123; &quot;account_number&quot; : 970, &quot;balance&quot; : 19648, &quot;firstname&quot; : &quot;Forbes&quot;, &quot;lastname&quot; : &quot;Wallace&quot;, &quot;age&quot; : 28, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;990 Mill Road&quot;, &quot;employer&quot; : &quot;Pheast&quot;, &quot;email&quot; : &quot;forbeswallace@pheast.com&quot;, &quot;city&quot; : &quot;Lopezo&quot;, &quot;state&quot; : &quot;AK&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;136&quot;, &quot;_score&quot; : 6.0824604, &quot;_source&quot; : &#123; &quot;account_number&quot; : 136, &quot;balance&quot; : 45801, &quot;firstname&quot; : &quot;Winnie&quot;, &quot;lastname&quot; : &quot;Holland&quot;, &quot;age&quot; : 38, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;198 Mill Lane&quot;, &quot;employer&quot; : &quot;Neteria&quot;, &quot;email&quot; : &quot;winnieholland@neteria.com&quot;, &quot;city&quot; : &quot;Urie&quot;, &quot;state&quot; : &quot;IL&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;345&quot;, &quot;_score&quot; : 6.0824604, &quot;_source&quot; : &#123; &quot;account_number&quot; : 345, &quot;balance&quot; : 9812, &quot;firstname&quot; : &quot;Parker&quot;, &quot;lastname&quot; : &quot;Hines&quot;, &quot;age&quot; : 38, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;715 Mill Avenue&quot;, &quot;employer&quot; : &quot;Baluba&quot;, &quot;email&quot; : &quot;parkerhines@baluba.com&quot;, &quot;city&quot; : &quot;Blackgum&quot;, &quot;state&quot; : &quot;KY&quot; &#125; &#125; ] &#125;&#125; must_not：必须不是指定的情况 实例：查询gender&#x3D;m，并且address&#x3D;mill的数据，但是age不等于38的 123456789101112131415161718192021222324252627GET bank/_search&#123; &quot;query&quot;: &#123; &quot;bool&quot;: &#123; &quot;must&quot;: [ &#123; &quot;match&quot;: &#123; &quot;gender&quot;: &quot;M&quot; &#125; &#125;, &#123; &quot;match&quot;: &#123; &quot;address&quot;: &quot;mill&quot; &#125; &#125; ], &quot;must_not&quot;: [ &#123; &quot;match&quot;: &#123; &quot;age&quot;: &quot;38&quot; &#125; &#125; ] &#125; &#125; 查询结果： 123456789101112131415161718192021222324252627282930313233343536373839&#123; &quot;took&quot; : 4, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 6.0824604, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;970&quot;, &quot;_score&quot; : 6.0824604, &quot;_source&quot; : &#123; &quot;account_number&quot; : 970, &quot;balance&quot; : 19648, &quot;firstname&quot; : &quot;Forbes&quot;, &quot;lastname&quot; : &quot;Wallace&quot;, &quot;age&quot; : 28, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;990 Mill Road&quot;, &quot;employer&quot; : &quot;Pheast&quot;, &quot;email&quot; : &quot;forbeswallace@pheast.com&quot;, &quot;city&quot; : &quot;Lopezo&quot;, &quot;state&quot; : &quot;AK&quot; &#125; &#125; ] &#125;&#125; should：应该达到should列举的条件，如果到达会增加相关文档的评分，并不会改变查询的结果。如果query中只有should且只有一种匹配规则，那么should的条件就会被作为默认匹配条件二区改变查询结果。 实例：匹配lastName应该等于Wallace的数据 123456789101112131415161718192021222324252627282930313233GET bank/_search&#123; &quot;query&quot;: &#123; &quot;bool&quot;: &#123; &quot;must&quot;: [ &#123; &quot;match&quot;: &#123; &quot;gender&quot;: &quot;M&quot; &#125; &#125;, &#123; &quot;match&quot;: &#123; &quot;address&quot;: &quot;mill&quot; &#125; &#125; ], &quot;must_not&quot;: [ &#123; &quot;match&quot;: &#123; &quot;age&quot;: &quot;18&quot; &#125; &#125; ], &quot;should&quot;: [ &#123; &quot;match&quot;: &#123; &quot;lastname&quot;: &quot;Wallace&quot; &#125; &#125; ] &#125; &#125;&#125; 查询结果： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&#123; &quot;took&quot; : 5, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 3, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 12.585751, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;970&quot;, &quot;_score&quot; : 12.585751, &quot;_source&quot; : &#123; &quot;account_number&quot; : 970, &quot;balance&quot; : 19648, &quot;firstname&quot; : &quot;Forbes&quot;, &quot;lastname&quot; : &quot;Wallace&quot;, &quot;age&quot; : 28, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;990 Mill Road&quot;, &quot;employer&quot; : &quot;Pheast&quot;, &quot;email&quot; : &quot;forbeswallace@pheast.com&quot;, &quot;city&quot; : &quot;Lopezo&quot;, &quot;state&quot; : &quot;AK&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;136&quot;, &quot;_score&quot; : 6.0824604, &quot;_source&quot; : &#123; &quot;account_number&quot; : 136, &quot;balance&quot; : 45801, &quot;firstname&quot; : &quot;Winnie&quot;, &quot;lastname&quot; : &quot;Holland&quot;, &quot;age&quot; : 38, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;198 Mill Lane&quot;, &quot;employer&quot; : &quot;Neteria&quot;, &quot;email&quot; : &quot;winnieholland@neteria.com&quot;, &quot;city&quot; : &quot;Urie&quot;, &quot;state&quot; : &quot;IL&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;345&quot;, &quot;_score&quot; : 6.0824604, &quot;_source&quot; : &#123; &quot;account_number&quot; : 345, &quot;balance&quot; : 9812, &quot;firstname&quot; : &quot;Parker&quot;, &quot;lastname&quot; : &quot;Hines&quot;, &quot;age&quot; : 38, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;715 Mill Avenue&quot;, &quot;employer&quot; : &quot;Baluba&quot;, &quot;email&quot; : &quot;parkerhines@baluba.com&quot;, &quot;city&quot; : &quot;Blackgum&quot;, &quot;state&quot; : &quot;KY&quot; &#125; &#125; ] &#125;&#125; 能够看到相关度越高，得分也越高。 （7）Filter【结果过滤】并不是所有的查询都需要产生分数，特别是哪些仅用于filtering过滤的文档。为了不计算分数，elasticsearch会自动检查场景并且优化查询的执行。 1234567891011121314151617181920212223GET bank/_search&#123; &quot;query&quot;: &#123; &quot;bool&quot;: &#123; &quot;must&quot;: [ &#123; &quot;match&quot;: &#123; &quot;address&quot;: &quot;mill&quot; &#125; &#125; ], &quot;filter&quot;: &#123; &quot;range&quot;: &#123; &quot;balance&quot;: &#123; &quot;gte&quot;: &quot;10000&quot;, &quot;lte&quot;: &quot;20000&quot; &#125; &#125; &#125; &#125; &#125;&#125; 这里先是查询所有匹配address&#x3D;mill的文档，然后再根据10000&lt;&#x3D;balance&lt;&#x3D;20000进行过滤查询结果 查询结果： 123456789101112131415161718192021222324252627282930313233343536373839&#123; &quot;took&quot; : 2, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 5.4032025, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;970&quot;, &quot;_score&quot; : 5.4032025, &quot;_source&quot; : &#123; &quot;account_number&quot; : 970, &quot;balance&quot; : 19648, &quot;firstname&quot; : &quot;Forbes&quot;, &quot;lastname&quot; : &quot;Wallace&quot;, &quot;age&quot; : 28, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;990 Mill Road&quot;, &quot;employer&quot; : &quot;Pheast&quot;, &quot;email&quot; : &quot;forbeswallace@pheast.com&quot;, &quot;city&quot; : &quot;Lopezo&quot;, &quot;state&quot; : &quot;AK&quot; &#125; &#125; ] &#125;&#125; Each must, should, and must_not element in a Boolean query is referred to as a query clause. How well a document meets the criteria in each must or should clause contributes to the document’s relevance score. The higher the score, the better the document matches your search criteria. By default, Elasticsearch returns documents ranked by these relevance scores. 在boolean查询中，must, should 和must_not 元素都被称为查询子句 。 文档是否符合每个“must”或“should”子句中的标准，决定了文档的“相关性得分”。 得分越高，文档越符合您的搜索条件。 默认情况下，Elasticsearch返回根据这些相关性得分排序的文档。 The criteria in a must_not clause is treated as a filter. It affects whether or not the document is included in the results, but does not contribute to how documents are scored. You can also explicitly specify arbitrary filters to include or exclude documents based on structured data. “must_not”子句中的条件被视为“过滤器”。 它影响文档是否包含在结果中， 但不影响文档的评分方式。 还可以显式地指定任意过滤器来包含或排除基于结构化数据的文档。 filter在使用过程中，并不会计算相关性得分： 12345678910111213141516171819202122GET bank/_search&#123; &quot;query&quot;: &#123; &quot;bool&quot;: &#123; &quot;must&quot;: [ &#123; &quot;match&quot;: &#123; &quot;address&quot;: &quot;mill&quot; &#125; &#125; ], &quot;filter&quot;: &#123; &quot;range&quot;: &#123; &quot;balance&quot;: &#123; &quot;gte&quot;: &quot;10000&quot;, &quot;lte&quot;: &quot;20000&quot; &#125; &#125; &#125; &#125; &#125;&#125; 查询结果： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210&#123; &quot;took&quot; : 1, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 213, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 0.0, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;20&quot;, &quot;_score&quot; : 0.0, &quot;_source&quot; : &#123; &quot;account_number&quot; : 20, &quot;balance&quot; : 16418, &quot;firstname&quot; : &quot;Elinor&quot;, &quot;lastname&quot; : &quot;Ratliff&quot;, &quot;age&quot; : 36, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;282 Kings Place&quot;, &quot;employer&quot; : &quot;Scentric&quot;, &quot;email&quot; : &quot;elinorratliff@scentric.com&quot;, &quot;city&quot; : &quot;Ribera&quot;, &quot;state&quot; : &quot;WA&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;37&quot;, &quot;_score&quot; : 0.0, &quot;_source&quot; : &#123; &quot;account_number&quot; : 37, &quot;balance&quot; : 18612, &quot;firstname&quot; : &quot;Mcgee&quot;, &quot;lastname&quot; : &quot;Mooney&quot;, &quot;age&quot; : 39, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;826 Fillmore Place&quot;, &quot;employer&quot; : &quot;Reversus&quot;, &quot;email&quot; : &quot;mcgeemooney@reversus.com&quot;, &quot;city&quot; : &quot;Tooleville&quot;, &quot;state&quot; : &quot;OK&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;51&quot;, &quot;_score&quot; : 0.0, &quot;_source&quot; : &#123; &quot;account_number&quot; : 51, &quot;balance&quot; : 14097, &quot;firstname&quot; : &quot;Burton&quot;, &quot;lastname&quot; : &quot;Meyers&quot;, &quot;age&quot; : 31, &quot;gender&quot; : &quot;F&quot;, &quot;address&quot; : &quot;334 River Street&quot;, &quot;employer&quot; : &quot;Bezal&quot;, &quot;email&quot; : &quot;burtonmeyers@bezal.com&quot;, &quot;city&quot; : &quot;Jacksonburg&quot;, &quot;state&quot; : &quot;MO&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;56&quot;, &quot;_score&quot; : 0.0, &quot;_source&quot; : &#123; &quot;account_number&quot; : 56, &quot;balance&quot; : 14992, &quot;firstname&quot; : &quot;Josie&quot;, &quot;lastname&quot; : &quot;Nelson&quot;, &quot;age&quot; : 32, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;857 Tabor Court&quot;, &quot;employer&quot; : &quot;Emtrac&quot;, &quot;email&quot; : &quot;josienelson@emtrac.com&quot;, &quot;city&quot; : &quot;Sunnyside&quot;, &quot;state&quot; : &quot;UT&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;121&quot;, &quot;_score&quot; : 0.0, &quot;_source&quot; : &#123; &quot;account_number&quot; : 121, &quot;balance&quot; : 19594, &quot;firstname&quot; : &quot;Acevedo&quot;, &quot;lastname&quot; : &quot;Dorsey&quot;, &quot;age&quot; : 32, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;479 Nova Court&quot;, &quot;employer&quot; : &quot;Netropic&quot;, &quot;email&quot; : &quot;acevedodorsey@netropic.com&quot;, &quot;city&quot; : &quot;Islandia&quot;, &quot;state&quot; : &quot;CT&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;176&quot;, &quot;_score&quot; : 0.0, &quot;_source&quot; : &#123; &quot;account_number&quot; : 176, &quot;balance&quot; : 18607, &quot;firstname&quot; : &quot;Kemp&quot;, &quot;lastname&quot; : &quot;Walters&quot;, &quot;age&quot; : 28, &quot;gender&quot; : &quot;F&quot;, &quot;address&quot; : &quot;906 Howard Avenue&quot;, &quot;employer&quot; : &quot;Eyewax&quot;, &quot;email&quot; : &quot;kempwalters@eyewax.com&quot;, &quot;city&quot; : &quot;Why&quot;, &quot;state&quot; : &quot;KY&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;183&quot;, &quot;_score&quot; : 0.0, &quot;_source&quot; : &#123; &quot;account_number&quot; : 183, &quot;balance&quot; : 14223, &quot;firstname&quot; : &quot;Hudson&quot;, &quot;lastname&quot; : &quot;English&quot;, &quot;age&quot; : 26, &quot;gender&quot; : &quot;F&quot;, &quot;address&quot; : &quot;823 Herkimer Place&quot;, &quot;employer&quot; : &quot;Xinware&quot;, &quot;email&quot; : &quot;hudsonenglish@xinware.com&quot;, &quot;city&quot; : &quot;Robbins&quot;, &quot;state&quot; : &quot;ND&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;222&quot;, &quot;_score&quot; : 0.0, &quot;_source&quot; : &#123; &quot;account_number&quot; : 222, &quot;balance&quot; : 14764, &quot;firstname&quot; : &quot;Rachelle&quot;, &quot;lastname&quot; : &quot;Rice&quot;, &quot;age&quot; : 36, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;333 Narrows Avenue&quot;, &quot;employer&quot; : &quot;Enaut&quot;, &quot;email&quot; : &quot;rachellerice@enaut.com&quot;, &quot;city&quot; : &quot;Wright&quot;, &quot;state&quot; : &quot;AZ&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;227&quot;, &quot;_score&quot; : 0.0, &quot;_source&quot; : &#123; &quot;account_number&quot; : 227, &quot;balance&quot; : 19780, &quot;firstname&quot; : &quot;Coleman&quot;, &quot;lastname&quot; : &quot;Berg&quot;, &quot;age&quot; : 22, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;776 Little Street&quot;, &quot;employer&quot; : &quot;Exoteric&quot;, &quot;email&quot; : &quot;colemanberg@exoteric.com&quot;, &quot;city&quot; : &quot;Eagleville&quot;, &quot;state&quot; : &quot;WV&quot; &#125; &#125;, &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;272&quot;, &quot;_score&quot; : 0.0, &quot;_source&quot; : &#123; &quot;account_number&quot; : 272, &quot;balance&quot; : 19253, &quot;firstname&quot; : &quot;Lilly&quot;, &quot;lastname&quot; : &quot;Morgan&quot;, &quot;age&quot; : 25, &quot;gender&quot; : &quot;F&quot;, &quot;address&quot; : &quot;689 Fleet Street&quot;, &quot;employer&quot; : &quot;Biolive&quot;, &quot;email&quot; : &quot;lillymorgan@biolive.com&quot;, &quot;city&quot; : &quot;Sunbury&quot;, &quot;state&quot; : &quot;OH&quot; &#125; &#125; ] &#125;&#125; 能看到所有文档的 “_score” : 0.0。 （8）term和match一样。匹配某个属性的值。全文检索字段用match，其他非text字段匹配用term。 Avoid using the term query for text fields. 避免对文本字段使用“term”查询 By default, Elasticsearch changes the values of text fields as part of analysis. This can make finding exact matches for text field values difficult. 默认情况下，Elasticsearch作为analysis的一部分更改’ text ‘字段的值。这使得为“text”字段值寻找精确匹配变得困难。 To search text field values, use the match. 要搜索“text”字段值，请使用匹配。 https://www.elastic.co/guide/en/elasticsearch/reference/7.6/query-dsl-term-query.html 使用term匹配查询 12345678GET bank/_search&#123; &quot;query&quot;: &#123; &quot;term&quot;: &#123; &quot;address&quot;: &quot;mill Road&quot; &#125; &#125;&#125; 查询结果： 12345678910111213141516171819&#123; &quot;took&quot; : 0, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 0, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : null, &quot;hits&quot; : [ ] &#125;&#125; 一条也没有匹配到 而更换为match匹配时，能够匹配到32个文档 也就是说，全文检索字段用match，其他非text字段匹配用term。 （9）Aggregation（执行聚合）聚合提供了从数据中分组和提取数据的能力。最简单的聚合方法大致等于SQL Group by和SQL聚合函数。在elasticsearch中，执行搜索返回this（命中结果），并且同时返回聚合结果，把以响应中的所有hits（命中结果）分隔开的能力。这是非常强大且有效的，你可以执行查询和多个聚合，并且在一次使用中得到各自的（任何一个的）返回结果，使用一次简洁和简化的API啦避免网络往返。 “size”:0 size:0不显示搜索数据aggs：执行聚合。聚合语法如下： 12345&quot;aggs&quot;:&#123; &quot;aggs_name这次聚合的名字，方便展示在结果集中&quot;:&#123; &quot;AGG_TYPE聚合的类型(avg,term,terms)&quot;:&#123;&#125; &#125;&#125;， 搜索address中包含mill的所有人的年龄分布以及平均年龄，但不显示这些人的详情 123456789101112131415161718192021222324252627GET bank/_search&#123; &quot;query&quot;: &#123; &quot;match&quot;: &#123; &quot;address&quot;: &quot;Mill&quot; &#125; &#125;, &quot;aggs&quot;: &#123; &quot;ageAgg&quot;: &#123; &quot;terms&quot;: &#123; &quot;field&quot;: &quot;age&quot;, &quot;size&quot;: 10 &#125; &#125;, &quot;ageAvg&quot;: &#123; &quot;avg&quot;: &#123; &quot;field&quot;: &quot;age&quot; &#125; &#125;, &quot;balanceAvg&quot;: &#123; &quot;avg&quot;: &#123; &quot;field&quot;: &quot;balance&quot; &#125; &#125; &#125;, &quot;size&quot;: 0&#125; 查询结果： 123456789101112131415161718192021222324252627282930313233343536373839404142434445&#123; &quot;took&quot; : 2, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 4, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : null, &quot;hits&quot; : [ ] &#125;, &quot;aggregations&quot; : &#123; &quot;ageAgg&quot; : &#123; &quot;doc_count_error_upper_bound&quot; : 0, &quot;sum_other_doc_count&quot; : 0, &quot;buckets&quot; : [ &#123; &quot;key&quot; : 38, &quot;doc_count&quot; : 2 &#125;, &#123; &quot;key&quot; : 28, &quot;doc_count&quot; : 1 &#125;, &#123; &quot;key&quot; : 32, &quot;doc_count&quot; : 1 &#125; ] &#125;, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 34.0 &#125;, &quot;balanceAvg&quot; : &#123; &quot;value&quot; : 25208.0 &#125; &#125;&#125; 复杂：按照年龄聚合，并且求这些年龄段的这些人的平均薪资 12345678910111213141516171819202122GET bank/_search&#123; &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;, &quot;aggs&quot;: &#123; &quot;ageAgg&quot;: &#123; &quot;terms&quot;: &#123; &quot;field&quot;: &quot;age&quot;, &quot;size&quot;: 100 &#125;, &quot;aggs&quot;: &#123; &quot;ageAvg&quot;: &#123; &quot;avg&quot;: &#123; &quot;field&quot;: &quot;balance&quot; &#125; &#125; &#125; &#125; &#125;, &quot;size&quot;: 0&#125; 输出结果： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173&#123; &quot;took&quot; : 49, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1000, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : null, &quot;hits&quot; : [ ] &#125;, &quot;aggregations&quot; : &#123; &quot;ageAgg&quot; : &#123; &quot;doc_count_error_upper_bound&quot; : 0, &quot;sum_other_doc_count&quot; : 0, &quot;buckets&quot; : [ &#123; &quot;key&quot; : 31, &quot;doc_count&quot; : 61, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 28312.918032786885 &#125; &#125;, &#123; &quot;key&quot; : 39, &quot;doc_count&quot; : 60, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 25269.583333333332 &#125; &#125;, &#123; &quot;key&quot; : 26, &quot;doc_count&quot; : 59, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 23194.813559322032 &#125; &#125;, &#123; &quot;key&quot; : 32, &quot;doc_count&quot; : 52, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 23951.346153846152 &#125; &#125;, &#123; &quot;key&quot; : 35, &quot;doc_count&quot; : 52, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 22136.69230769231 &#125; &#125;, &#123; &quot;key&quot; : 36, &quot;doc_count&quot; : 52, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 22174.71153846154 &#125; &#125;, &#123; &quot;key&quot; : 22, &quot;doc_count&quot; : 51, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 24731.07843137255 &#125; &#125;, &#123; &quot;key&quot; : 28, &quot;doc_count&quot; : 51, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 28273.882352941175 &#125; &#125;, &#123; &quot;key&quot; : 33, &quot;doc_count&quot; : 50, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 25093.94 &#125; &#125;, &#123; &quot;key&quot; : 34, &quot;doc_count&quot; : 49, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 26809.95918367347 &#125; &#125;, &#123; &quot;key&quot; : 30, &quot;doc_count&quot; : 47, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 22841.106382978724 &#125; &#125;, &#123; &quot;key&quot; : 21, &quot;doc_count&quot; : 46, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 26981.434782608696 &#125; &#125;, &#123; &quot;key&quot; : 40, &quot;doc_count&quot; : 45, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 27183.17777777778 &#125; &#125;, &#123; &quot;key&quot; : 20, &quot;doc_count&quot; : 44, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 27741.227272727272 &#125; &#125;, &#123; &quot;key&quot; : 23, &quot;doc_count&quot; : 42, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 27314.214285714286 &#125; &#125;, &#123; &quot;key&quot; : 24, &quot;doc_count&quot; : 42, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 28519.04761904762 &#125; &#125;, &#123; &quot;key&quot; : 25, &quot;doc_count&quot; : 42, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 27445.214285714286 &#125; &#125;, &#123; &quot;key&quot; : 37, &quot;doc_count&quot; : 42, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 27022.261904761905 &#125; &#125;, &#123; &quot;key&quot; : 27, &quot;doc_count&quot; : 39, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 21471.871794871793 &#125; &#125;, &#123; &quot;key&quot; : 38, &quot;doc_count&quot; : 39, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 26187.17948717949 &#125; &#125;, &#123; &quot;key&quot; : 29, &quot;doc_count&quot; : 35, &quot;ageAvg&quot; : &#123; &quot;value&quot; : 29483.14285714286 &#125; &#125; ] &#125; &#125;&#125; 查出所有年龄分布，并且这些年龄段中M的平均薪资和F的平均薪资以及这个年龄段的总体平均薪资 12345678910111213141516171819202122232425262728293031323334GET bank/_search&#123; &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;, &quot;aggs&quot;: &#123; &quot;ageAgg&quot;: &#123; &quot;terms&quot;: &#123; &quot;field&quot;: &quot;age&quot;, &quot;size&quot;: 100 &#125;, &quot;aggs&quot;: &#123; &quot;genderAgg&quot;: &#123; &quot;terms&quot;: &#123; &quot;field&quot;: &quot;gender.keyword&quot; &#125;, &quot;aggs&quot;: &#123; &quot;balanceAvg&quot;: &#123; &quot;avg&quot;: &#123; &quot;field&quot;: &quot;balance&quot; &#125; &#125; &#125; &#125;, &quot;ageBalanceAvg&quot;: &#123; &quot;avg&quot;: &#123; &quot;field&quot;: &quot;balance&quot; &#125; &#125; &#125; &#125; &#125;, &quot;size&quot;: 0&#125; 输出结果： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&#123; &quot;took&quot; : 119, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1000, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : null, &quot;hits&quot; : [ ] &#125;, &quot;aggregations&quot; : &#123; &quot;ageAgg&quot; : &#123; &quot;doc_count_error_upper_bound&quot; : 0, &quot;sum_other_doc_count&quot; : 0, &quot;buckets&quot; : [ &#123; &quot;key&quot; : 31, &quot;doc_count&quot; : 61, &quot;genderAgg&quot; : &#123; &quot;doc_count_error_upper_bound&quot; : 0, &quot;sum_other_doc_count&quot; : 0, &quot;buckets&quot; : [ &#123; &quot;key&quot; : &quot;M&quot;, &quot;doc_count&quot; : 35, &quot;balanceAvg&quot; : &#123; &quot;value&quot; : 29565.628571428573 &#125; &#125;, &#123; &quot;key&quot; : &quot;F&quot;, &quot;doc_count&quot; : 26, &quot;balanceAvg&quot; : &#123; &quot;value&quot; : 26626.576923076922 &#125; &#125; ] &#125;, &quot;ageBalanceAvg&quot; : &#123; &quot;value&quot; : 28312.918032786885 &#125; &#125; ] .......//省略其他 &#125; &#125;&#125; 3）Mapping（1）字段类型 （2）映射Mapping(映射)Maping是用来定义一个文档（document），以及它所包含的属性（field）是如何存储和索引的。比如：使用maping来定义： 哪些字符串属性应该被看做全文本属性（full text fields）； 哪些属性包含数字，日期或地理位置； 文档中的所有属性是否都嫩被索引（all 配置）； 日期的格式； 自定义映射规则来执行动态添加属性； 查看mapping信息GET bank&#x2F;_mapping 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889&#123; &quot;bank&quot; : &#123; &quot;mappings&quot; : &#123; &quot;properties&quot; : &#123; &quot;account_number&quot; : &#123; &quot;type&quot; : &quot;long&quot; &#125;, &quot;address&quot; : &#123; &quot;type&quot; : &quot;text&quot;, &quot;fields&quot; : &#123; &quot;keyword&quot; : &#123; &quot;type&quot; : &quot;keyword&quot;, &quot;ignore_above&quot; : 256 &#125; &#125; &#125;, &quot;age&quot; : &#123; &quot;type&quot; : &quot;long&quot; &#125;, &quot;balance&quot; : &#123; &quot;type&quot; : &quot;long&quot; &#125;, &quot;city&quot; : &#123; &quot;type&quot; : &quot;text&quot;, &quot;fields&quot; : &#123; &quot;keyword&quot; : &#123; &quot;type&quot; : &quot;keyword&quot;, &quot;ignore_above&quot; : 256 &#125; &#125; &#125;, &quot;email&quot; : &#123; &quot;type&quot; : &quot;text&quot;, &quot;fields&quot; : &#123; &quot;keyword&quot; : &#123; &quot;type&quot; : &quot;keyword&quot;, &quot;ignore_above&quot; : 256 &#125; &#125; &#125;, &quot;employer&quot; : &#123; &quot;type&quot; : &quot;text&quot;, &quot;fields&quot; : &#123; &quot;keyword&quot; : &#123; &quot;type&quot; : &quot;keyword&quot;, &quot;ignore_above&quot; : 256 &#125; &#125; &#125;, &quot;firstname&quot; : &#123; &quot;type&quot; : &quot;text&quot;, &quot;fields&quot; : &#123; &quot;keyword&quot; : &#123; &quot;type&quot; : &quot;keyword&quot;, &quot;ignore_above&quot; : 256 &#125; &#125; &#125;, &quot;gender&quot; : &#123; &quot;type&quot; : &quot;text&quot;, &quot;fields&quot; : &#123; &quot;keyword&quot; : &#123; &quot;type&quot; : &quot;keyword&quot;, &quot;ignore_above&quot; : 256 &#125; &#125; &#125;, &quot;lastname&quot; : &#123; &quot;type&quot; : &quot;text&quot;, &quot;fields&quot; : &#123; &quot;keyword&quot; : &#123; &quot;type&quot; : &quot;keyword&quot;, &quot;ignore_above&quot; : 256 &#125; &#125; &#125;, &quot;state&quot; : &#123; &quot;type&quot; : &quot;text&quot;, &quot;fields&quot; : &#123; &quot;keyword&quot; : &#123; &quot;type&quot; : &quot;keyword&quot;, &quot;ignore_above&quot; : 256 &#125; &#125; &#125; &#125; &#125; &#125;&#125; 修改mapping信息 （3）新版本改变ElasticSearch7-去掉type概念 关系型数据库中两个数据表示是独立的，即使他们里面有相同名称的列也不影响使用，但ES中不是这样的。elasticsearch是基于Lucene开发的搜索引擎，而ES中不同type下名称相同的filed最终在Lucene中的处理方式是一样的。 两个不同type下的两个user_name，在ES同一个索引下其实被认为是同一个filed，你必须在两个不同的type中定义相同的filed映射。否则，不同type中的相同字段名称就会在处理中出现冲突的情况，导致Lucene处理效率下降。 去掉type就是为了提高ES处理数据的效率。 Elasticsearch 7.x URL中的type参数为可选。比如，索引一个文档不再要求提供文档类型。 Elasticsearch 8.x 不再支持URL中的type参数。 解决：将索引从多类型迁移到单类型，每种类型文档一个独立索引 将已存在的索引下的类型数据，全部迁移到指定位置即可。详见数据迁移 Elasticsearch 7.x Specifying types in requests is deprecated. For instance, indexing a document no longer requires a document type. The new index APIs are PUT &#123;index&#125;/_doc/&#123;id&#125; in case of explicit ids and POST &#123;index&#125;/_doc for auto-generated ids. Note that in 7.0, _doc is a permanent part of the path, and represents the endpoint name rather than the document type. The include_type_name parameter in the index creation, index template, and mapping APIs will default to false. Setting the parameter at all will result in a deprecation warning. The _default_ mapping type is removed. Elasticsearch 8.x Specifying types in requests is no longer supported. The include_type_name parameter is removed. 创建映射创建索引并指定映射 12345678910111213141516PUT /my_index&#123; &quot;mappings&quot;: &#123; &quot;properties&quot;: &#123; &quot;age&quot;: &#123; &quot;type&quot;: &quot;integer&quot; &#125;, &quot;email&quot;: &#123; &quot;type&quot;: &quot;keyword&quot; &#125;, &quot;name&quot;: &#123; &quot;type&quot;: &quot;text&quot; &#125; &#125; &#125;&#125; 输出： 123456&#123; &quot;acknowledged&quot; : true, &quot;shards_acknowledged&quot; : true, &quot;index&quot; : &quot;my_index&quot;&#125; 查看映射1GET /my_index 输出结果： 12345678910111213141516171819202122232425262728293031323334&#123; &quot;my_index&quot; : &#123; &quot;aliases&quot; : &#123; &#125;, &quot;mappings&quot; : &#123; &quot;properties&quot; : &#123; &quot;age&quot; : &#123; &quot;type&quot; : &quot;integer&quot; &#125;, &quot;email&quot; : &#123; &quot;type&quot; : &quot;keyword&quot; &#125;, &quot;employee-id&quot; : &#123; &quot;type&quot; : &quot;keyword&quot;, &quot;index&quot; : false &#125;, &quot;name&quot; : &#123; &quot;type&quot; : &quot;text&quot; &#125; &#125; &#125;, &quot;settings&quot; : &#123; &quot;index&quot; : &#123; &quot;creation_date&quot; : &quot;1588410780774&quot;, &quot;number_of_shards&quot; : &quot;1&quot;, &quot;number_of_replicas&quot; : &quot;1&quot;, &quot;uuid&quot; : &quot;ua0lXhtkQCOmn7Kh3iUu0w&quot;, &quot;version&quot; : &#123; &quot;created&quot; : &quot;7060299&quot; &#125;, &quot;provided_name&quot; : &quot;my_index&quot; &#125; &#125; &#125;&#125; 添加新的字段映射123456789PUT /my_index/_mapping&#123; &quot;properties&quot;: &#123; &quot;employee-id&quot;: &#123; &quot;type&quot;: &quot;keyword&quot;, &quot;index&quot;: false &#125; &#125;&#125; 这里的 “index”: false，表明新增的字段不能被检索，只是一个冗余字段。 更新映射对于已经存在的字段映射，我们不能更新。更新必须创建新的索引，进行数据迁移。 数据迁移先创建new_twitter的正确映射。然后使用如下方式进行数据迁移。 123456789POST reindex [固定写法]&#123; &quot;source&quot;:&#123; &quot;index&quot;:&quot;twitter&quot; &#125;, &quot;dest&quot;:&#123; &quot;index&quot;:&quot;new_twitters&quot; &#125;&#125; 将旧索引的type下的数据进行迁移 12345678910POST reindex [固定写法]&#123; &quot;source&quot;:&#123; &quot;index&quot;:&quot;twitter&quot;, &quot;twitter&quot;:&quot;twitter&quot; &#125;, &quot;dest&quot;:&#123; &quot;index&quot;:&quot;new_twitters&quot; &#125;&#125; 更多详情见： https://www.elastic.co/guide/en/elasticsearch/reference/7.6/docs-reindex.html GET &#x2F;bank&#x2F;_search 123456789101112131415161718192021222324252627282930313233343536&#123; &quot;took&quot; : 0, &quot;timed_out&quot; : false, &quot;_shards&quot; : &#123; &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 &#125;, &quot;hits&quot; : &#123; &quot;total&quot; : &#123; &quot;value&quot; : 1000, &quot;relation&quot; : &quot;eq&quot; &#125;, &quot;max_score&quot; : 1.0, &quot;hits&quot; : [ &#123; &quot;_index&quot; : &quot;bank&quot;, &quot;_type&quot; : &quot;account&quot;,//类型为account &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : &#123; &quot;account_number&quot; : 1, &quot;balance&quot; : 39225, &quot;firstname&quot; : &quot;Amber&quot;, &quot;lastname&quot; : &quot;Duke&quot;, &quot;age&quot; : 32, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;880 Holmes Lane&quot;, &quot;employer&quot; : &quot;Pyrami&quot;, &quot;email&quot; : &quot;amberduke@pyrami.com&quot;, &quot;city&quot; : &quot;Brogan&quot;, &quot;state&quot; : &quot;IL&quot; &#125; &#125;, ... 1GET /bank/_search 想要将年龄修改为integer 12345678910111213141516171819202122232425262728293031323334353637383940414243444546PUT /newbank&#123; &quot;mappings&quot;: &#123; &quot;properties&quot;: &#123; &quot;account_number&quot;: &#123; &quot;type&quot;: &quot;long&quot; &#125;, &quot;address&quot;: &#123; &quot;type&quot;: &quot;text&quot; &#125;, &quot;age&quot;: &#123; &quot;type&quot;: &quot;integer&quot; &#125;, &quot;balance&quot;: &#123; &quot;type&quot;: &quot;long&quot; &#125;, &quot;city&quot;: &#123; &quot;type&quot;: &quot;keyword&quot; &#125;, &quot;email&quot;: &#123; &quot;type&quot;: &quot;keyword&quot; &#125;, &quot;employer&quot;: &#123; &quot;type&quot;: &quot;keyword&quot; &#125;, &quot;firstname&quot;: &#123; &quot;type&quot;: &quot;text&quot; &#125;, &quot;gender&quot;: &#123; &quot;type&quot;: &quot;keyword&quot; &#125;, &quot;lastname&quot;: &#123; &quot;type&quot;: &quot;text&quot;, &quot;fields&quot;: &#123; &quot;keyword&quot;: &#123; &quot;type&quot;: &quot;keyword&quot;, &quot;ignore_above&quot;: 256 &#125; &#125; &#125;, &quot;state&quot;: &#123; &quot;type&quot;: &quot;keyword&quot; &#125; &#125; &#125;&#125; 查看“newbank”的映射： GET &#x2F;newbank&#x2F;_mapping 能够看到age的映射类型被修改为了integer. 将bank中的数据迁移到newbank中 12345678910POST _reindex&#123; &quot;source&quot;: &#123; &quot;index&quot;: &quot;bank&quot;, &quot;type&quot;: &quot;account&quot; &#125;, &quot;dest&quot;: &#123; &quot;index&quot;: &quot;newbank&quot; &#125;&#125; 运行输出： 1234567891011121314151617181920#! Deprecation: [types removal] Specifying types in reindex requests is deprecated.&#123; &quot;took&quot; : 768, &quot;timed_out&quot; : false, &quot;total&quot; : 1000, &quot;updated&quot; : 0, &quot;created&quot; : 1000, &quot;deleted&quot; : 0, &quot;batches&quot; : 1, &quot;version_conflicts&quot; : 0, &quot;noops&quot; : 0, &quot;retries&quot; : &#123; &quot;bulk&quot; : 0, &quot;search&quot; : 0 &#125;, &quot;throttled_millis&quot; : 0, &quot;requests_per_second&quot; : -1.0, &quot;throttled_until_millis&quot; : 0, &quot;failures&quot; : [ ]&#125; 查看newbank中的数据 4）分词一个tokenizer（分词器）接收一个字符流，将之分割为独立的tokens（词元，通常是独立的单词），然后输出tokens流。 例如：whitespace tokenizer遇到空白字符时分割文本。它会将文本“Quick brown fox!”分割为[Quick,brown,fox!]。 该tokenizer（分词器）还负责记录各个terms(词条)的顺序或position位置（用于phrase短语和word proximity词近邻查询），以及term（词条）所代表的原始word（单词）的start（起始）和end（结束）的character offsets（字符串偏移量）（用于高亮显示搜索的内容）。 elasticsearch提供了很多内置的分词器，可以用来构建custom analyzers（自定义分词器）。 关于分词器： https://www.elastic.co/guide/en/elasticsearch/reference/7.6/analysis.html 12345POST _analyze&#123; &quot;analyzer&quot;: &quot;standard&quot;, &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#x27;s bone.&quot;&#125; 执行结果： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182&#123; &quot;tokens&quot; : [ &#123; &quot;token&quot; : &quot;the&quot;, &quot;start_offset&quot; : 0, &quot;end_offset&quot; : 3, &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;, &quot;position&quot; : 0 &#125;, &#123; &quot;token&quot; : &quot;2&quot;, &quot;start_offset&quot; : 4, &quot;end_offset&quot; : 5, &quot;type&quot; : &quot;&lt;NUM&gt;&quot;, &quot;position&quot; : 1 &#125;, &#123; &quot;token&quot; : &quot;quick&quot;, &quot;start_offset&quot; : 6, &quot;end_offset&quot; : 11, &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;, &quot;position&quot; : 2 &#125;, &#123; &quot;token&quot; : &quot;brown&quot;, &quot;start_offset&quot; : 12, &quot;end_offset&quot; : 17, &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;, &quot;position&quot; : 3 &#125;, &#123; &quot;token&quot; : &quot;foxes&quot;, &quot;start_offset&quot; : 18, &quot;end_offset&quot; : 23, &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;, &quot;position&quot; : 4 &#125;, &#123; &quot;token&quot; : &quot;jumped&quot;, &quot;start_offset&quot; : 24, &quot;end_offset&quot; : 30, &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;, &quot;position&quot; : 5 &#125;, &#123; &quot;token&quot; : &quot;over&quot;, &quot;start_offset&quot; : 31, &quot;end_offset&quot; : 35, &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;, &quot;position&quot; : 6 &#125;, &#123; &quot;token&quot; : &quot;the&quot;, &quot;start_offset&quot; : 36, &quot;end_offset&quot; : 39, &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;, &quot;position&quot; : 7 &#125;, &#123; &quot;token&quot; : &quot;lazy&quot;, &quot;start_offset&quot; : 40, &quot;end_offset&quot; : 44, &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;, &quot;position&quot; : 8 &#125;, &#123; &quot;token&quot; : &quot;dog&#x27;s&quot;, &quot;start_offset&quot; : 45, &quot;end_offset&quot; : 50, &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;, &quot;position&quot; : 9 &#125;, &#123; &quot;token&quot; : &quot;bone&quot;, &quot;start_offset&quot; : 51, &quot;end_offset&quot; : 55, &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;, &quot;position&quot; : 10 &#125; ]&#125; （1）安装ik分词器 所有的语言分词，默认使用的都是“Standard Analyzer”，但是这些分词器针对于中文的分词，并不友好。为此需要安装中文的分词器。 注意：不能用默认elasticsearch-plugin install xxx.zip 进行自动安装https://github.com/medcl/elasticsearch-analysis-ik/releases/download 对应es版本安装 在前面安装的elasticsearch时，我们已经将elasticsearch容器的“&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins”目录，映射到宿主机的“ &#x2F;mydata&#x2F;elasticsearch&#x2F;plugins”目录下，所以比较方便的做法就是下载“&#x2F;elasticsearch-analysis-ik-7.6.2.zip”文件，然后解压到该文件夹下即可。安装完毕后，需要重启elasticsearch容器。 如果不嫌麻烦，还可以采用如下的方式。 （1）查看elasticsearch版本号：12345678910111213141516171819[root@hadoop-104 ~]# curl http://localhost:9200&#123; &quot;name&quot; : &quot;0adeb7852e00&quot;, &quot;cluster_name&quot; : &quot;elasticsearch&quot;, &quot;cluster_uuid&quot; : &quot;9gglpP0HTfyOTRAaSe2rIg&quot;, &quot;version&quot; : &#123; &quot;number&quot; : &quot;7.6.2&quot;, #版本号为7.6.2 &quot;build_flavor&quot; : &quot;default&quot;, &quot;build_type&quot; : &quot;docker&quot;, &quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;, &quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;, &quot;build_snapshot&quot; : false, &quot;lucene_version&quot; : &quot;8.4.0&quot;, &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;, &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot; &#125;, &quot;tagline&quot; : &quot;You Know, for Search&quot;&#125;[root@hadoop-104 ~]# （2）进入es容器内部plugin目录 docker exec -it 容器id &#x2F;bin&#x2F;bash 12[root@hadoop-104 ~]# docker exec -it elasticsearch /bin/bash[root@0adeb7852e00 elasticsearch]# wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip 1234[root@0adeb7852e00 elasticsearch]# pwd/usr/share/elasticsearch#下载ik7.6.2[root@0adeb7852e00 elasticsearch]# wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip unzip 下载的文件 12345678910111213141516171819202122232425[root@0adeb7852e00 elasticsearch]# unzip elasticsearch-analysis-ik-7.6.2.zip -d inkArchive: elasticsearch-analysis-ik-7.6.2.zip creating: ik/config/ inflating: ik/config/main.dic inflating: ik/config/quantifier.dic inflating: ik/config/extra_single_word_full.dic inflating: ik/config/IKAnalyzer.cfg.xml inflating: ik/config/surname.dic inflating: ik/config/suffix.dic inflating: ik/config/stopword.dic inflating: ik/config/extra_main.dic inflating: ik/config/extra_stopword.dic inflating: ik/config/preposition.dic inflating: ik/config/extra_single_word_low_freq.dic inflating: ik/config/extra_single_word.dic inflating: ik/elasticsearch-analysis-ik-7.6.2.jar inflating: ik/httpclient-4.5.2.jar inflating: ik/httpcore-4.4.4.jar inflating: ik/commons-logging-1.2.jar inflating: ik/commons-codec-1.9.jar inflating: ik/plugin-descriptor.properties inflating: ik/plugin-security.policy [root@0adeb7852e00 elasticsearch]##移动到plugins目录下[root@0adeb7852e00 elasticsearch]# mv ik plugins/ rm -rf *.zip 1[root@0adeb7852e00 elasticsearch]# rm -rf elasticsearch-analysis-ik-7.6.2.zip 确认是否安装好了分词器 （2）测试分词器使用默认 1234GET my_index/_analyze&#123; &quot;text&quot;:&quot;我是中国人&quot;&#125; 请观察执行结果： 123456789101112131415161718192021222324252627282930313233343536373839&#123; &quot;tokens&quot; : [ &#123; &quot;token&quot; : &quot;我&quot;, &quot;start_offset&quot; : 0, &quot;end_offset&quot; : 1, &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;, &quot;position&quot; : 0 &#125;, &#123; &quot;token&quot; : &quot;是&quot;, &quot;start_offset&quot; : 1, &quot;end_offset&quot; : 2, &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;, &quot;position&quot; : 1 &#125;, &#123; &quot;token&quot; : &quot;中&quot;, &quot;start_offset&quot; : 2, &quot;end_offset&quot; : 3, &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;, &quot;position&quot; : 2 &#125;, &#123; &quot;token&quot; : &quot;国&quot;, &quot;start_offset&quot; : 3, &quot;end_offset&quot; : 4, &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;, &quot;position&quot; : 3 &#125;, &#123; &quot;token&quot; : &quot;人&quot;, &quot;start_offset&quot; : 4, &quot;end_offset&quot; : 5, &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;, &quot;position&quot; : 4 &#125; ]&#125; 12345GET my_index/_analyze&#123; &quot;analyzer&quot;: &quot;ik_smart&quot;, &quot;text&quot;:&quot;我是中国人&quot;&#125; 输出结果： 1234567891011121314151617181920212223242526&#123; &quot;tokens&quot; : [ &#123; &quot;token&quot; : &quot;我&quot;, &quot;start_offset&quot; : 0, &quot;end_offset&quot; : 1, &quot;type&quot; : &quot;CN_CHAR&quot;, &quot;position&quot; : 0 &#125;, &#123; &quot;token&quot; : &quot;是&quot;, &quot;start_offset&quot; : 1, &quot;end_offset&quot; : 2, &quot;type&quot; : &quot;CN_CHAR&quot;, &quot;position&quot; : 1 &#125;, &#123; &quot;token&quot; : &quot;中国人&quot;, &quot;start_offset&quot; : 2, &quot;end_offset&quot; : 5, &quot;type&quot; : &quot;CN_WORD&quot;, &quot;position&quot; : 2 &#125; ]&#125; 12345GET my_index/_analyze&#123; &quot;analyzer&quot;: &quot;ik_max_word&quot;, &quot;text&quot;:&quot;我是中国人&quot;&#125; 输出结果： 12345678910111213141516171819202122232425262728293031323334353637383940&#123; &quot;tokens&quot; : [ &#123; &quot;token&quot; : &quot;我&quot;, &quot;start_offset&quot; : 0, &quot;end_offset&quot; : 1, &quot;type&quot; : &quot;CN_CHAR&quot;, &quot;position&quot; : 0 &#125;, &#123; &quot;token&quot; : &quot;是&quot;, &quot;start_offset&quot; : 1, &quot;end_offset&quot; : 2, &quot;type&quot; : &quot;CN_CHAR&quot;, &quot;position&quot; : 1 &#125;, &#123; &quot;token&quot; : &quot;中国人&quot;, &quot;start_offset&quot; : 2, &quot;end_offset&quot; : 5, &quot;type&quot; : &quot;CN_WORD&quot;, &quot;position&quot; : 2 &#125;, &#123; &quot;token&quot; : &quot;中国&quot;, &quot;start_offset&quot; : 2, &quot;end_offset&quot; : 4, &quot;type&quot; : &quot;CN_WORD&quot;, &quot;position&quot; : 3 &#125;, &#123; &quot;token&quot; : &quot;国人&quot;, &quot;start_offset&quot; : 3, &quot;end_offset&quot; : 5, &quot;type&quot; : &quot;CN_WORD&quot;, &quot;position&quot; : 4 &#125; ]&#125; （3）自定义词库 修改&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins&#x2F;ik&#x2F;config中的IKAnalyzer.cfg.xml&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins&#x2F;ik&#x2F;config 12345678910111213&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE properties SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&gt;&lt;properties&gt; &lt;comment&gt;IK Analyzer 扩展配置&lt;/comment&gt; &lt;!--用户可以在这里配置自己的扩展字典 --&gt; &lt;entry key=&quot;ext_dict&quot;&gt;&lt;/entry&gt; &lt;!--用户可以在这里配置自己的扩展停止词字典--&gt; &lt;entry key=&quot;ext_stopwords&quot;&gt;&lt;/entry&gt; &lt;!--用户可以在这里配置远程扩展字典 --&gt; &lt;entry key=&quot;remote_ext_dict&quot;&gt;http://192.168.137.14/es/fenci.txt&lt;/entry&gt; &lt;!--用户可以在这里配置远程扩展停止词字典--&gt; &lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;&lt;/properties&gt; 原来的xml 1234567891011121314&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE properties SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&gt;&lt;properties&gt; &lt;comment&gt;IK Analyzer 扩展配置&lt;/comment&gt; &lt;!--用户可以在这里配置自己的扩展字典 --&gt; &lt;entry key=&quot;ext_dict&quot;&gt;&lt;/entry&gt; &lt;!--用户可以在这里配置自己的扩展停止词字典--&gt; &lt;entry key=&quot;ext_stopwords&quot;&gt;&lt;/entry&gt; &lt;!--用户可以在这里配置远程扩展字典 --&gt; &lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt; &lt;!--用户可以在这里配置远程扩展停止词字典--&gt; &lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;&lt;/properties&gt; 修改完成后，需要重启elasticsearch容器，否则修改不生效。 更新完成后，es只会对于新增的数据用更新分词。历史数据是不会重新分词的。如果想要历史数据重新分词，需要执行： 1POST my_index/_update_by_query?conflicts=proceed http://192.168.137.14/es/fenci.txt，这个是nginx上资源的访问路径 在运行下面实例之前，需要安装nginx（安装方法见安装nginx），然后创建“fenci.txt”文件，内容如下： 1echo &quot;樱桃萨其马，带你甜蜜入夏&quot; &gt; /mydata/nginx/html/fenci.txt 测试效果： 12345GET my_index/_analyze&#123; &quot;analyzer&quot;: &quot;ik_max_word&quot;, &quot;text&quot;:&quot;樱桃萨其马，带你甜蜜入夏&quot;&#125; 输出结果： 12345678910111213141516171819202122232425262728293031323334353637383940&#123; &quot;tokens&quot; : [ &#123; &quot;token&quot; : &quot;樱桃&quot;, &quot;start_offset&quot; : 0, &quot;end_offset&quot; : 2, &quot;type&quot; : &quot;CN_WORD&quot;, &quot;position&quot; : 0 &#125;, &#123; &quot;token&quot; : &quot;萨其马&quot;, &quot;start_offset&quot; : 2, &quot;end_offset&quot; : 5, &quot;type&quot; : &quot;CN_WORD&quot;, &quot;position&quot; : 1 &#125;, &#123; &quot;token&quot; : &quot;带你&quot;, &quot;start_offset&quot; : 6, &quot;end_offset&quot; : 8, &quot;type&quot; : &quot;CN_WORD&quot;, &quot;position&quot; : 2 &#125;, &#123; &quot;token&quot; : &quot;甜蜜&quot;, &quot;start_offset&quot; : 8, &quot;end_offset&quot; : 10, &quot;type&quot; : &quot;CN_WORD&quot;, &quot;position&quot; : 3 &#125;, &#123; &quot;token&quot; : &quot;入夏&quot;, &quot;start_offset&quot; : 10, &quot;end_offset&quot; : 12, &quot;type&quot; : &quot;CN_WORD&quot;, &quot;position&quot; : 4 &#125; ]&#125; 4、elasticsearch-Rest-Client1）9300: TCP spring-data-elasticsearch:transport-api.jar; springboot版本不同，ransport-api.jar不同，不能适配es版本 7.x已经不建议使用，8以后就要废弃 2）9200: HTTP jestClient: 非官方，更新慢； RestTemplate：模拟HTTP请求，ES很多操作需要自己封装，麻烦； HttpClient：同上； Elasticsearch-Rest-Client：官方RestClient，封装了ES操作，API层次分明，上手简单；最终选择Elasticsearch-Rest-Client（elasticsearch-rest-high-level-client）； https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high.html 5、附录：安装Nginx 随便启动一个nginx实例，只是为了复制出配置 1docker run -p80:80 --name nginx -d nginx:1.10 将容器内的配置文件拷贝到&#x2F;mydata&#x2F;nginx&#x2F;conf&#x2F; 下 1234567mkdir -p /mydata/nginx/htmlmkdir -p /mydata/nginx/logsmkdir -p /mydata/nginx/confdocker container cp nginx:/etc/nginx/* /mydata/nginx/conf/ #由于拷贝完成后会在config中存在一个nginx文件夹，所以需要将它的内容移动到conf中mv /mydata/nginx/conf/nginx/* /mydata/nginx/conf/rm -rf /mydata/nginx/conf/nginx 终止原容器： 1docker stop nginx 执行命令删除原容器： 1docker rm nginx 创建新的Nginx，执行以下命令 12345docker run -p 80:80 --name nginx \\ -v /mydata/nginx/html:/usr/share/nginx/html \\ -v /mydata/nginx/logs:/var/log/nginx \\ -v /mydata/nginx/conf/:/etc/nginx \\ -d nginx:1.10 设置开机启动nginx 1docker update nginx --restart=always 创建“&#x2F;mydata&#x2F;nginx&#x2F;html&#x2F;index.html”文件，测试是否能够正常访问 1echo &#x27;&lt;h2&gt;hello nginx!&lt;/h2&gt;&#x27; &gt;index.html 访问：http://ngix所在主机的IP:80/index.html SpringBoot整合ElasticSearch1、导入依赖这里的版本要和所按照的ELK版本匹配。 12345&lt;dependency&gt; &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt; &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt; &lt;version&gt;7.6.2&lt;/version&gt;&lt;/dependency&gt; 在spring-boot-dependencies中所依赖的ELK版本位6.8.7 1&lt;elasticsearch.version&gt;6.8.7&lt;/elasticsearch.version&gt; 需要在项目中将它改为7.6.2 1234&lt;properties&gt; ... &lt;elasticsearch.version&gt;7.6.2&lt;/elasticsearch.version&gt;&lt;/properties&gt; 2、编写测试类1）测试保存数据 https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-document-index.html 1234567891011121314151617@Testpublic void indexData() throws IOException &#123; IndexRequest indexRequest = new IndexRequest (&quot;users&quot;); User user = new User(); user.setUserName(&quot;张三&quot;); user.setAge(20); user.setGender(&quot;男&quot;); String jsonString = JSON.toJSONString(user); //设置要保存的内容 indexRequest.source(jsonString, XContentType.JSON); //执行创建索引和保存数据 IndexResponse index = client.index(indexRequest, GulimallElasticSearchConfig.COMMON_OPTIONS); System.out.println(index);&#125; 测试前： 测试后： 2）测试获取数据 https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-search.html 123456789101112131415161718192021222324@Testpublic void searchData() throws IOException &#123; GetRequest getRequest = new GetRequest( &quot;users&quot;, &quot;_-2vAHIB0nzmLJLkxKWk&quot;); GetResponse getResponse = client.get(getRequest, RequestOptions.DEFAULT); System.out.println(getResponse); String index = getResponse.getIndex(); System.out.println(index); String id = getResponse.getId(); System.out.println(id); if (getResponse.isExists()) &#123; long version = getResponse.getVersion(); System.out.println(version); String sourceAsString = getResponse.getSourceAsString(); System.out.println(sourceAsString); Map&lt;String, Object&gt; sourceAsMap = getResponse.getSourceAsMap(); System.out.println(sourceAsMap); byte[] sourceAsBytes = getResponse.getSourceAsBytes(); &#125; else &#123; &#125;&#125; 查询state&#x3D;”AK”的文档： 1 1234567891011121314151617181920212223242526272829303132333435363738&#123; &quot;took&quot;: 1, &quot;timed_out&quot;: false, &quot;_shards&quot;: &#123; &quot;total&quot;: 1, &quot;successful&quot;: 1, &quot;skipped&quot;: 0, &quot;failed&quot;: 0 &#125;, &quot;hits&quot;: &#123; &quot;total&quot;: &#123; &quot;value&quot;: 22, //匹配到了22条 &quot;relation&quot;: &quot;eq&quot; &#125;, &quot;max_score&quot;: 3.7952394, &quot;hits&quot;: [&#123; &quot;_index&quot;: &quot;bank&quot;, &quot;_type&quot;: &quot;account&quot;, &quot;_id&quot;: &quot;210&quot;, &quot;_score&quot;: 3.7952394, &quot;_source&quot;: &#123; &quot;account_number&quot;: 210, &quot;balance&quot;: 33946, &quot;firstname&quot;: &quot;Cherry&quot;, &quot;lastname&quot;: &quot;Carey&quot;, &quot;age&quot;: 24, &quot;gender&quot;: &quot;M&quot;, &quot;address&quot;: &quot;539 Tiffany Place&quot;, &quot;employer&quot;: &quot;Martgo&quot;, &quot;email&quot;: &quot;cherrycarey@martgo.com&quot;, &quot;city&quot;: &quot;Fairacres&quot;, &quot;state&quot;: &quot;AK&quot; &#125; &#125;, ....//省略其他 ] &#125;&#125; 搜索address中包含mill的所有人的年龄分布以及平均年龄，平均薪资 1234567891011121314151617181920212223242526GET bank/_search&#123; &quot;query&quot;: &#123; &quot;match&quot;: &#123; &quot;address&quot;: &quot;Mill&quot; &#125; &#125;, &quot;aggs&quot;: &#123; &quot;ageAgg&quot;: &#123; &quot;terms&quot;: &#123; &quot;field&quot;: &quot;age&quot;, &quot;size&quot;: 10 &#125; &#125;, &quot;ageAvg&quot;: &#123; &quot;avg&quot;: &#123; &quot;field&quot;: &quot;age&quot; &#125; &#125;, &quot;balanceAvg&quot;: &#123; &quot;avg&quot;: &#123; &quot;field&quot;: &quot;balance&quot; &#125; &#125; &#125;&#125; java实现 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859/** * 复杂检索:在bank中搜索address中包含mill的所有人的年龄分布以及平均年龄，平均薪资 * @throws IOException */@Testpublic void searchData() throws IOException &#123; //1. 创建检索请求 SearchRequest searchRequest = new SearchRequest(); //1.1）指定索引 searchRequest.indices(&quot;bank&quot;); //1.2）构造检索条件 SearchSourceBuilder sourceBuilder = new SearchSourceBuilder(); sourceBuilder.query(QueryBuilders.matchQuery(&quot;address&quot;,&quot;Mill&quot;)); //1.2.1)按照年龄分布进行聚合 TermsAggregationBuilder ageAgg=AggregationBuilders.terms(&quot;ageAgg&quot;).field(&quot;age&quot;).size(10); sourceBuilder.aggregation(ageAgg); //1.2.2)计算平均年龄 AvgAggregationBuilder ageAvg = AggregationBuilders.avg(&quot;ageAvg&quot;).field(&quot;age&quot;); sourceBuilder.aggregation(ageAvg); //1.2.3)计算平均薪资 AvgAggregationBuilder balanceAvg = AggregationBuilders.avg(&quot;balanceAvg&quot;).field(&quot;balance&quot;); sourceBuilder.aggregation(balanceAvg); System.out.println(&quot;检索条件：&quot;+sourceBuilder); searchRequest.source(sourceBuilder); //2. 执行检索 SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT); System.out.println(&quot;检索结果：&quot;+searchResponse); //3. 将检索结果封装为Bean SearchHits hits = searchResponse.getHits(); SearchHit[] searchHits = hits.getHits(); for (SearchHit searchHit : searchHits) &#123; String sourceAsString = searchHit.getSourceAsString(); Account account = JSON.parseObject(sourceAsString, Account.class); System.out.println(account); &#125; //4. 获取聚合信息 Aggregations aggregations = searchResponse.getAggregations(); Terms ageAgg1 = aggregations.get(&quot;ageAgg&quot;); for (Terms.Bucket bucket : ageAgg1.getBuckets()) &#123; String keyAsString = bucket.getKeyAsString(); System.out.println(&quot;年龄：&quot;+keyAsString+&quot; ==&gt; &quot;+bucket.getDocCount()); &#125; Avg ageAvg1 = aggregations.get(&quot;ageAvg&quot;); System.out.println(&quot;平均年龄：&quot;+ageAvg1.getValue()); Avg balanceAvg1 = aggregations.get(&quot;balanceAvg&quot;); System.out.println(&quot;平均薪资：&quot;+balanceAvg1.getValue());&#125; 可以尝试对比打印的条件和执行结果，和前面的ElasticSearch的检索语句和检索结果进行比较； 其他1. kibana控制台命令ctrl+home：回到文档首部； ctril+end：回到文档尾部。","categories":[],"tags":[]},{"title":"","slug":"环境准备","date":"2023-12-11T08:51:52.502Z","updated":"2023-12-25T01:47:52.238Z","comments":true,"path":"2023/12/11/环境准备/","link":"","permalink":"http://example.com/2023/12/11/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/","excerpt":"","text":"vscode 下载安装 插件安装 nvm安装https://juejin.cn/post/7093787595951308836 git下载安装https://git-scm.com/download/win redis工具安装navicat相关安装 阿里云防火墙设置 切记mysql密码复杂 养成好的习惯 防止被勒索 python 安装[Environment]::SetEnvironmentVariable(“Path”, “$env:Path;C:\\soft\\python;C:\\soft\\python\\Scripts&quot;, “User”) go 环境搭建 1.20.8https://golang.google.cn/dl/ 环境变量配置 环境设置 hbuilder安装https://www.dcloud.io/hbuilderx.html sourcetree 安装墙相关安装EMQ安装https://www.emqx.io/docs/zh/latest/getting-started/getting-started.html 1docker run -d --name emqx -p 1883:1883 -p 8083:8083 -p 8084:8084 -p 8883:8883 -p 18083:18083 emqx/emqx:latest TDengine安装https://docs.taosdata.com/get-started/dock 123docker pull tdengine/tdengine:latestdocker run -d -p 6030:6030 -p 6041:6041 -p 6043-6049:6043-6049 -p 6043-6049:6043-6049/udp tdengine/tdengine","categories":[],"tags":[]},{"title":"后台项目环境搭建","slug":"后台项目环境搭建","date":"2023-06-18T12:47:47.000Z","updated":"2023-12-19T08:01:29.784Z","comments":true,"path":"2023/06/18/后台项目环境搭建/","link":"","permalink":"http://example.com/2023/06/18/%E5%90%8E%E5%8F%B0%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","excerpt":"","text":"转专业的动力+本科出身不错不想低头+时不我待+热爱+弥补诸多遗憾+赚钱，其中时不我待的感觉尤为强烈，太一言难尽了。自己也想像很多同学那样过上平凡轻松的生活，但我的境地如果那样选择无异于zs，结果就是被迫疯狂卷自己（不卷别人）。 表面上我学了这么多框架和源码，看似真的只有广度没有深度？但是其实我很多内容都看了好几遍。 spring源码大致流程（getBean都看过不下十遍了，动态代理和三级缓存、组件配置啥的更不在话下）+Redis源码书+分布式事务+Tomcat源码+Netty+NIO+JUC+JVM+k8s+rabbitMQ+KafkaMQ+SpringCloud+ZK+设计模式+Mysql（MVCC、各种log）+Shiro。另外JSP、Vue、maven等必备技能另外，我最擅长的其实是socket及NIO底层相关，我觉得这门技术也是我阿里一面聊一个小时最后拿sp的原因。 结构1234567891011121314gulimall├── gulimall-common -- 工具类及通用代码├── renren-generator -- 人人开源项目的代码生成器├── gulimall-auth-server -- 认证中心（社交登录、OAuth2.0、单点登录）├── gulimall-cart -- 购物车服务├── gulimall-coupon -- 优惠卷服务├── gulimall-gateway -- 统一配置网关├── gulimall-order -- 订单服务├── gulimall-product -- 商品服务├── gulimall-search -- 检索服务├── gulimall-seckill -- 秒杀服务├── gulimall-third-party -- 第三方服务├── gulimall-ware -- 仓储服务└── gulimall-member -- 会员服务 技术选型后端技术 技术 说明 官网 SpringBoot 容器+MVC框架 https://spring.io/projects/spring-boot SpringCloud 微服务架构 https://spring.io/projects/spring-cloud SpringCloudAlibaba 一系列组件 https://spring.io/projects/spring-cloud-alibaba MyBatis-Plus ORM框架 https://mp.baomidou.com renren-generator 人人开源项目的代码生成器 https://gitee.com/renrenio/renren-generator Elasticsearch 搜索引擎 https://github.com/elastic/elasticsearch RabbitMQ 消息队列 https://www.rabbitmq.com Springsession 分布式缓存 https://projects.spring.io/spring-session Redisson 分布式锁 https://github.com/redisson/redisson Docker 应用容器引擎 https://www.docker.com OSS 对象云存储 https://github.com/aliyun/aliyun-oss-java-sdk 前端技术 技术 说明 官网 Vue 前端框架 https://vuejs.org Element 前端UI框架 https://element.eleme.io thymeleaf 模板引擎 https://www.thymeleaf.org node.js 服务端的js https://nodejs.org/en 架构图系统架构图 业务架构图 环境搭建开发工具 工具 说明 官网 IDEA 开发Java程序 https://www.jetbrains.com/idea/download RedisDesktop redis客户端连接工具 https://redisdesktop.com/download SwitchHosts 本地host管理 https://oldj.github.io/SwitchHosts X-shell Linux远程连接工具 http://www.netsarang.com/download/software.html Navicat 数据库连接工具 http://www.formysql.com/xiazai.html PowerDesigner 数据库设计工具 http://powerdesigner.de Postman API接口调试工具 https://www.postman.com Jmeter 性能压测工具 https://jmeter.apache.org Typora Markdown编辑器 https://typora.io 开发环境 工具 版本号 下载 JDK 1.8 https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html Mysql 5.7 https://www.mysql.com Redis Redis https://redis.io/download Elasticsearch 7.6.2 https://www.elastic.co/downloads Kibana 7.6.2 https://www.elastic.co/cn/kibana RabbitMQ 3.8.5 http://www.rabbitmq.com/download.html Nginx 1.1.6 http://nginx.org/en/download.html 注意：以上的除了jdk都是采用docker方式进行安装，详细安装步骤可参考百度!!! 分布式基础概念集群是个物理形态，分布式是个工作方式。 远程调用：在分布式系统中，各个服务可能处于不同主机，但是服务之间不可避免的相互调用，我们称为远程调用 springcloud中使用HTTP+JSON的方式完成远程调用 服务注册&#x2F;发现&amp;注册中心 A服务调用B服务，A服务并不知道B服务当前在哪几台服务器有，那些是正常的，那些服务已经下线。解决这个问题可以引入注册中心。 配置中心用来几种管理微服务的配置信息。 服务熔断&amp;服务降级 在微服务架构中，微服务之间通过网络进行通信，存在相互依赖，当其中一个服务不可用时，有可能会造成雪崩效应。要防止这样的情况，必须要有容错机制来保护服务。 rpc远程调用情景： 订单服务 –&gt; 商品服务 –&gt; 库存服务 库存服务出现故障导致响应慢，导致商品服务需要等待，可能等到10s后库存服务才能响应。库存服务的不可用导致商品服务阻塞，商品服务等的期间，订单服务也处于阻塞。一个服务不可用导致整个服务链都阻塞。如果是高并发，第一个请求调用后阻塞10s得不到结果，第二个请求直接阻塞10s。更多的请求进来导致请求积压，全部阻塞，最终服务器的资源耗尽。导致雪崩 解决方案： 1 服务熔断 指定超时时间，库存服务3s没有响应就超时，如果经常失败，比如10s内100个请求都失败了。开启断路保护机制，下一次请求进来不调用库存服务了，因为上一次100%错误都出现了，我们直接在此中断，商品服务直接返回，返回一些默认数据或者null，而不调用库存服务了，这样就不会导致请求积压。 设置服务的超时，当被调用的服务经常失败到达某个阈值，我们可以开启断路保护机制，后来的请求不再去调用这个服务。本地直接返回默认的数据2 服务降级 在运维期间，当系统处于高峰期，系统资源紧张，我们可以让非核心业务降级运行。降级：某些服务不处理，或者处理简单【抛异常、返回NULL、调用Mock数据、调用Fallback处理逻辑】API网关 客户端发送请求到服务器路途中，设置一个网关，请求都先到达网关，网关对请求进行统一认证（合法非法）和处理等操作。他是安检。 在微服务架构中，API gateway作为整体架构的重要组件，它抽象了微服务中都需要的公共功能，同时提供了客户端负载均衡，服务自动熔断，灰度发布，统一认证，限流流控，日志统计等丰富的功能，帮助我们解决很多API管理难题。 搭建步骤虚拟机固定ip12https://www.cnblogs.com/telwanggs/p/10882369.htmlipv4的网络设置要和 vmware 网络编辑器里面的ip一致 防火墙12345678l 查看防火墙状态(systemctl status firewalld、firewall-cmd --state)l 暂时关闭防火墙(systemctl stop firewalld)l 永久关闭防火墙(systemctl disable firewalld)l 开启防火墙(systemctl start firewalld)l 开放指定端口(firewall-cmd --zone=public --add-port= 8080 /tcp --permanent)l 关闭指定端口(firewall-cmd --zone=public --remove-port= 8080 /tcp --permanent)l 立即生效(firewall-cmd --reload)l 查看开放的端口(firewall-cmd --zone=public --list-ports) docker安装12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152https://docs.docker.com/engine/install/centos/sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-enginesudo yum install -y yum-utilssudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.reposudo systemctl start dockersudo systemctl start docker阿里云加速https://cr.console.aliyun.com/cn-hangzhou/instances/mirrorssudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123; &quot;registry-mirrors&quot;: [&quot;https://y1xrkxwk.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker1、查看已启动镜像：docker images 查看已运行容器：docker ps2、查看所有镜像：docker images -a3、启动docker：sudo systemctl start docker4、虚拟机开机启动：sudo systemctl enable docker5、设置自动启动容器：sudo docker update mysql --restart=always6、启动已存在的容器或重启容器，例： 1）查看容器的id或name：docker ps -a 2）重启restart id或name【重启就代表启动了】： docker restart 1b4671904bfa docker restart mysql7、终止容器：docker stop redis8、删除容器：docker rm redis9、进入容器的运行时环境进入mysql：docker exec -it mysql /bin/bash进入redis：docker exec -it redis redis-cli进入redis：docker exec -it redis /bin/shwhereis mysql10、退出容器运行时环境：exit11、虚拟机开机自动启动mysql：sudo docker update mysql --restart=always mysql 安装12345678910111213141516171819202122232425262728293031docker pull mysql:5.7sudo docker run -p 3306:3306 --name mysql \\-v /mydata/mysql/log:/var/log/mysql \\-v /mydata/mysql/data:/var/lib/mysql \\-v /mydata/mysql/conf:/etc/mysql \\-e MYSQL_ROOT_PASSWORD=root \\-d mysql:5.7参数：● -p 3306:3306：将容器的3306端口映射到主机的3306端口● --name：给容器命名● -v /mydata/mysql/log:/var/log/mysql：将配置文件挂载到主机/mydata/..● -e MYSQL_ROOT_PASSWORD=root：初始化root用户的密码为root修改配置 vi /mydata/mysql/conf/my.cnf[client]default-character-set=utf8[mysql]default-character-set=utf8[mysqld]init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;init_connect=&#x27;SET NAMES utf8&#x27;character-set-server=utf8collation-server=utf8_unicode_ciskip-character-set-client-handshakeskip-name-resolvelower_case_table_names=1lower_case_table_names=1在linux下默认是0 指的是是否大小写敏感 1 表示存在磁盘是小写 比较的时候不区分大小写 redis 安装123456789101112131415161718创建redis配置文件目录mkdir -p /mydata/redis/conftouch /mydata/redis/conf/redis.conf启动redis容器docker run -p 6379:6379 --name redis \\-v /mydata/redis/data:/data \\-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \\-d redis redis-server /etc/redis/redis.confredis持久化echo &quot;appendonly yes&quot; &gt;&gt; /mydata/redis/conf/redis.conf# 重启生效docker restart redisdocker update redis --restart=always maven 配置1234567891011121314下载https://maven.apache.org/download.cgi配置环境变量设置阿里云镜像&lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt;&lt;/mirror&gt; mongo安装1234567891011121314151617181920212223242526http://www.zhou-kang.cn/article/37#拉取镜像docker pull mongo:4.0.3#创建容器docker create --name mongodb -p 27017:27017 -v /mydata/mongodb/data:/data/db mongo:4.0.3 --auth#启动容器 docker start mongodb-server#进入容器docker exec -it mongodb-server /bin/bash#进入admin数据库mongouse admin#添加管理员，其拥有管理用户和角色的权限db.createUser(&#123; user: &#x27;lwj&#x27;, pwd: &#x27;123456&#x27;, roles: [ &#123; role: &quot;root&quot;, db: &quot;admin&quot; &#125; ] &#125;)#使用quit()退出mogondb&gt; quit()#进行认证mongo -u &quot;hang&quot; -p &quot;123456&quot; --authenticationDatabase &quot;admin&quot; nacos 集成123456789101112131415161718192021https://blog.csdn.net/gongzi_9/article/details/123373981No Feign Client for loadBalancing defined. Did you forget to include1. 安装依赖2. 下载启动服务 需要java环境 一定要配置JAVA_HOME环境变量3. 配置服务地址 name4. 注解 开启服务注册nacos config1. 配置服务spring: application: name: gulimall-coupon cloud: nacos: config: server-addr: 127.0.0.1:8848 file-extension: ymlfile-extension:如果不是默认的一定要加上 对应的取值一定要也对 如果是高版本 bootstrap依赖 远程调用123451. 安装依赖 Feign2. 编写服务接口 2.1. 注解配置要调用的服务@FeignClient(&quot;gulimall-coupon&quot;) 2.2. 复制要调用服务方法的完整签名3. 注解开启远程服务 并配置接口的包名 @EnableFeignClients(basePackages = &quot;com.gulimall.member.feign&quot;) renrenfast 网关配置123456789101112131415161718192021222324252627282930313233343536373839安装依赖&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-loadbalancer&lt;/artifactId&gt; &lt;version&gt;3.1.6&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;&lt;/dependency&gt;配置网关- id: route_admin uri: lb://renrenfast # lb 表示负载均衡 predicates: - Path=/api/** # 默认前端都带上api前缀 filters: - RewritePath=/api/(?&lt;segment&gt;.*),/renren-fast/$\\&#123;segment&#125;解决跨域新建配置类@Configurationpublic class GulimailCorsConfiguration &#123; @Bean public CorsWebFilter corsWebFilter() &#123; UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(); CorsConfiguration corsConfiguration = new CorsConfiguration(); //1、配置跨域 corsConfiguration.addAllowedHeader(&quot;*&quot;); corsConfiguration.addAllowedMethod(&quot;*&quot;); corsConfiguration.addAllowedOriginPattern(&quot;*&quot;); corsConfiguration.setAllowCredentials(true); source.registerCorsConfiguration(&quot;/**&quot;,corsConfiguration); return new CorsWebFilter(source); &#125;&#125;java.lang.IllegalArgumentException: When allowCredentials is true, allowedOrigins cannot contain the special value &quot;*&quot; since that cannot be set on the &quot;Access-Control-Allow-Origin&quot; response header. To allow credentials to a set of origins, list them explicitly or consider using &quot;allowedOriginPatterns&quot; instead.2.4.0之后要用allowedOriginPatterns 商品分类开发12345678910111213逻辑删除https://baomidou.com/pages/6b03c5/添加配置mybatis-plus: global-config: db-config: logic-delete-field: flag # 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2) logic-delete-value: 1 # 逻辑已删除值(默认为 1) logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)实体类字段上加上@TableLogic注解@TableLogicprivate Integer deleted; JSR303 数据校验12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455引入依赖&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt;&lt;/dependency&gt;实体类添加注解譬如 @NotBland接口开启校验@Validated封装 通用codepublic enum BizCodeEnume &#123; UNKNOW_EXCEPTION(10000,&quot;系统异常&quot;), VAILD_EXCEPTION(10001,&quot;系统异常&quot;); private int code; private String msg; BizCodeEnume(int code,String message) &#123; this.code = code; this.msg = message; &#125; public int getCode() &#123; return code; &#125; public String getMsg() &#123; return msg; &#125;&#125;封装统一异常处理@Slf4j@RestControllerAdvice(basePackages = &quot;com.gulimall.product.controller&quot;)public class GulimallExceptionControllerAdvice &#123; @ExceptionHandler(value = MethodArgumentNotValidException.class) public R handleVaildException(MethodArgumentNotValidException e) &#123; log.error(&quot;数据校验出现异常&#123;&#125;,异常类型：&#123;&#125;&quot;,e.getMessage(),e.getClass()); Map&lt;String,String&gt; map = new HashMap&lt;&gt;(); e.getBindingResult().getFieldErrors().forEach(item-&gt;&#123; map.put(item.getField(),item.getDefaultMessage()); &#125;); return R.error(BizCodeEnume.VAILD_EXCEPTION.getCode(), BizCodeEnume.VAILD_EXCEPTION.getMsg()).put(&quot;data&quot;,map); &#125; @ExceptionHandler(value = Throwable.class) public R handleException(Throwable throwable)&#123; return R.error(BizCodeEnume.UNKNOW_EXCEPTION.getCode(), BizCodeEnume.UNKNOW_EXCEPTION.getMsg()); &#125;&#125; SPU SKU1234567简介：SPU：标准化产品单元 standard product unit，是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的集合，该集合描述了一个产品的特性。SKU：库存量单位 Stock Keeping Unit，SPU：iphone XS、iphone XS max、iphone XR、MI8、SKU：iphonex 64G 黑曜石、MI8 8+64G+黑色 业务开发12345678910111213141516171819202122232425262728293031323334353637383940414243字段为空不返回的字段@JsonInclude(JsonInclude.Include.NON_EMPTY) @TableField(exist = false) private List&lt;CategoryEntity&gt; children;mybatis 配置分页组件@Configuration@EnableTransactionManagement //开启使用@MapperScan(&quot;com.xunqi.gulimall.product.dao&quot;)public class MyBatisConfig &#123; //引入分页插件 @Bean public PaginationInterceptor paginationInterceptor() &#123; PaginationInterceptor paginationInterceptor = new PaginationInterceptor(); // 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求 默认false paginationInterceptor.setOverflow(true); // 设置最大单页限制数量，默认 500 条，-1 不受限制 paginationInterceptor.setLimit(1000); return paginationInterceptor; &#125;&#125;关键字查询public PageUtils queryPage(Map&lt;String, Object&gt; params) &#123; String key = (String) params.get(&quot;key&quot;); QueryWrapper&lt;BrandEntity&gt; wrapper = new QueryWrapper&lt;BrandEntity&gt;(); if (!StringUtils.isEmpty(key)) &#123; wrapper.eq(&quot;brand_id&quot;,key).or().like(&quot;name&quot;,key); &#125; IPage&lt;BrandEntity&gt; page = this.page( new Query&lt;BrandEntity&gt;().getPage(params), wrapper ); return new PageUtils(page);&#125;xml 查询 &lt;update id=&quot;updateCategory&quot;&gt; UPDATE `pms_category_brand_relation` SET catelog_name=#&#123;name&#125; WHERE catelog_id=#&#123;catId&#125; &lt;/update&gt; vo object划分 PO(persistant object) 持久对象对应数据库中的一条记录 不包含任何对数据库的操作 DO(Domain Object) 领域对象从现实世界抽象出来的有形或者无形的业务实体 TO（Transfer Object）数据传输对象不同应用程序之间传输的对象 微服务之间 封装传输的对象 DTO VO 值对象视图对象 通常用于业务层之间的数据传输 和po一样仅仅包含数据而已 但应该是抽象出来的业务对象接收页面传递来的数据 封装对象将业务处理完成的对象 封装成页面需要的数据 BO(business object) 业务对象 BO 可以包含PO 这样处理业务逻辑 可以针对BO去处理 POJO DAO 1连表查询是非常危险 假设有10万个属性 1000 个分组 迪卡尔积就是十个亿中间表数据 这是非常可怕的 连表查询 更新123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778public PageUtils queryBaseAttrPage(Map&lt;String, Object&gt; params, Long catelogId, String attrType) &#123; QueryWrapper&lt;AttrEntity&gt; queryWrapper = new QueryWrapper&lt;AttrEntity&gt;() .eq(&quot;attr_type&quot;,&quot;base&quot;.equalsIgnoreCase(attrType) ? ProductConstant.AttrEnum.ATTR_TYPE_BASE.getCode() : ProductConstant.AttrEnum.ATTR_TYPE_SALE.getCode()); //根据catelogId查询信息 if (catelogId != 0) &#123; queryWrapper.eq(&quot;catelog_id&quot;,catelogId); &#125; String key = (String) params.get(&quot;key&quot;); if (!StringUtils.isEmpty(key)) &#123; //attr_id attr_name queryWrapper.and((wrapper) -&gt; &#123; wrapper.eq(&quot;attr_id&quot;,key).or().like(&quot;attr_name&quot;,key); &#125;); &#125; IPage&lt;AttrEntity&gt; page = this.page( new Query&lt;AttrEntity&gt;().getPage(params), queryWrapper ); PageUtils pageUtils = new PageUtils(page); List&lt;AttrEntity&gt; records = page.getRecords(); List&lt;AttrRespVo&gt; respVos = records.stream().map((attrEntity) -&gt; &#123; AttrRespVo attrRespVo = new AttrRespVo(); BeanUtils.copyProperties(attrEntity, attrRespVo); //设置分类和分组的名字 if (&quot;base&quot;.equalsIgnoreCase(attrType)) &#123; AttrAttrgroupRelationEntity relationEntity = relationDao.selectOne(new QueryWrapper&lt;AttrAttrgroupRelationEntity&gt;().eq(&quot;attr_id&quot;,attrEntity.getAttrId())); if (relationEntity != null &amp;&amp; relationEntity.getAttrGroupId() != null) &#123; AttrGroupEntity attrGroupEntity = attrGroupDao.selectById(relationEntity.getAttrGroupId()); attrRespVo.setGroupName(attrGroupEntity.getAttrGroupName()); &#125; &#125; CategoryEntity categoryEntity = categoryDao.selectById(attrEntity.getCatelogId()); if (categoryEntity != null) &#123; attrRespVo.setCatelogName(categoryEntity.getName()); &#125; return attrRespVo; &#125;).collect(Collectors.toList()); pageUtils.setList(respVos); return pageUtils; &#125;AttrEntity attrEntity = new AttrEntity();BeanUtils.copyProperties(attr,attrEntity);this.updateById(attrEntity);if (attrEntity.getAttrType() == ProductConstant.AttrEnum.ATTR_TYPE_BASE.getCode()) &#123; //1、修改分组关联 AttrAttrgroupRelationEntity relationEntity = new AttrAttrgroupRelationEntity(); relationEntity.setAttrGroupId(attr.getAttrGroupId()); relationEntity.setAttrId(attr.getAttrId()); Integer count = relationDao.selectCount(new QueryWrapper&lt;AttrAttrgroupRelationEntity&gt;() .eq(&quot;attr_id&quot;, attr.getAttrId())); if (count &gt; 0) &#123; relationDao.update(relationEntity, new UpdateWrapper&lt;AttrAttrgroupRelationEntity&gt;().eq(&quot;attr_id&quot;,attr.getAttrId())); &#125; else &#123; relationDao.insert(relationEntity); &#125;&#125; 批量删除123456&lt;delete id=&quot;deleteBatchRelation&quot;&gt; DELETE FROM pms_attr_attrgroup_relation WHERE &lt;foreach collection=&quot;entities&quot; item=&quot;item&quot; separator=&quot;OR&quot;&gt; (attr_id=#&#123;item.attrId&#125; AND attr_group_id=#&#123;item.attrGroupId&#125;) &lt;/foreach&gt;&lt;/delete&gt; controller1231、 controller处理请求 接收和校验数据2、 service 结束controller传来的数据 进行业务处理3、 controller 接收service处理完的数据 封装成页面需要的vo springboot 报错之循环引用12Relying upon circular references is discouraged and they are prohibited by default. Update your application to remove the dependency cycle between beans. As a last resort, it may be possible to break the cycle automatically by setting spring.main.allow-circular-references to true.解决办法加入 @Lazy 注解 elasticsearch、kibana安装 拉取12docker pull elasticsearch:7.4.2docker pull kibina:7.4.2 挂载目录配置12mkdir -p /mydata/elasticsearch/configmkdir -p /mydata/elasticsearch/data 启动Elastic search1234567docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \\-e &quot;discovery.type=single-node&quot; \\-e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; \\-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \\-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \\-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \\-d elasticsearch:7.4.2 设置开机启动elasticsearch 1docker update elasticsearch --restart=always （4）启动kibana： 1docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.187.130:9200 -p 5601:5601 -d kibana:7.4.2 设置开机启动kibana 1docker update kibana --restart=always （5）测试 查看elasticsearch版本信息： http://192.168.187.130:9200/ 1234567891011121314151617&#123;&quot;name&quot;: &quot;63d82eeec0d3&quot;,&quot;cluster_name&quot;: &quot;elasticsearch&quot;,&quot;cluster_uuid&quot;: &quot;j0meIrlySGGXjd-8tkEPNg&quot;,&quot;version&quot;: &#123;&quot;number&quot;: &quot;7.4.2&quot;,&quot;build_flavor&quot;: &quot;default&quot;,&quot;build_type&quot;: &quot;docker&quot;,&quot;build_hash&quot;: &quot;2f90bbf7b93631e52bafb59b3b049cb44ec25e96&quot;,&quot;build_date&quot;: &quot;2019-10-28T20:40:44.881551Z&quot;,&quot;build_snapshot&quot;: false,&quot;lucene_version&quot;: &quot;8.2.0&quot;,&quot;minimum_wire_compatibility_version&quot;: &quot;6.8.0&quot;,&quot;minimum_index_compatibility_version&quot;: &quot;6.0.0-beta1&quot;&#125;,&quot;tagline&quot;: &quot;You Know, for Search&quot;&#125; 显示elasticsearch 节点信息http://192.168.187.130:9200/_cat/nodes ， 1127.0.0.1 76 95 1 0.26 1.40 1.22 dilm * 0adeb7852e00 访问Kibana： http://192.168.137.14:5601/app/kibana 测试数据 https://github.com/elastic/elasticsearch/blob/v6.8.18/docs/src/test/resources/accounts.json 下载工具安装 yum -y install wget 压缩工具安装yum install zip unzip plugin目录安装分词器123wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.4.2/elasticsearch-analysis-ik-7.4.2.zipunzip elasticsearch-analysis-ik-7.4.2.zip -d ikdocker restart elasticsearch","categories":[],"tags":[]},{"title":"springcloud","slug":"springcloud","date":"2023-06-12T14:37:01.000Z","updated":"2023-12-19T08:01:29.781Z","comments":true,"path":"2023/06/12/springcloud/","link":"","permalink":"http://example.com/2023/06/12/springcloud/","excerpt":"","text":"api网关抽象微服务中的公共功能 相当的商场的大门提供 客户端负载均衡 服务自动熔断 灰度发布 统一认证 限流流控 日志统计等丰富功能 解决api管理难题","categories":[],"tags":[]},{"title":"springboot入门与学习","slug":"springboot入门与学习","date":"2023-06-03T12:36:26.000Z","updated":"2023-12-19T08:01:29.781Z","comments":true,"path":"2023/06/03/springboot入门与学习/","link":"","permalink":"http://example.com/2023/06/03/springboot%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"快速创建spring应用 SSM： 导包 写配置 启动应用 提供可选的starter 简化应用整合 starter: 场景启动器（web JSON 缓存 异步 数据库） 只需要配置对应的场景启动器 就能使用相应的功能 简化开发 简化配置 简化部署 简化运维 简化监控 摒弃xml配置 改为注解 @Configuration @RestController @Bean @Import yaml配置文件所有的配置都会在autocoonfig有对应的默认配置 12345678910111213spring: datasource: url: jdbc:mysql://localhost:3306/study username: root password: rootmybatis: # 解析xml文件的路径 mapper-locations: classpath:/mapper/*.xml configuration: # 数据库字段转驼峰命名 map-underscore-to-camel-case: true","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://example.com/tags/springboot/"}]},{"title":"redis安装与启动","slug":"redis安装与启动","date":"2023-06-03T12:19:54.000Z","updated":"2023-12-19T08:01:29.781Z","comments":true,"path":"2023/06/03/redis安装与启动/","link":"","permalink":"http://example.com/2023/06/03/redis%E5%AE%89%E8%A3%85%E4%B8%8E%E5%90%AF%E5%8A%A8/","excerpt":"","text":"安装 Redis 作为一种缓存工具，主要用于解决高并发的问题，在分布式系统中有着极其广泛的应用，Redis 本身是应用于 Linux&#x2F;Unix 平台的(部署在服务器上边)，官方并没有提供 Windows 平台的版本，但是一般的开发者都是在 Windows 平台下进行开发和调试，因此，也需要有 Windows 版本的 Redis ，本文将介绍如何在 Windows 平台下安装 Redis 以及将 Redis 设置为服务 Windows 版 Redis 下载地址 : https://github.com/MicrosoftArchive/redis/releases 设置密码redis.windows.conf 文件设置密码 加入window服务 设置环境变量 加入window服务12redis-server.exe --service-install redis.windows.conf --loglevel verbose(后边的 verbose 表示: 详尽，相当于Java中的 debug级别) 开启与关闭 Redis 服务12345678- 开启服务 redis-server --service-start- 关闭服务 redis-server --service-stop- 卸载服务 redis-server --service-uninstall- 服务重命名 redis-server --service-name server-name","categories":[{"name":"nosql","slug":"nosql","permalink":"http://example.com/categories/nosql/"}],"tags":[{"name":"redis","slug":"redis","permalink":"http://example.com/tags/redis/"}]},{"title":"webpack之loader","slug":"webpack之loader","date":"2023-04-26T03:31:34.000Z","updated":"2023-12-19T08:01:29.782Z","comments":true,"path":"2023/04/26/webpack之loader/","link":"","permalink":"http://example.com/2023/04/26/webpack%E4%B9%8Bloader/","excerpt":"","text":"At its core, webpack is a static module bundler for modern JavaScript applications. When webpack processes your application, it internally builds a dependency graph from one or more entry points and then combines every module your project needs into one or more bundles, which are static assets to serve your content from. loaderwebpack 只能理解 JavaScript 和 JSON 文件，这是 webpack 开箱可用的自带能力。loader 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 模块，以供应用程序使用，以及被添加到依赖图中。 loader 有两个属性： test 属性，识别出哪些文件会被转换。use 属性，定义出在进行转换时，应该使用哪个 loader。 123456789101112const path = require(&#x27;path&#x27;);module.exports = &#123; output: &#123; filename: &#x27;my-first-webpack.bundle.js&#x27;, &#125;, module: &#123; rules: [&#123; test: /\\.txt$/, use: &#x27;raw-loader&#x27; &#125;], &#125;,&#125;;“嘿，webpack 编译器，当你碰到「在 require()/import 语句中被解析为 &#x27;.txt&#x27; 的路径」时，在你对它打包之前，先 use(使用) raw-loader 转换一下。” 插件(plugin)loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建一个插件实例。 123456789const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);const webpack = require(&#x27;webpack&#x27;); // 用于访问内置插件module.exports = &#123; module: &#123; rules: [&#123; test: /\\.txt$/, use: &#x27;raw-loader&#x27; &#125;], &#125;, plugins: [new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27; &#125;)],&#125;; 工程化有时候我们的项目不仅仅是一个简单的网页 而是一个大型的系统 里面会有各种依赖， 在没有IDE的情况下 我们也需要模块化、工程化的构建我们的项目， 方便我们引入公用的库 静态资源的管理加载 包资源优化（去掉无用的资源）等 ，这时候就需要用到webpack 代码分离代码分离是 webpack 中最引人注目的特性之一。此特性能够把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，以及控制资源加载优先级，如果使用合理，会极大影响加载时间。 小即是快(smaller &#x3D; faster)减少编译结果的整体大小，以提高构建性能。尽量保持 chunk 体积小。 使用数量更少&#x2F;体积更小的 library。在多页面应用程序中使用 SplitChunksPlugin。在多页面应用程序中使用 SplitChunksPlugin ，并开启 async 模式。移除未引用代码。只编译你当前正在开发的那些代码。 避免额外的优化步骤Webpack 通过执行额外的算法任务，来优化输出结果的体积和加载性能。这些优化适用于小型代码库，但是在大型代码库中却非常耗费性能： 12345678module.exports = &#123; // ... optimization: &#123; removeAvailableModules: false, removeEmptyChunks: false, splitChunks: false, &#125;,&#125;; 不要为了很小的性能收益，牺牲应用程序的质量！ 注意，在大多数情况下，优化代码质量比构建性能更重要。","categories":[{"name":"webpack","slug":"webpack","permalink":"http://example.com/categories/webpack/"}],"tags":[]},{"title":"名言","slug":"名言","date":"2023-04-25T07:19:17.000Z","updated":"2023-12-19T08:01:29.783Z","comments":true,"path":"2023/04/25/名言/","link":"","permalink":"http://example.com/2023/04/25/%E5%90%8D%E8%A8%80/","excerpt":"","text":"人们喜欢把人和他所在的领域联系起来，但我不喜欢那样。我既不想被认为是一个JavaScript专家，也不想被认为是一个机器学习专家。探索无限的可能性是一件有趣的事情。创造前所未有的、对人类有益的事物会让人激动不已。 —–Ryan Dahl","categories":[],"tags":[]},{"title":"mysql之索引优化","slug":"mysql之索引优化","date":"2023-04-23T13:17:16.000Z","updated":"2023-12-19T08:01:29.780Z","comments":true,"path":"2023/04/23/mysql之索引优化/","link":"","permalink":"http://example.com/2023/04/23/mysql%E4%B9%8B%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/","excerpt":"","text":"索引所占空间的增长确实会对MySQL数据库的写入性能和查询性能造成影响，这主要是由于索引数据过多时会导致磁盘I&#x2F;O操作变得非常频繁，从而使性能下降。为此，可以采取以下几种方式来减缓这种影响： 限制索引的大小：可以考虑为索引指定大小限制，在存储时仅存储指定大小内的数据。例如，在创建索引时可以使用“INDEX col_name(length)”的语法，其中length表示应该存储的字符数。这样，索引的大小将被限制在指定大小内，从而有助于减少索引数据的空间占用。 使用前缀索引：前缀索引是指仅对列值的一个前缀创建索引，而不是对整个列值进行索引。通过使用前缀索引，可以将索引的大小降低到原本的一半或更少。但是需要注意，这样做可能会影响查询性能，因为通常只能匹配前缀长度相同的数据，而不是完整的列值。 压缩存储引擎：MySQL支持使用压缩存储引擎来减少存储索引所需的空间。例如，可以使用InnoDB存储引擎的压缩功能来减少索引数据的物理磁盘空间。 调整数据类型：如果索引占用的空间过大，可以考虑调整数据类型以减少所需的空间。例如，如果使用了INT类型来存储数据，但实际上只有很少的数据，可以考虑使用TINYINT或SMALLINT等更小的数据类型。同样，如果使用了VARCHAR等可变长度数据类型，可以考虑将列值转换为定长数据类型来减少索引大小。 总之，虽然索引所占空间的增长会影响MySQL数据库的性能，但通过一些优化技术可以减轻影响并提高数据库的性能。具体如何处理，需要根据实际情况进行分析和调整。","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[]},{"title":"nginx之配置伪静态","slug":"nginx之配置伪静态","date":"2023-04-23T05:50:45.000Z","updated":"2023-12-19T08:01:29.780Z","comments":true,"path":"2023/04/23/nginx之配置伪静态/","link":"","permalink":"http://example.com/2023/04/23/nginx%E4%B9%8B%E9%85%8D%E7%BD%AE%E4%BC%AA%E9%9D%99%E6%80%81/","excerpt":"","text":"nginx上配置.htaccess伪静态规则在apache上.htaccess转向，只要apache编译的时候指明支持rewrite模块即可。在Nginx中，不支持直接使用.htaccess文件配置服务器。但可以通过在Nginx的配置文件中添加相应的指令来实现类似于.htaccess的功能。nginx要在配置文件中include .htacces文件就可以实现相同的功能了。 修改.htaccess文件，因为apache的rewrite转向规则跟nginx的转向规则还是有一些不一样的，典型的不一样有nginx的根目录需要写在每行转向的地址前，每行规则必须以分号(;)结束，301或者404等跳转使用不同的格式。 修改nginx的配置文件，增加include该.htaccess文件 12345678# 打开对应的配置文件vi /etc/nginx/sites-available/test# 引入规则文件 location / &#123; # 自己的规则文件路径 include /var/www/html/mks_gw_default/.htaccess; &#125; 测试并重启 12nginx -t;sudo systemctl restart nginx; (nginx -s reload) 4、常见的.htaccess应用举例（部分例子引自四个例子实战讲解.htaccess文件rewrite规则）4.1防止盗链，如果来得要访问jpe jpg bmp png结尾的url 用户不是来自我们的网站，那么让他看一张我们网站的展示图片。RewriteEngine On RewriteCond %{HTTP_REFERER} !^http:&#x2F;&#x2F;(.+.)?mysite.com&#x2F; [NC] RewriteCond %{HTTP_REFERER} !^$ RewriteRule .*.(jpe?g|gif|bmp|png)$ &#x2F;images&#x2F;nohotlink.jpg [L] 4.2 网站升级的时候，只有特定IP才能访问，其他的用户将看到一个升级页面RewriteEngine on RewriteCond %{REQUEST_URI} !&#x2F;upgrade.html$ RewriteCond %{REMOTE_HOST} !^24.121.202.30 RewriteRule $ http://www.nbphp.com/upgrade.html [R&#x3D;302,L] 4.3把老的域名转向新域名 redirect from old domain to new domainRewriteEngine On RewriteRule ^(.*)$http://www.yourdomain.com/$1[R=301,L] 5、一些其他功能5.1 引出错误文档的目录ErrorDocument 400 &#x2F;errors&#x2F;badrequest.html ErrorDocument 404 http://yoursite/errors/notfound.html ErrorDocument 401 “Authorization Required 5.2 Blocking users by IP 根据IP阻止用户访问order allow,deny deny from 123.45.6.7 deny from 12.34.5. (整个C类地址) allow from all 5.3 防止目录浏览 disable directory browsingOptions All -Indexes 5.4设置默认首页 serve alternate default index pageDirectoryIndex about.html 5.5 把一些老的链接转到新的链接上——搜索引擎优化SEORedirect 301 &#x2F;d&#x2F;file.htmlhttp://www.htaccesselite.com/r/file.html 5.6为服务器管理员设置电子邮件。ServerSignature EMail SetEnv &#83;&#69;&#x52;&#86;&#69;&#x52;&#95;&#x41;&#x44;&#x4d;&#x49;&#78;&#100;&#x65;&#102;&#97;&#117;&#x6c;&#116;&#x40;&#100;&#111;&#109;&#97;&#x69;&#110;&#46;&#x63;&#111;&#x6d;","categories":[{"name":"nginx","slug":"nginx","permalink":"http://example.com/categories/nginx/"}],"tags":[]},{"title":"常见屏幕尺寸","slug":"常见屏幕尺寸","date":"2023-04-23T02:56:06.000Z","updated":"2023-12-19T08:01:29.784Z","comments":true,"path":"2023/04/23/常见屏幕尺寸/","link":"","permalink":"http://example.com/2023/04/23/%E5%B8%B8%E8%A7%81%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8/","excerpt":"","text":"1280 800 19寸显示器：1440x900（16:10）20寸显示器：1600x900（16:9）1600x1200（4:3）21.5寸显示器：1920x1080（16:9）22寸显示器：1680x1050（16:10）1920x1080（16:9）1920x1200（16:10）23寸显示器：1920x1080（16:9）1920x1200（16:10）23.6寸显示器：1920x1080（16:9）24寸显示器：1920x1200（16:10）1920x1080（16:9）25寸显示器：1920x1080（16:9）26寸显示器：1920x1200（16:10）27寸显示器：2560x1440（16:9）30寸显示器：2560x1600（16:10）","categories":[],"tags":[]},{"title":"web开发之字体","slug":"web开发之字体","date":"2023-04-21T09:09:28.000Z","updated":"2023-12-19T08:01:29.783Z","comments":true,"path":"2023/04/21/web开发之字体/","link":"","permalink":"http://example.com/2023/04/21/web%E5%BC%80%E5%8F%91%E4%B9%8B%E5%AD%97%E4%BD%93/","excerpt":"","text":"下载字体http://xiazaiziti.com/ 新建font.css引入字体包到项目中 eg: pingfangSC.tff 123456@font-face &#123; font-family: &quot;PingFangSC&quot;; src: url(&quot;pingfangSC.tff&quot;); font-weight: normal; font-style: normal;&#125; 需要的地方引入12345&lt;line rel=&quot;stylesheet&quot; href=&quot;font.css&quot;&gt;.class &#123; font-family: PingFangSC&#125; 123456789101112131415161718192021222324252627282930313233苹方提供了六个字重，font-family 定义如下：苹方-简 常规体font-family: PingFangSC-Regular, sans-serif;苹方-简 极细体font-family: PingFangSC-Ultralight, sans-serif;苹方-简 细体font-family: PingFangSC-Light, sans-serif;苹方-简 纤细体font-family: PingFangSC-Thin, sans-serif;苹方-简 中黑体font-family: PingFangSC-Medium, sans-serif;苹方-简 中粗体font-family: PingFangSC-Semibold, sans-serif;苹方除了简体的：苹方-简（PingFang SC），还为繁体用户提供有：苹方-繁（PingFang TC） ，苹方-港（PingFang HK）苹方-繁 的 CSS font-family 使用：font-family: PingFangTC-Regular, sans-serif;font-family: PingFangTC-Ultralight, sans-serif;font-family: PingFangTC-Light, sans-serif;font-family: PingFangTC-Thin, sans-serif;font-family: PingFangTC-Medium, sans-serif;font-family: PingFangTC-Semibold, sans-serif;苹方-港 的 CSS font-family 使用：font-family: PingFangHK-Regular, sans-serif;font-family: PingFangHK-Ultralight, sans-serif;font-family: PingFangHK-Light, sans-serif;font-family: PingFangHK-Thin, sans-serif;font-family: PingFangHK-Medium, sans-serif;font-family: PingFangHK-Semibold, sans-serif;","categories":[{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"}],"tags":[]},{"title":"vim常用命令","slug":"vim常用命令","date":"2023-04-20T14:00:54.000Z","updated":"2023-12-19T08:01:29.782Z","comments":true,"path":"2023/04/20/vim常用命令/","link":"","permalink":"http://example.com/2023/04/20/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"光标移动0 移动到当前行最前面字符位置$ 移动到当前行最后面字符位置 G 文档最后一行gg 文档第一行 n 向右移动n个字符nG 移动到第n行n 向下移动n行 删除 复制 黏贴x X 删除nx 向后删除n个字符dd 删除一行ndd 删除n行dG 删除光标到最后一行数据d1G 删除光标前所有数据 yy 复制nyy 复制n行p P 黏贴【Ctr】+ r 重做上一个动作u 复原前一个动作","categories":[{"name":"vim","slug":"vim","permalink":"http://example.com/categories/vim/"}],"tags":[]},{"title":"sql之常用命令","slug":"sql之常用命令","date":"2023-04-20T01:44:25.000Z","updated":"2023-12-19T08:01:29.781Z","comments":true,"path":"2023/04/20/sql之常用命令/","link":"","permalink":"http://example.com/2023/04/20/sql%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"查询某个库中 包含某个字段的所有表 MySQL的information_schema库中有个COLUMNS表,里面记录了mysql所有库中所有表的字段信息 123456789101112131415161718192021222324252627282930SELECT DISTINCT TABLE_NAME FROM information_schema.`COLUMNS` WHERE COLUMN_NAME = &#x27;catid&#x27; AND TABLE_SCHEMA = &#x27;mks_ue163_com&#x27; AND TABLE_NAME NOT LIKE &#x27;vm%&#x27;;-- 通用模板SELECT table_name FROM information_schema.TABLES WHERE table_schema = &#x27;dbName&#x27; AND table_type = &#x27;base table&#x27; AND TABLE_NAME NOT IN ( SELECT DISTINCT TABLE_NAME FROM information_schema.COLUMNS WHERE COLUMN_NAME = &#x27;culumnName&#x27; AND TABLE_SCHEMA = &#x27;dbName&#x27; AND TABLE_NAME NOT LIKE &#x27;vw%&#x27; );-- 例如：查询数据库【fengchen】中表里没有字段【id】的所有表SELECT table_name FROM information_schema.`TABLES` WHERE TABLE_SCHEMA = &#x27;fengchen&#x27; AND TABLE_TYPE = &#x27;base table&#x27; AND TABLE_NAME NOT IN ( SELECT DISTINCT TABLE_NAME FROM information_schema.`COLUMNS` WHERE COLUMN_NAME = &#x27;id&#x27; AND TABLE_SCHEMA = &#x27;fengchen&#x27; AND TABLE_NAME NOT LIKE &#x27;vm&#x27; ) 索引1234567891011索引的坑既然索引这么好，我们是不是应该尽可能多用索引呢？并不是。首先，不要盲目的创建索引，应只为那些查询操作频繁的列创建索引,创建索引会使查询操作变得更加快速,但是会降低增加、删除、更新操作的速度,因为执行这些操作的同时会对索引文件进行重新排序或更新;其次，在互联网应用中,查询的语句远远大于DML的语句,为一个大表（比如千万级数据）新建索引时是一个需要特别慎重的事情，经常出现“翻车”导致“车毁人亡”的事故，为什么？因为线上系统在被人使用，如果这时候开发或者运维人员执行一个创建索引的语句，容易导致表被锁死，所有操作排队无法被响应，时间一长容易导致业务崩溃，形成链式连锁反应，让业务蒙受巨大损失。百万或千万级数据库，大表加索引有一个比较好的方法：online-schema-change，有兴趣可自行网上搜索，此文不再赘述。","categories":[{"name":"sql","slug":"sql","permalink":"http://example.com/categories/sql/"}],"tags":[]},{"title":"linux之命令","slug":"linux之命令","date":"2023-04-19T07:06:28.000Z","updated":"2023-12-19T08:01:29.779Z","comments":true,"path":"2023/04/19/linux之命令/","link":"","permalink":"http://example.com/2023/04/19/linux%E4%B9%8B%E5%91%BD%E4%BB%A4/","excerpt":"","text":"ufw命令行示例： ufw enable&#x2F;disable：打开&#x2F;关闭防火墙ufw reload：重启防火墙ufw status：查看已经定义的ufw规则ufw default allow&#x2F;deny：外来访问默认允许&#x2F;拒绝ufw allow&#x2F;deny 20：允许&#x2F;拒绝访问20端口，20后可跟&#x2F;tcp或&#x2F;udp，表示tcp或udp封包。sudo ufw allow proto tcp from 192.168.0.0&#x2F;24 to any port 22：允许自192.168.0.0&#x2F;24的tcp封包访问本机的22端口。ufw delete allow&#x2F;deny 20：删除以前定义的”允许&#x2F;拒绝访问20端口”的规则 df du 磁盘使用情况 ll -li 文件详情包含节点信息ln x y 创建硬链接ln -s x y 创建软连接","categories":[{"name":"linux","slug":"linux","permalink":"http://example.com/categories/linux/"}],"tags":[]},{"title":"nginx之配置文件","slug":"nginx之配置文件","date":"2023-04-19T05:40:46.000Z","updated":"2023-12-19T08:01:29.780Z","comments":true,"path":"2023/04/19/nginx之配置文件/","link":"","permalink":"http://example.com/2023/04/19/nginx%E4%B9%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/","excerpt":"","text":"Nginx配置详解过apt安装完成Nginx之后，会在 &#x2F;etc&#x2F;nginx&#x2F; 目录下生成一系列的配置文件。 目录路径如下： 123456789101112131415161718192021222324252627# /etc/nginx.├── conf.d/├── fastcgi.conf├── fastcgi_params├── koi-utf├── koi-win├── mime.types├── modules-available├── modules-enabled│ ├── 50-mod-http-image-filter.conf -&gt; /usr/share/nginx/modules-available/mod-http-image-filter.conf│ ├── 50-mod-http-xslt-filter.conf -&gt; /usr/share/nginx/modules-available/mod-http-xslt-filter.conf│ ├── 50-mod-mail.conf -&gt; /usr/share/nginx/modules-available/mod-mail.conf│ └── 50-mod-stream.conf -&gt; /usr/share/nginx/modules-available/mod-stream.conf├── nginx.conf├── proxy_params├── scgi_params├── sites-available│ └── default├── sites-enabled│ ├── default -&gt; /etc/nginx/sites-available/default├── snippets│ ├── fastcgi-php.conf│ └── snakeoil.conf├── uwsgi_params└── win-utf6 directories, 18 files nginx.conf在 nginx 启动时，会加载 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf 配置文件。打开 nginx.conf 后可以看到，加载的文件如下： 123456789101112131415161718192021222324252627user www-data; # 启动该nginx进程的用户worker_processes auto;pid /run/nginx.pid;include /etc/nginx/modules-enabled/*.conf; # nginx模块配置路径events &#123; worker_connections 768; # 每个work_process 允许最多连接数 # multi_accept on; # 默认为off，worker process一次只能接收一个新到达的网络连接。 on，可以做到同时接收多个新到达的网络连接&#125;http &#123; # Basic Settings 基础设置 ... # SSL Settings SSL 设置 ... # Logging Settings 日志设置 ... # Gzip Settings gzip设置 ... # 此处往上配置为全局统一配置，建议是不修改，通过 include 中的文件进行修改 ## # Virtual Host Configs # 网站对应配置 ## include /etc/nginx/conf.d/*.conf; # 配置项的位置和文件 include /etc/nginx/sites-enabled/*; # 网站配置文件&#125; conf.dconf.d 文件夹下的文件会由 nginx.conf 文件通过 Virtual Host Configs 下面的配的路径进行引入，文件后缀需要为 .conf 。 sites-available 文件夹sites-available 中拥有名为 default 的配置文件，打开即可在该文件开头看到 nginx packaging team 的说明： In most cases, administrators will remove this file from sites-enabled&#x2F; and leave it as reference inside of sites-available where it will continue to be updated by the nginx packaging team. 通常情况下，网站管理员会将此文件的链接从 sites-enabled 中删除，并将其作为 sites-available 中其他文件的参考，nginx packaging team 将持续对此文件进行更新。 也就是说，文件夹下的 default 为网站配置文件的参考，由于在 nginx 更新时，default 会一同被更新以展示配置文件的变化，所以在配置网站时，不应该直接修改此文件，需要复制为新文件，再进行修改。 而 sites-available 则是用于存放网站的配置文件，意为可用的网站列表，用于在需要时链接到 sites-enabled 中作为需要启用的网站。 sites-enabled 文件夹sites-enabled 中则只拥有 sites-available 文件夹下 default 的软链接，结合前面得出： sites-enabled 下的文件，会作为 nginx.conf 的一部分加载sites-enabled 下的用于存放 sites-available 中文件的软连接sites-enabled 意为已开启的网站，将 sites-available 中的配置文件链接到此处，以使配置文件被 nginx 加载。 https://www.digitalocean.com/community/tutorials/how-to-configure-the-nginx-web-server-on-a-virtual-private-server","categories":[],"tags":[]},{"title":"linux之nginx、ssh","slug":"linux之nginx、ssh","date":"2023-04-16T15:37:31.000Z","updated":"2023-12-19T08:01:29.779Z","comments":true,"path":"2023/04/16/linux之nginx、ssh/","link":"","permalink":"http://example.com/2023/04/16/linux%E4%B9%8Bnginx%E3%80%81ssh/","excerpt":"","text":"ssh安装12sudo apt install openssh-server # 安装openssh-server 查看状态12sudo systemctl status ssh 防火墙开启ssh端口1sudo ufw allow ssh 配置允许root远程ssh登录访问12sudo vim /etc/ssh/sshd_config 将#PermitRootLogin prohibit-password中prohibit-password去掉改为yes，并把PermitRootLogin yes之前的#去掉，即PermitRootLogin yes 重启ssh服务 12service sshd restart 连接ssh服务12ssh username@ip_address ssh服务的启用与禁用12sudo systemctl disable --now ssh # 禁用服务sudo systemctl enable --now ssh # 启用服务 切换到root用户sudo su root nginx安装12sudo apt install nginx","categories":[{"name":"linux","slug":"linux","permalink":"http://example.com/categories/linux/"}],"tags":[]},{"title":"php之环境搭建","slug":"php之环境搭建","date":"2023-04-15T08:44:54.000Z","updated":"2023-12-19T08:01:29.780Z","comments":true,"path":"2023/04/15/php之环境搭建/","link":"","permalink":"http://example.com/2023/04/15/php%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","excerpt":"","text":"下载安装https://windows.php.net/download#php-8.2选择zip包 解压到要安装的目录 添加到环境变量扩展开启默认安装目录下可能没有 php.ini 目录 复制php.ini-development 文件重命名为php.ini就可以 如果需要开启对应的扩展 去掉前面的;号就行 extension_dir = &quot;ext&quot; 这个也要打开 web服务php自带有一个web服务可以本地开发调试","categories":[{"name":"php","slug":"php","permalink":"http://example.com/categories/php/"}],"tags":[]},{"title":"微前端之qiankun","slug":"微前端之qiankun","date":"2023-04-14T09:47:51.000Z","updated":"2023-12-19T08:01:29.785Z","comments":true,"path":"2023/04/14/微前端之qiankun/","link":"","permalink":"http://example.com/2023/04/14/%E5%BE%AE%E5%89%8D%E7%AB%AF%E4%B9%8Bqiankun/","excerpt":"","text":"主应用基座（主应用）负责导航的渲染和登录态的下发，为子应用提供一个挂载的容器div，基座应该保持简洁（qiankun官方demo甚至直接使用原生html搭建），不应该做涉及业务的操作 主应用注册微应用123456789101112131415161718import &#123; registerMicroApps, start &#125; from &#x27;qiankun&#x27;;registerMicroApps([ &#123; name: &#x27;react app&#x27;, // app name registered entry: &#x27;//localhost:7100&#x27;, container: &#x27;#yourContainer&#x27;, activeRule: &#x27;/yourActiveRule&#x27;, &#125;, &#123; name: &#x27;vue app&#x27;, entry: &#123; scripts: [&#x27;//localhost:7100/main.js&#x27;] &#125;, container: &#x27;#yourContainer2&#x27;, activeRule: &#x27;/yourActiveRule2&#x27;, &#125;,]);start(); 微应用导出周期函数微应用需要在自己的入口 js (通常就是你配置的 webpack 的 entry js) 导出 bootstrap、mount、unmount 三个生命周期钩子，以供主应用在适当的时机调用。 123456789101112131415161718192021222324252627282930/** * bootstrap 只会在微应用初始化的时候调用一次，下次微应用重新进入时会直接调用 mount 钩子，不会再重复触发 bootstrap。 * 通常我们可以在这里做一些全局变量的初始化，比如不会在 unmount 阶段被销毁的应用级别的缓存等。 */export async function bootstrap() &#123; console.log(&#x27;react app bootstraped&#x27;);&#125;/** * 应用每次进入都会调用 mount 方法，通常我们在这里触发应用的渲染方法 */export async function mount(props) &#123; ReactDOM.render(&lt;App /&gt;, props.container ? props.container.querySelector(&#x27;#root&#x27;) : document.getElementById(&#x27;root&#x27;));&#125;/** * 应用每次 切出/卸载 会调用的方法，通常在这里我们会卸载微应用的应用实例 */export async function unmount(props) &#123; ReactDOM.unmountComponentAtNode( props.container ? props.container.querySelector(&#x27;#root&#x27;) : document.getElementById(&#x27;root&#x27;), );&#125;/** * 可选生命周期钩子，仅使用 loadMicroApp 方式加载微应用时生效 */export async function update(props) &#123; console.log(&#x27;update props&#x27;, props);&#125; 配置微应用打包工具123456789101112131415const &#123; name &#125; = require(&#x27;./package&#x27;);module.exports = &#123; devServer: &#123; headers: &#123; &#x27;Access-Control-Allow-Origin&#x27;: &#x27;*&#x27;, &#125;, &#125;, configureWebpack: &#123; output: &#123; library: `$&#123;name&#125;-[name]`, libraryTarget: &#x27;umd&#x27;, // 把微应用打包成 umd 库格式 jsonpFunction: `webpackJsonp_$&#123;name&#125;`, &#125;, &#125;,&#125;; webpack打包设置 webpack_public_path123if (window.__POWERED_BY_QIANKUN__) &#123; __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;&#125; vue3+vite 问题微前端解决方案https://github.com/tengmaoqing/vite-plugin-qiankun/tree/master 微应用之间传值 props 12345678910&#123; name:&#x27;subapp&#x27;, entry:&#x27;//localhost:10200&#x27;, container:&#x27;#microApp&#x27;, activeRule:&#x27;/subapp&#x27;, props: &#123; test:&#x27;测试主应用传值&#x27;, parentActions:actions &#125;&#125; 手动加载或者注册子应用的时候把需要传的值带过去 actions 发布-订阅的设计模式 类似于watch监听 qiankun框架提供一套中间状态池 不同的子应用可以改变池子中的状态 监听状态的应用都会收到状态变化实现应用之间的传值 主应用构建状态池 123456789101112131415161718import &#123; initGlobalState&#125; from &#x27;qiankun&#x27;;var state = &#123; num: 1&#125;;// 初始化 stateconst actions = initGlobalState(state);actions.onGlobalStateChange((stat, prev) =&gt; &#123; console.log(&#x27;主应用检测到state变更：&#x27;, stat, prev); state.num = stat.num&#125;);// 你还可以定义一个获取state的方法下发到子应用actions.getGlobalState = function () &#123; return state&#125;export default actions; props 下发到子应用 12345678910&#123; name:&#x27;subapp&#x27;, entry:&#x27;//localhost:10200&#x27;, container:&#x27;#microApp&#x27;, activeRule:&#x27;/subapp&#x27;, props: &#123; test:&#x27;测试主应用传值&#x27;, parentActions:actions &#125;&#125; 子应用中全局app（vue）中引用状态池 1234567891011121314151617function render(props = &#123;&#125;) &#123; const &#123; container &#125; = props; console.log(&#x27;props :&#x27;, props); instance = new Vue(&#123; router, store, // 挂载在根节点上 data()&#123; return &#123; test: props.test, parentActions: props.parentActions, &#125; &#125;, render: (h) =&gt; h(App), &#125;).$mount(container ? container.querySelector(&#x27;#app&#x27;) : &#x27;#app&#x27;);&#125; 子应用需要更新的时候更新状态 123456changeMainData()&#123; console.log(&#x27;=====&gt; :&#x27;,this.$root.parentActions); let a = this.$root.parentActions.getGlobalState().num a = a + 1 this.$root.parentActions.setGlobalState(&#123;num: a&#125;) &#125; 其他应用设置监听的话 就能得到状态变化 123mounted() &#123; this.state = actions.getGlobalState().num &#125;, vite应用静态资源404vit.config 文件添加下面配置 123server: &#123; origin: &#x27;http://localhost:5173&#x27;, //项目baseUrl，解决主应用中出现静态地址404问题&#125;, 封装全局数据把全局下发的数据封装到通用的数据存储中 里面封装的store 来保存全局数据 这样不管数据是主应用下发的还是单独启动子应用获取 对于使用者来说 不需要关心 数据来自哪里 只要从封装的store上取数据就好了 子应用独立仓库随着项目发展，子应用可能会越来越多，如果子应用和基座都集合在同一个git仓库，就会越来越臃肿。 若项目有CI&#x2F;CD，只修改了某个子应用的代码，但代码提交会同时触发所有子应用构建，牵一发动全身，是不合理的。 同时，如果某些业务的子应用的开发是跨部门跨团队的，代码仓库如何分权限管理又是一个问题。 子项目之间的公共插件如何共享巨无霸应用的公共依赖和公共函数被太多的页面使用，导致升级和改动困难，使用微前端可以让各个子项目独立拥有自己的依赖，互不干扰。而我们想要复用公共依赖，这与微前端的理念是相悖的。 所以我的想法是：父项目提供公共依赖，子项目可以自由选择用或者不用。","categories":[{"name":"微前端","slug":"微前端","permalink":"http://example.com/categories/%E5%BE%AE%E5%89%8D%E7%AB%AF/"}],"tags":[]},{"title":"微前端调研","slug":"微前端调研","date":"2023-04-14T09:10:06.000Z","updated":"2023-12-19T08:01:29.785Z","comments":true,"path":"2023/04/14/微前端调研/","link":"","permalink":"http://example.com/2023/04/14/%E5%BE%AE%E5%89%8D%E7%AB%AF%E8%B0%83%E7%A0%94/","excerpt":"","text":"什么是微前端https://micro-frontends.org/ Techniques, strategies and recipes for building a modern web app with multiple teams that can ship features independently. 多个团队 独立的功能 通过一定的技术手段（就是我们选择的框架） 构建成一个web应用 需要注意什么基于上面的特点我们构建微前端app的时候需要考虑下面几点 技术栈无关： 主框架不限制接入应用的技术栈，微应用具备完全自主权 独立开发、独立部署： 微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新 独立运行： 聚在一起的时候，每个微应用之间状态隔离，不会相互影响 总起来 就是自主、独立、可聚合 做微前端的好处对于开发来说： 可维护性更好：每个微应用代码量少，不容易产生不可预知的耦合 开发效率更高：每个微应用独立开发、测试，构建速度更快，模块级复用 接入成本更低：技术栈无关 增量升级： 在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略 巨石应用的维护性差 开发效率低的问题 对于用户来说： 容错性更高：一个微应用不可用，不会影响其他应用的展示 对于公司来说： 横向的组织扩展成为可能 技术选型npmiframesingle-spaqiankunmodulefederation https://zhuanlan.zhihu.com/p/78362028","categories":[{"name":"微前端","slug":"微前端","permalink":"http://example.com/categories/%E5%BE%AE%E5%89%8D%E7%AB%AF/"}],"tags":[]},{"title":"mysql之安装","slug":"mysql之安装","date":"2023-04-10T08:20:24.000Z","updated":"2023-12-19T08:01:29.779Z","comments":true,"path":"2023/04/10/mysql之安装/","link":"","permalink":"http://example.com/2023/04/10/mysql%E4%B9%8B%E5%AE%89%E8%A3%85/","excerpt":"","text":"mysql-5.7.26-winx64安装教程 下载 https://cdn.mysql.com/archives/mysql-5.7/mysql-5.7.26-winx64.zip 解压到安装目录 mysql根目录下新建my.ini文件 12345678910111213141516171819202122232425[mysqld]# 设置3306端口port=3306# 设置mysql的安装目录 ---这里输入你安装的文件路径----basedir=D:\\software\\mysql-5.7.40-winx64\\mysql-5.7.26-winx64# 设置mysql数据库的数据的存放目录datadir=E:\\mysql\\data# 允许最大连接数max_connections=200# 允许连接失败的次数。max_connect_errors=10# 服务端使用的字符集默认为utf8character-set-server=utf8# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB# 默认使用“mysql_native_password”插件认证#mysql_native_passworddefault_authentication_plugin=mysql_native_password[mysql]# 设置mysql客户端默认字符集default-character-set=utf8[client]# 设置mysql客户端连接服务端时默认使用的端口port=3306default-character-set=utf8 新建data文件夹与上面文件中的路径一直 安装mysql 12345//安装mysql 安装完成后Mysql会有一个随机密码 记录下来 root@localhost: t&lt;K&amp;NXWGP03Vmysqld --initialize --console//安装mysql服务并启动 mysqld --install mysql 启动服务到服务里面启动mysql 修改密码mysql -uroot -pALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘root’; 配置环境变量 mysql 5.7.26 安装 导入数据库 phpstudy安装 xp.xn &#x2F;cache&#x2F;configs&#x2F;database.php 目录 数据库配置 host添加虚拟域名 C:\\Windows\\System32\\drivers\\etc phpstudy安装目录新建WWW目录里面放置代码 htaccess 文件替换 phpstudy域名 目录配置 启动apache 报错 mysql 1130 is not allowed to connect1103 这个问题是因为在数据库服务器中的mysql数据库中的user的表中没有权限(也可以说没有用户)，解决的方法： 1、连接服务器: mysql -u root -p 2、看当前所有数据库：show databases; 3、进入mysql数据库：use mysql; 4、查看mysql数据库中所有的表：show tables; 5、查看user表中的数据：select Host, User,Password from user; 6、修改user表中的Host:update user set Host&#x3D;’%’ where User&#x3D;’root’; 7、最后刷新一下：flush privileges;","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[]},{"title":"js之callbackhell","slug":"js之callbackhell","date":"2023-04-03T07:48:08.000Z","updated":"2023-12-19T08:01:29.778Z","comments":true,"path":"2023/04/03/js之callbackhell/","link":"","permalink":"http://example.com/2023/04/03/js%E4%B9%8Bcallbackhell/","excerpt":"","text":"http://callbackhell.com/","categories":[],"tags":[]},{"title":"imageTest","slug":"imageTest","date":"2023-04-03T02:29:38.000Z","updated":"2023-12-19T08:01:29.778Z","comments":true,"path":"2023/04/03/imageTest/","link":"","permalink":"http://example.com/2023/04/03/imageTest/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"web之Performance","slug":"web之Performance","date":"2023-03-31T07:40:17.000Z","updated":"2023-12-19T08:01:29.782Z","comments":true,"path":"2023/03/31/web之Performance/","link":"","permalink":"http://example.com/2023/03/31/web%E4%B9%8BPerformance/","excerpt":"","text":"帧率条形图、CPU 使用率面积图、资源瀑布图、主线程火焰图、事件总揽等模块 不同的颜色代表着不同的事件类型蓝色：加载（Loading）事件黄色：脚本运算（Scripting）事件紫色：渲染（Rendering）事件绿色：绘制（Painting）事件灰色：其他（Other）闲置：浏览器空闲 主线程火焰图是用来分析渲染性能的主要图表。不同于「正常」火焰图，这里展示的火焰图是倒置的，即最上层是父级函数或应用，越往下则调用栈越浅，最底层的一小格（如果时间维度拉得不够长，看起来像是一小竖线）表示的是函数调用栈顶层。默认情况下火焰图会记录已执行 JS 程序调用栈中的每层函数（精确到单个函数的粒度），非常详细。而开启「Disable JS Samples」后，火焰图只会精确到事件级别（调用某个 JS 文件中的函数是一个事件），忽略该事件下的所有函数调用栈。 详情面板。前面已经多次提到事件，我想如果再不解释可能要被寄刀片了。Performance 工具中，所有的记录的最细粒度就是事件。这里的事件不是指 JS 中的事件，而是一个抽象概念，我们打开主线程火焰图，随意点击一个方块，就可以在详情面板里看到该事件的详情，包括事件名、事件耗时、发起者等信息。举几个例子：Parse HTML 是一种 Loading 事件（蓝色），它表示在在事件时间内，Chrome 正在执行其 HTML 解析算法；Event 是一种 Scripting 事件（黄色），它表示正在执行 JS 事件（例如 click）；Paint 是一种绘制事件（绿色），表示 Chrome 将合成的图层绘制出来。 帧线程时序图（Frames）和网络瀑布图（Network）可以从时间维度分别查看绘制出的页面和资源加载情况。 详情面板还有非常重要的一部分就是事件耗时饼状图，它列出了你选择的时间段内，不同类型事件（加载、脚本运算、渲染、绘制、其他事件、发呆:) ）所占的比例和耗费的时间。分析占比同分析 CPU 面积图有相通的意义 —— 到底是哪种事件造成了性能瓶颈。 当渲染首屏时浏览器分别解析 HTML 与 CSS 文件，生成文档对象模型（DOM）与 CSS 对象模型（CSSOM）；合并 DOM 与 CSSOM 成为渲染树（Render Tree）；计算样式（ Style）；计算每个节点在屏幕中的精确位置与大小（Layout）；将渲染树按照上一步计算出的位置绘制到图层上（Paint）；渲染引擎合成所有图层最终人眼可见（Composite Layers）。如果改变页面布局，则是先通过 JS 更新 DOM 再经历计算样式到合成图像这个过程。如果仅仅是非几何变化（颜色、visibility、transform），则可以跳过布局步骤。 https://www.ruanyifeng.com/blog/2017/09/flame-graph.html 重排 DOM元素的几何属性变化 DOM树的结构变化 当DOM树的结构变化时，例如节点的增减、移动等，也会触发重排 获取某些属性 浏览器引擎可能会针对重排做了优化。比如Opera，它会等到有足够数量的变化发生，或者等到一定的时间，或者等一个线程结束，再一起处理，这样就只发生一次重排。但除了渲染树的直接变化，当获取一些属性时，浏览器为取得正确的值也会触发重排。这样就使得浏览器的优化失效了。这些属性包括：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight、getComputedStyle() (currentStyle in IE)。所以，在多次使用这些值时应进行缓存。 此外，改变元素的一些样式，调整浏览器窗口大小等等也都将触发重排。 开发中，比较好的实践是尽量减少重排次数和缩小重排的影响范围 1. 将多次改变样式属性的操作合并成一次操作。例如， 将需要多次重排的元素，position属性设为absolute或fixed，这样此元素就脱离了文档流，它的变化不会影响到其他元素。例如有动画效果的元素就最好设置为绝对定位。 由于display属性为none的元素不在渲染树中，对隐藏的元素操作不会引发其他元素的重排。如果要对一个元素进行复杂的操作时，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排。 5. 在需要经常获取那些引起浏览器重排的属性值时，要缓存到变量。 在最近几次面试中比较常问的一个问题：在前端如何实现一个表格的排序。如果应聘者的方案中考虑到了如何减少重绘和重排的影响，将是使人满意的方案。 https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work","categories":[{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"}],"tags":[]},{"title":"js之常用全局函数和语句","slug":"js之常用全局函数和语句","date":"2023-03-29T07:08:20.000Z","updated":"2023-12-19T08:01:29.779Z","comments":true,"path":"2023/03/29/js之常用全局函数和语句/","link":"","permalink":"http://example.com/2023/03/29/js%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0%E5%92%8C%E8%AF%AD%E5%8F%A5/","excerpt":"","text":"编码函数12345decodeURI() //和/*...*/(注释)decodeURIComponent() constencodeURI() varencodeURIComponent()escape() 编码函数的作用是把字符串转换成能用作统一资源标识符(Uniform Resource Identifier)的版本，例如网页地址或服务器 CGI 脚本的调用。拉丁字母数字字符组在编码处理后不会改变，但某些符号和其他 Unicode 字符必须使用编码函数转换成 Internet 能传输的格式(字符数字的十六进制表示)。例如，空格字符必须编码成十六进制形式：%20。encodeURI()和 escape()函数(还有 decodeURI()和 unescape())的最大区别在于，现代版本的浏览器不对大量符号进行编码，因为根据 RFC2396(http://www.ietf.org/rfc/rfc2396.txt)推荐的语法，它们可用作 URI 字符。因此，不通过 encodeURI()函数来编码下面的字符：; &#x2F; ? : @ &amp; &#x3D; + $ , - _ . ! ∼ * ‘ ( ) #encodeURI()和 decodeURI()函数只能在完整的 URI 中使用。可用的 URI 可以是相对地址或绝对地址，但这两个函数是连接在一起的，所以不编码 URI 中的协议(:&#x2F;&#x2F;)、搜索字符串(例如?和&#x3D;)和目录层次分隔符(&#x2F;)。decodeURI()函数能处理从服务器传来的页面地址 URI，但注意，有些服务器的 CGI 程序把空格编码成加号(+)，但 JavaScript 函数不能把加号解码回空格。如果脚本需要解码的 URI 用加号代替空格，则需要通过一个字符串替代方法来运行解码的 URI，来完成这项工作(这里使用正则表达式比较方便)。如果要解码的 URI 字符串是用脚本编码的，则只有通过相应的编码函数进行编码的 URI，才使用解码函数。不要试图对使用旧 escape()函数创建的 URI 进行解码，因为转换过程根据不同的规则来进行。URI 和 URI 组件之间的区别在于，组件是 URI 的一个片段，一般不含有分隔符。例如，如果在完整的 URI 上使用 encodeURIComponent()函数，则几乎所有符号(句点除外)都会编码成十六进制版本，包括目录分隔符。因此，应该在 URI 的最小单位上使用组件级的转换函数。例如，如果组合一个包含“名&#x2F;值”对的查询字符串，就可以在名称和值上分别使用 encodeURIComponent()函数。但如果在 name&#x3D;value 形式的名&#x2F;值对上使用这个函数，这个函数就会把等号编码成对应的十六进制 eval()eval()函数能计算任何存储为字符串的 JavaScript 语句或表达式，包括算术表达式、对象赋值和对象方法调用的字符串形式。然而，这里不推荐使用 eval()函数，因为这个函数的效率极低(从性能角度来看)。幸好，不用 eval()函数也可将对象名的字符串版本转换成有效的对象引用。例如，如果脚本遍历一系列的对象，而这些对象的名称包含连续的数字，可以将对象名用作数组索引，而不是使用 eval()函数来组合对象引用。下面是设置一系列域 data0、datal 等的值的低效方式： 1234567891011121314151617function fillFields()&#123;var theObj;for (var i = 0; i &lt; 10; i++)&#123;theObj = eval(&quot;document.forms[0].data&quot; + i);theObj.value = i;&#125;&#125;更高效的方式是在对象引用的索引方括号中进行连接：function fillFields()&#123;for (var i = 0; i &lt; 10; i++)&#123;document.getElementById(&quot;myForm&quot;).elements[&quot;data&quot; + i].value = i;&#125;&#125; 提示：只要打算使用 eval()函数，就要看看能否使用对象数组的字符串索引值来替代 eval()函数。W3C DOM 使用 document.getElementByld()方法，使这个任务更容易完成，这个方法把字符串作为参数，返回指定对象的引用。 isFinite()isFinite()函数一般很少使用，它用于检查数字是否超出了 JavaScript 能处理的最大值或最小值。如果数字超出了这个范围，该函数就返回 false。这个函数的参数必须是数字数据类型 isNaN()把值传递给计算操作之前，需要使用 isNaN()函数来检查这个值是不是数字。这个函数常常用于检查 parseInt()或 parseFloat()函数的结果。如果提交给这些函数的字符串不能转换成数字，结果就为 NaN(一个特别的符号，表示“不是数字”)。如果这个值不是数字，isNaN()函数就返回 true。 Number() parseFloat() parseInt()如果脚本不在意值的精度，并允许通过原字符串决定返回值是浮点型还是整型，就可以使用 Number()函数。这个函数只有一个参数：要转换成数字的字符串。parseFloat()函数也能通过原字符串决定返回值是浮点型还是整型。如果原字符串在小数点右边有非零值，返回值就是浮点数。但如果原字符串是如“3.00”之类的数字，返回值就是整型。在 parseInt()中，另一个可选参数可以决定转换时使用的数字基数。如果不指定基数参数，JavaScript 会试着找一个基数，但这样可能使 JavaScript 出问题。当 parseInt()的字符串参数以 0 开头时(文本框输入项或数据库域有可能以 0 开头)，就会出现一个重要问题：在 JavaScript 中，以 0 开头的数字处理为八进制(基数为 8)，因此，parseInt(“010”)返回的十进制值为 8。使用 parseInt()函数时，如果处理基数为 10 的数字，就应总是指定基数为 10。基数也可以指定为 2～36 之间的数字。例如，指定基数为 2，把二进制数字符串转换成十进制形式，如下所示：var n &#x3D; parseInt(“011”,2);&#x2F;&#x2F; result: 3同样，也可以指定基数为 16，把十六进制字符串转换成十进制：var n &#x3D; parseInt(“4F”,16);&#x2F;&#x2F; result: 79示例parseInt()和 parseFloat()函数有一个非常有用的功能。如果字符串参数以至少一位数字开头，后跟字母，这些函数将只处理字符串前面的数字部分，并忽略剩 余的部分。因此，可在navigator.appVersion 字符串上使用 parseFloat()函数，来提取报告的版本号，而不必分析字符串的剩余部分。例如，Windows 的 Firefox 1.0 报告 navigator.appVersion 值为：5.0 (Windows; en-US)也可通过 parseFloat()函数来获取字符串的数字部分：var ver &#x3D; parseFloat(navigator.appVersion); toString()unescape()unwatch()watch()","categories":[],"tags":[]},{"title":"web之微服务","slug":"web之微服务","date":"2023-03-29T02:51:03.000Z","updated":"2023-12-19T08:01:29.783Z","comments":true,"path":"2023/03/29/web之微服务/","link":"","permalink":"http://example.com/2023/03/29/web%E4%B9%8B%E5%BE%AE%E6%9C%8D%E5%8A%A1/","excerpt":"","text":"Why Not Iframe为什么不用 iframe，这几乎是所有微前端方案第一个会被 challenge 的问题。但是大部分微前端方案又不约而同放弃了 iframe 方案，自然是有原因的，并不是为了 “炫技” 或者刻意追求 “特立独行”。 如果不考虑体验问题，iframe 几乎是最完美的微前端解决方案了。iframe 最大的特性就是提供了浏览器原生的硬隔离方案，不论是样式隔离、js 隔离这类问题统统都能被完美解决。但他的最大问题也在于他的隔离性无法被突破，导致应用间上下文无法被共享，随之带来的开发体验、产品体验的问题。 url 不同步。浏览器刷新 iframe url 状态丢失、后退前进按钮无法使用。 UI 不同步，DOM 结构不共享。想象一下屏幕右下角 1&#x2F;4 的 iframe 里来一个带遮罩层的弹框，同时我们要求这个弹框要浏览器居中显示，还要浏览器 resize 时自动居中.. 全局上下文完全隔离，内存变量不共享。iframe 内外系统的通信、数据同步等需求，主应用的 cookie 要透传到根域名都不同的子应用中实现免登效果。 慢。每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程。 其中有的问题比较好解决(问题1)，有的问题我们可以睁一只眼闭一只眼(问题4)，但有的问题我们则很难解决(问题3)甚至无法解决(问题2)，而这些无法解决的问题恰恰又会给产品带来非常严重的体验问题， 最终导致我们舍弃了 iframe 方案。 问题3，后端不应该关心前端需要怎样的实现，每增加一个微服务就莫名其妙多了一层代理，长此以往，nginx配置会是一个灾难 问题2，主应用不应该关心微服务，它们应该保持松耦合。如果把真正的实现放在主应用，微服务只负责调postMessage，这种强耦合的跨应用开发方式，那还不如回到单应用 这么搞主应用跟 iframe 应用都得累死😂让上层去显示的话，所有 popup 就都得是上层来负责了。message、alert、notice、dialog 等等。dialog 里再加些交互，比如 dialog 里的表单某一个 checkbox 点击了，需要 iframe 里的页面做个其他响应，比如某个 button 变灰等等。 想象一下这个模式下 iframe 里的应用要怎么编码？全程没有 UI 渲染全是各种 postMessage 和 onmessage 监听，还要保证消息时序，时序一乱 bug 丛生…iframe 里的应用不被嵌还跑不起来了，因为只是个消息收发器，连自己的 UI 都没有，全都依赖宿主环境~想想就觉得酸爽","categories":[{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"}],"tags":[]},{"title":"web之消息队列","slug":"web之并发模型和事件循环","date":"2023-03-26T06:27:25.000Z","updated":"2023-12-19T08:01:29.783Z","comments":true,"path":"2023/03/26/web之并发模型和事件循环/","link":"","permalink":"http://example.com/2023/03/26/web%E4%B9%8B%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/","excerpt":"","text":"https://blog.51cto.com/kaimo313/5588246 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop 循环模型 JavaScript 有一个基于事件循环的并发模型，事件循环负责执行代码、收集和处理事件以及执行队列中的子任务 栈函数调用形成了一个由若干帧组成的栈。 1234567891011function foo(b) &#123; let a = 10; return a + b + 11;&#125;function bar(x) &#123; let y = 3; return foo(x * y);&#125;console.log(bar(7)); / 当调用 bar 时，第一个帧被创建并压入栈中，帧中包含了 bar 的参数和局部变量。当 bar 调用 foo 时，第二个帧被创建并被压入栈中，放在第一个帧之上，帧中包含 foo 的参数和局部变量。当 foo 执行完毕然后返回时，第二个帧就被弹出栈（剩下 bar 函数的调用帧）。当 bar 也执行完毕然后返回时，第一个帧也被弹出，栈就被清空了 堆对象被分配在堆中，堆是一个用来表示一大块（通常是非结构化的）内存区域的计算机术语 队列一个 JavaScript 运行时包含了一个待处理消息的消息队列。每一个消息都关联着一个用以处理这个消息的回调函数运行时会从最先进入队列的消息开始处理队列中的消息。被处理的消息会被移出队列，并作为输入参数来调用与之关联的函数。正如前面所提到的，调用一个函数总是会为其创造一个新的栈帧。 函数的处理会一直进行到执行栈再次为空为止；然后事件循环将会处理队列中的下一个消息（如果还有的话）。 每一个消息完整地执行后，其他消息才会被执行。 优秀的特性：当一个函数执行时，它不会被抢占，只有在它运行完毕之后才会去运行任何其他的代码，才能修改这个函数操作的数据 缺点:在于当一个消息需要太长时间才能处理完毕时，Web 应用程序就无法处理与用户的交互，例如点击或滚动 添加消息在浏览器里，每当一个事件发生并且有一个事件监听器绑定在该事件上时，一个消息就会被添加进消息队列。如果没有事件监听器，这个事件将会丢失 多个运行时互相通信一个 web worker 或者一个跨域的 iframe 都有自己的栈、堆和消息队列。两个不同的运行时只能通过 postMessage 方法进行通信。如果另一个运行时侦听 message 事件，则此方法会向该运行时添加消息。 渲染主线程做哪些事情（单线程） 解析html 解析css 计算样式 布局 处理图层 没秒页面刷新 60次 执行全局js代码 执行事件处理函数 执行定时器的回调函数… 模型的迭代 单消息队列 在单消息队列架构下，存在着低优先级任务会阻塞高优先级任务的情况，这个问题称为消息队列的队头阻塞问题。 高优先级队列 在渲染进程中引入一个任务调度器，负责从多个消息队列中选出合适的任务，通常实现的逻辑，先按照顺序从高优先级队列中取出任务，如果高优先级的队列为空，那么再按照顺序从低优级队列中取出任务。 缺点：任务的相对执行顺序会被打乱。 根据消息类型来实现消息队列 不同类型的任务创建不同优先级的消息队列： 可以创建输入事件的消息队列，用来存放输入事件。 可以创建合成任务的消息队列，用来存放合成事件。 可以创建默认消息队列，用来保存如资源加载的事件和定时器回调等事件。 还可以创建一个空闲消息队列，用来存放 V8 的垃圾自动垃圾回收这一类实时性不高的事件。根据消息类型实现不同优先级的消息队列： 缺点：消息队列的优先级都是固定的，任务调度器会按照这种固定好的静态的优先级来分别调度任务。使用静态优先级策略，网页的加载速度会被拖慢。 动态调度 Chromium 当前所采用的任务调度策略：动态调度策略 任务饿死 某个状态下，一直有新的高优先级的任务加入到队列中，这样就会导致其他低优先级的任务得不到执行，这称为任务饿死。 Chromium 为了解决任务饿死的问题，给每个队列设置了执行权重，也就是如果连续执行了一定个数的高优先级的任务，那么中间会执行一次低优先级的任务，这样就缓解了任务饿死的情况。 源码消息循环 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465namespace base &#123;MessagePumpDefault::MessagePumpDefault() : keep_running_(true), event_(WaitableEvent::ResetPolicy::AUTOMATIC, WaitableEvent::InitialState::NOT_SIGNALED) &#123; event_.declare_only_used_while_idle();&#125;MessagePumpDefault::~MessagePumpDefault() = default;void MessagePumpDefault::Run(Delegate* delegate) &#123; AutoReset&lt;bool&gt; auto_reset_keep_running(&amp;keep_running_, true); for (;;) &#123;#if BUILDFLAG(IS_APPLE) mac::ScopedNSAutoreleasePool autorelease_pool;#endif Delegate::NextWorkInfo next_work_info = delegate-&gt;DoWork(); bool has_more_immediate_work = next_work_info.is_immediate(); if (!keep_running_) break; if (has_more_immediate_work) continue; has_more_immediate_work = delegate-&gt;DoIdleWork(); if (!keep_running_) break; if (has_more_immediate_work) continue; if (next_work_info.delayed_run_time.is_max()) &#123; event_.Wait(); &#125; else &#123; event_.TimedWait(next_work_info.remaining_delay()); &#125; // Since event_ is auto-reset, we don&#x27;t need to do anything special here // other than service each delegate method. &#125;&#125;void MessagePumpDefault::Quit() &#123; keep_running_ = false;&#125;void MessagePumpDefault::ScheduleWork() &#123; // Since this can be called on any thread, we need to ensure that our Run // loop wakes up. event_.Signal();&#125;void MessagePumpDefault::ScheduleDelayedWork( const Delegate::NextWorkInfo&amp; next_work_info) &#123; // Since this is always called from the same thread as Run(), there is nothing // to do as the loop is already running. It will wait in Run() with the // correct timeout when it&#x27;s out of immediate tasks. // TODO(gab): Consider removing ScheduleDelayedWork() when all pumps function // this way (bit.ly/merge-message-pump-do-work).&#125;&#125; // 队列类型 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305#ifndef THIRD_PARTY_BLINK_PUBLIC_PLATFORM_TASK_TYPE_H_#define THIRD_PARTY_BLINK_PUBLIC_PLATFORM_TASK_TYPE_H_namespace blink &#123;// A list of task sources known to Blink according to the spec.// This enum is used for a histogram and it should not be re-numbered.//// For the task type usage guideline, see https://bit.ly/2vMAsQ4//// When a new task type is created:// * Set the new task type&#x27;s value to &quot;Next value&quot;// * Update kMaxValue to point to the new task type// * Increment &quot;Next value&quot;// * in tools/metrics/histograms/enums.xml update the// &quot;RendererSchedulerTaskType&quot; enum// * update TaskTypes.md//// Next value: 83enum class TaskType : unsigned char &#123; /////////////////////////////////////// // Speced tasks should use one of the following task types /////////////////////////////////////// // Speced tasks and related internal tasks should be posted to one of // the following task runners. These task runners may be throttled. // This value is used as a default value in cases where TaskType // isn&#x27;t supported yet. Don&#x27;t use outside platform/scheduler code. kDeprecatedNone = 0, // https://html.spec.whatwg.org/multipage/webappapis.html#generic-task-sources // // This task source is used for features that react to DOM manipulations, such // as things that happen in a non-blocking fashion when an element is inserted // into the document. kDOMManipulation = 1, // This task source is used for features that react to user interaction, for // example keyboard or mouse input. Events sent in response to user input // (e.g. click events) must be fired using tasks queued with the user // interaction task source. kUserInteraction = 2, // TODO(altimin) Fix the networking task source related namings once it is // clear how // all loading tasks are annotated. // This task source is used for features that trigger in response to network // activity. kNetworking = 3, // This is a part of Networking task that should not be frozen when a page is // frozen. kNetworkingUnfreezable = 75, // This task source is used for control messages between kNetworking tasks. kNetworkingControl = 4, // Tasks used to run low priority scripts. kLowPriorityScriptExecution = 81, // This task source is used to queue calls to history.back() and similar APIs. kHistoryTraversal = 5, // https://html.spec.whatwg.org/multipage/embedded-content.html#the-embed-element // This task source is used for the embed element setup steps. kEmbed = 6, // https://html.spec.whatwg.org/multipage/embedded-content.html#media-elements // This task source is used for all tasks queued in the [Media elements] // section and subsections of the spec unless explicitly specified otherwise. kMediaElementEvent = 7, // https://html.spec.whatwg.org/multipage/scripting.html#the-canvas-element // This task source is used to invoke the result callback of // HTMLCanvasElement.toBlob(). kCanvasBlobSerialization = 8, // https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model // This task source is used when an algorithm requires a microtask to be // queued. kMicrotask = 9, // https://html.spec.whatwg.org/multipage/webappapis.html#timers // For tasks queued by setTimeout() or setInterval(). // // Task nesting level is &lt; 5 and timeout is zero. kJavascriptTimerImmediate = 72, // Task nesting level is &lt; 5 and timeout is &gt; 0. kJavascriptTimerDelayedLowNesting = 73, // Task nesting level is &gt;= 5. kJavascriptTimerDelayedHighNesting = 10, // Note: The timeout is increased to be at least 4ms when the task nesting // level is &gt;= 5. Therefore, the timeout is necessarily &gt; 0 for // kJavascriptTimerDelayedHighNesting. // https://html.spec.whatwg.org/multipage/comms.html#sse-processing-model // This task source is used for any tasks that are queued by EventSource // objects. kRemoteEvent = 11, // https://html.spec.whatwg.org/multipage/comms.html#feedback-from-the-protocol // The task source for all tasks queued in the [WebSocket] section of the // spec. kWebSocket = 12, // https://html.spec.whatwg.org/multipage/comms.html#web-messaging // This task source is used for the tasks in cross-document messaging. kPostedMessage = 13, // https://html.spec.whatwg.org/multipage/comms.html#message-ports kUnshippedPortMessage = 14, // https://www.w3.org/TR/FileAPI/#blobreader-task-source // This task source is used for all tasks queued in the FileAPI spec to read // byte sequences associated with Blob and File objects. kFileReading = 15, // https://www.w3.org/TR/IndexedDB/#request-api kDatabaseAccess = 16, // https://w3c.github.io/presentation-api/#common-idioms // This task source is used for all tasks in the Presentation API spec. kPresentation = 17, // https://www.w3.org/TR/2016/WD-generic-sensor-20160830/#sensor-task-source // This task source is used for all tasks in the Sensor API spec. kSensor = 18, // https://w3c.github.io/performance-timeline/#performance-timeline kPerformanceTimeline = 19, // https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.15 // This task source is used for all tasks in the WebGL spec. kWebGL = 20, // https://www.w3.org/TR/requestidlecallback/#start-an-event-loop-s-idle-period kIdleTask = 21, // Use MiscPlatformAPI for a task that is defined in the spec but is not yet // associated with any specific task runner in the spec. MiscPlatformAPI is // not encouraged for stable and matured APIs. The spec should define the task // runner explicitly. // The task runner may be throttled. kMiscPlatformAPI = 22, // Tasks used for DedicatedWorker&#x27;s requestAnimationFrame. kWorkerAnimation = 51, // Obsolete. // kNetworkingWithURLLoaderAnnotation = 50, (see crbug.com/860545) // kExperimentalWebSchedulingUserInteraction = 53, // kExperimentalWebSchedulingBestEffort = 54, // https://drafts.csswg.org/css-font-loading/#task-source kFontLoading = 56, // https://w3c.github.io/manifest/#dfn-application-life-cycle-task-source kApplicationLifeCycle = 57, // https://wicg.github.io/background-fetch/#infrastructure kBackgroundFetch = 58, // https://www.w3.org/TR/permissions/ kPermission = 59, // https://w3c.github.io/ServiceWorker/#dfn-client-message-queue kServiceWorkerClientMessage = 60, // https://w3c.github.io/web-locks/#web-locks-tasks-source kWebLocks = 66, // Task type used for the Prioritized Task Scheduling API // (https://wicg.github.io/scheduling-apis/#the-posted-task-task-source). // This task type should not be passed directly to // FrameScheduler::GetTaskRunner(); it is used indirectly by // WebSchedulingTaskQueues. kWebSchedulingPostedTask = 67, // https://w3c.github.io/screen-wake-lock/#dfn-screen-wake-lock-task-source kWakeLock = 76, // https://storage.spec.whatwg.org/#storage-task-source kStorage = 82, /////////////////////////////////////// // Not-speced tasks should use one of the following task types /////////////////////////////////////// // The default task type. The task may be throttled or paused. kInternalDefault = 23, // Tasks used for all tasks associated with loading page content. kInternalLoading = 24, // Tasks for tests or mock objects. kInternalTest = 26, // Tasks that are posting back the result from the WebCrypto task runner to // the Blink thread that initiated the call and holds the Promise. Tasks with // this type are posted by: // * //components/webcrypto kInternalWebCrypto = 27, // Tasks to execute media-related things like logging or playback. Tasks with // this type are mainly posted by: // * //content/renderer/media // * //media kInternalMedia = 29, // Tasks to execute things for real-time media processing like recording. If a // task touches MediaStreamTracks, associated sources/sinks, and Web Audio, // this task type should be used. // Tasks with this type are mainly posted by: // * //content/renderer/media // * //media // * blink/renderer/modules/webaudio // * blink/public/platform/audio kInternalMediaRealTime = 30, // Tasks related to user interaction like clicking or inputting texts. kInternalUserInteraction = 32, // Tasks related to the inspector. kInternalInspector = 33, // Obsolete. // kInternalWorker = 36, // Translation task that freezes when the frame is not visible. kInternalTranslation = 55, // Tasks used at IntersectionObserver. kInternalIntersectionObserver = 44, // Task used for ContentCapture. kInternalContentCapture = 61, // Navigation tasks and tasks which have to run in order with them, including // legacy IPCs and channel associated interfaces. // Note that the ordering between tasks related to different frames is not // always guaranteed - tasks belonging to different frames can be reordered // when one of the frames is frozen. // Note: all AssociatedRemotes/AssociatedReceivers should use this task type. kInternalNavigationAssociated = 63, // Tasks which should run when the frame is frozen, but otherwise should run // in order with other legacy IPC and channel-associated interfaces. // Only tasks related to unfreezing itself should run here, the majority of // the tasks // should use kInternalNavigationAssociated instead. kInternalNavigationAssociatedUnfreezable = 64, // Task used to split a script loading task for cooperative scheduling kInternalContinueScriptLoading = 65, // Tasks used to control frame lifecycle - they should run even when the frame // is frozen. kInternalFrameLifecycleControl = 68, // Tasks used for find-in-page. kInternalFindInPage = 70, // Tasks that come in on the HighPriorityLocalFrame interface. kInternalHighPriorityLocalFrame = 71, // Tasks that are should use input priority task queue/runner. kInternalInputBlocking = 77, // Tasks related to the WebGPU API kWebGPU = 78, // Cross-process PostMessage IPCs that are deferred in the current task. kInternalPostMessageForwarding = 79, // Tasks related to renderer-initiated navigation cancellation. kInternalNavigationCancellation = 80, /////////////////////////////////////// // The following task types are only for thread-local queues. /////////////////////////////////////// // The following task types are internal-use only, escpecially for annotations // like UMA of per-thread task queues. Do not specify these task types when to // get a task queue/runner. kMainThreadTaskQueueV8 = 37, kMainThreadTaskQueueCompositor = 38, kMainThreadTaskQueueDefault = 39, kMainThreadTaskQueueInput = 40, kMainThreadTaskQueueIdle = 41, // Removed: // kMainThreadTaskQueueIPC = 42, kMainThreadTaskQueueControl = 43, // Removed: // kMainThreadTaskQueueCleanup = 52, kMainThreadTaskQueueMemoryPurge = 62, kMainThreadTaskQueueNonWaking = 69, kMainThreadTaskQueueIPCTracking = 74, kCompositorThreadTaskQueueDefault = 45, kCompositorThreadTaskQueueInput = 49, kWorkerThreadTaskQueueDefault = 46, kWorkerThreadTaskQueueV8 = 47, kWorkerThreadTaskQueueCompositor = 48, kMaxValue = kStorage,&#125;;&#125; // namespace blink#endif // THIRD_PARTY_BLINK_PUBLIC_PLATFORM_TASK_TYPE_H_","categories":[{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"http://example.com/tags/web/"}]},{"title":"各个语言学习路径","slug":"学习路径","date":"2023-03-25T01:45:38.000Z","updated":"2023-12-19T08:01:29.784Z","comments":true,"path":"2023/03/25/学习路径/","link":"","permalink":"http://example.com/2023/03/25/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/","excerpt":"","text":"jshttps://github.com/Asabeneh/30-Days-Of-JavaScript.git https://developer.mozilla.org/zh-CN/docs/Web/JavaScript json","categories":[],"tags":[]},{"title":"JSON.parse(JSON.stringify(obj))深拷贝的弊端以及解决方法","slug":"JSON-parse-JSON-stringify-obj-深拷贝的弊端以及解决方法","date":"2023-03-23T02:42:51.000Z","updated":"2023-12-19T08:01:29.776Z","comments":true,"path":"2023/03/23/JSON-parse-JSON-stringify-obj-深拷贝的弊端以及解决方法/","link":"","permalink":"http://example.com/2023/03/23/JSON-parse-JSON-stringify-obj-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%BC%8A%E7%AB%AF%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","excerpt":"","text":"const newState &#x3D; Object.assign({}, state)和JSON.parse(JSON.stringify(obj))都是可以用来深拷贝 但是也会出现下面的问题 如果obj里面存在时间对象,JSON.parse(JSON.stringify(obj))之后，时间对象变成了字符串。如果obj里有RegExp、Error对象，则序列化的结果将只得到空对象。 如果obj里有函数，undefined，则序列化的结果会把函数， undefined丢失。 如果obj里有NaN、Infinity和-Infinity，则序列化的结果会变成null。 JSON.stringify()只能序列化对象的可枚举的自有属性。如果obj中的对象是有构造函数生成的，则使用JSON.parse(JSON.stringify(obj))深拷贝后，会丢弃对象的constructor。如果对象中存在循环引用的情况也无法正确实现深拷贝。","categories":[],"tags":[]},{"title":"bootstrap学习","slug":"bootstrap学习","date":"2023-03-16T08:31:42.000Z","updated":"2023-12-19T08:01:29.777Z","comments":true,"path":"2023/03/16/bootstrap学习/","link":"","permalink":"http://example.com/2023/03/16/bootstrap%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"Bootstrap for属性标记的for属性应等于相关元素的id属性，以将它们绑定在一起。 标记允许您单击标签，将其视为与单击关联的输入元素一样","categories":[],"tags":[]},{"title":"设计模式","slug":"设计模式","date":"2023-03-01T08:32:29.000Z","updated":"2023-12-19T08:01:29.786Z","comments":true,"path":"2023/03/01/设计模式/","link":"","permalink":"http://example.com/2023/03/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"设计模式问题的解决方案 提高代码可靠性与可维护性 开闭原则 对扩展开放 对修改关闭 里氏替换原则 多态 依赖倒转原则 抽象类 接口隔离原则 合成复用原则 最少知识原则 一个对象里面对其他对象尽可能少的理解 创建型模式 单例模式","categories":[],"tags":[]},{"title":"require.context自动化导入的解析","slug":"webpack之require-context自动化导入的解析","date":"2023-02-21T02:32:33.000Z","updated":"2023-12-19T08:01:29.782Z","comments":true,"path":"2023/02/21/webpack之require-context自动化导入的解析/","link":"","permalink":"http://example.com/2023/02/21/webpack%E4%B9%8Brequire-context%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AF%BC%E5%85%A5%E7%9A%84%E8%A7%A3%E6%9E%90/","excerpt":"","text":"用法 在开发的过程中如果需要 工程化 模块化 自动化导入文件 譬如svg等 12345function importAll(r) &#123; r.keys().forEach(r);&#125;importAll(require.context(&#x27;../components/&#x27;, true, /\\.js$/)); 结论 require.context() 的过程会把文件夹下的文件名和路径生成一个一一对应的map对象 同时返回一个require函数（req）req的 keys属性就是map的keysreq的 resolve函数通过map返回对应的文件 循环遍历req的keys 执行req 执行req绑定的 resolve函数 resolve通map找到对应的路径（id） 执行 webpack_require(id) 自动化导入 https://webpack.js.org/guides/dependency-management/#requirecontext 12345678910一般需要三个参数 目录 是否解析子目录 正则匹配The arguments passed to require.context must be literals!.参数必须是字面量 不能用变量等require.context( directory, (useSubdirectories = true), (regExp = /^\\.\\/.*$/), (mode = &#x27;sync&#x27;)); 具体用法如下 123456function importAll(r) &#123; r.keys().forEach(r);&#125;importAll(require.context(&#x27;../components/&#x27;, true, /\\.js$/)); 12345678const cache = &#123;&#125;;function importAll(r) &#123; r.keys().forEach((key) =&gt; (cache[key] = r(key)));&#125;importAll(require.context(&#x27;../components/&#x27;, true, /\\.js$/));// At build-time cache will be populated with all required modules. 上面的过程最主要的是 r.keys().forEach(r); 我们可以通过打印 r 看看具体做了什么 1234567891011121314151617181920212223242526var map = &#123; &quot;./sub-customer-active-state4.svg&quot;: &quot;./src/icons/svg/sub-customer-active-state4.svg&quot;, &quot;./sub-customer-state1.svg&quot;: &quot;./src/icons/svg/sub-customer-state1.svg&quot;, &quot;./synergy-yw.svg&quot;: &quot;./src/icons/svg/synergy-yw.svg&quot;, &quot;./warning-state.svg&quot;: &quot;./src/icons/svg/warning-state.svg&quot;, &quot;./wenhao.svg&quot;: &quot;./src/icons/svg/wenhao.svg&quot;&#125;;function webpackContext(req) &#123; var id = webpackContextResolve(req); return __webpack_require__(id);&#125;function webpackContextResolve(req) &#123; if(!__webpack_require__.o(map, req)) &#123; var e = new Error(&quot;Cannot find module &#x27;&quot; + req + &quot;&#x27;&quot;); e.code = &#x27;MODULE_NOT_FOUND&#x27;; throw e; &#125; return map[req];&#125;webpackContext.keys = function webpackContextKeys() &#123; return Object.keys(map);&#125;;webpackContext.resolve = webpackContextResolve;module.exports = webpackContext;webpackContext.id = &quot;./src/icons/svg sync \\\\.svg$&quot;;","categories":[{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"http://example.com/tags/webpack/"}]},{"title":"常用的js库","slug":"js之常用的库","date":"2023-02-20T03:05:31.000Z","updated":"2023-12-19T08:01:29.779Z","comments":true,"path":"2023/02/20/js之常用的库/","link":"","permalink":"http://example.com/2023/02/20/js%E4%B9%8B%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BA%93/","excerpt":"","text":"ramda There are already several excellent libraries with a functional flavor. Typically, they are meant to be general-purpose toolkits, suitable for working in multiple paradigms. Ramda has a more focused goal. We wanted a library designed specifically for a functional programming style, one that makes it easy to create functional pipelines, one that never mutates user data.","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://example.com/tags/js/"}]},{"title":"Mxgraph学习","slug":"Mxgraph学习","date":"2023-02-17T03:01:47.000Z","updated":"2023-12-19T08:01:29.776Z","comments":true,"path":"2023/02/17/Mxgraph学习/","link":"","permalink":"http://example.com/2023/02/17/Mxgraph%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"mxgraph库地址 maxGraph库地址 demo地址 别人的demoMxgraph-EasyFlowEditor 1.基于 mxGraph 的可视化环境组网设计器:https://github.com/igonglei/env-editor 2.mxGraph 学习笔记:https://www.kancloud.cn/wujie520303/mxgraph/1434409 3.功能全面的案例:https://github.com/lanniu/vue-mxgraph-example 4.关于 mxGraph 可搜索的 API 中文文档:https://api.mxgraph.lanniu.top/#/","categories":[{"name":"图, 2d","slug":"图-2d","permalink":"http://example.com/categories/%E5%9B%BE-2d/"}],"tags":[{"name":"mxgraph","slug":"mxgraph","permalink":"http://example.com/tags/mxgraph/"}]},{"title":"递归中的理解","slug":"算法之递归的理解","date":"2023-02-17T02:35:19.000Z","updated":"2023-12-19T08:01:29.786Z","comments":true,"path":"2023/02/17/算法之递归的理解/","link":"","permalink":"http://example.com/2023/02/17/%E7%AE%97%E6%B3%95%E4%B9%8B%E9%80%92%E5%BD%92%E7%9A%84%E7%90%86%E8%A7%A3/","excerpt":"","text":"递归中的return常用来作为递归终止的条件，但是对于返回数值的情况，要搞明白它是怎么返回的。递归的方式就是自己调用自己，而在有返回值的函数中，上一层的函数还没执行完就调用下一层，因此，当达到递归终止条件时，首先return的是最底层调用的函数，return之后，继续执行上一层调用该函数之后的代码，此时我们看到的是上一层的情况，当上一层剩余的代码执行完之后，表示上一层的函数也结束，此时再返回上上一层，执行递归代码之后的代码，如此往复循环，直到返回到最上层，结束整个递归过程。需要注意的是，上一层执行递归之后的代码的时候，会调用下一层返回的值，也可以理解为在执行上一层代码的时候会调用下一层的实现过程，直到下一层执行完返回一个数值，然后再加上上一层的数值，就构成了上一层return的东西，如此往复。 下面介绍例子。 123456static int Sum(int n)&#123; if (n &lt;= 1) //#1 return n; //#2 return n+Sum(n - 1); //#3&#125; 上面是一个递归求和的代码，例如我们传参100进去，第一次执行到#3位置的时候，调用Sum(99)，此时Sum(100)还没有执行完，就已经开始执行Sum(99)了，Sum(100)要等待Sum(99)执行完后才开始执行自己未执行完的程序。同理当Sum(99)执行到#3位置的时候，也会调用Sum(98)，此时Sum(99)还没有执行完，Sum(99)要等到Sum(98)执行完之后才开始执行自己未执行完的程序…就这样一直循环到n&#x3D;1的时候，也就是在执行Sum(1)的时候满足递归结束条件，即return 1;这个时候表示Sum(1)已经执行完毕，接下来要执行Sum(2)中未执行完的内容，也就是return 2+Sum(1);而Sum(1)已经返回1，因此Sum(2)返回2+1&#x3D;3，Sum(2)执行完毕，开始执行Sum(3)未执行完的内容…如此往复，一直到Sum(99)执行完毕后，再执行Sum(100)中未执行完的内容，也就是return 100+Sum(99),而Sum(99)已经执行完毕，有返回值，因此Sum(100)&#x3D;100+Sum(99)&#x3D;5050。至此，整个递归过程结束，返回累加值。","categories":[{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"递归","slug":"递归","permalink":"http://example.com/tags/%E9%80%92%E5%BD%92/"}]},{"title":"js之数组操作","slug":"js之数组操作","date":"2022-11-23T05:22:11.000Z","updated":"2023-12-19T08:01:29.779Z","comments":true,"path":"2022/11/23/js之数组操作/","link":"","permalink":"http://example.com/2022/11/23/js%E4%B9%8B%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/","excerpt":"","text":"数组合并apply() 参考 concat 符合我们的需求，但它并不是将元素添加到现有数组，而是创建并返回一个新数组。然而我们需要将元素追加到现有数组……那么怎么做好？难道要写一个循环吗？别当然不是！ 12345const array = [&#x27;a&#x27;, &#x27;b&#x27;];const elements = [0, 1, 2];array.push.apply(array, elements);console.info(array); // [&quot;a&quot;, &quot;b&quot;, 0, 1, 2]","categories":[{"name":"js","slug":"js","permalink":"http://example.com/categories/js/"}],"tags":[]},{"title":"web之createRange","slug":"web之createRange","date":"2022-11-22T06:12:19.000Z","updated":"2023-12-19T08:01:29.783Z","comments":true,"path":"2022/11/22/web之createRange/","link":"","permalink":"http://example.com/2022/11/22/web%E4%B9%8BcreateRange/","excerpt":"","text":"创建range对象1var range = document.createRange() 选择节点1p1 = document.getElementById(&quot;p1&quot;); 选择整个节点，包括子节点 1range.selectNode(p1); 选择节点的子节点 1range.selectNodeContents(p1); 需要精细选择节点，要用到的是 setStart() 和 setEnd() 个方法都接受两个参数：一个参照节点，一个节点偏移量 123p1 = document.getElementById(&quot;p1&quot;).childNodes[0];range.setStart(p1,2);range.setEnd(p1,8); 元素的大小1range.getBoundingClientRect().width; https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect","categories":[{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"}],"tags":[{"name":"js, range","slug":"js-range","permalink":"http://example.com/tags/js-range/"}]},{"title":"vue-router学习","slug":"vue之vue-router学习","date":"2022-11-15T07:53:24.000Z","updated":"2023-12-19T08:01:29.782Z","comments":true,"path":"2022/11/15/vue之vue-router学习/","link":"","permalink":"http://example.com/2022/11/15/vue%E4%B9%8Bvue-router%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"什么是前端路由？在 Web 前端单页应用 SPA(Single Page Application)中，路由描述的是 URL 与 UI 之间的映射关系，这种映射是单向的，即 URL 变化引起 UI 更新（无需刷新页面） 如何实现前端路由？要实现前端路由，需要解决两个核心： 拿到当前需要展示的路由（监听url变化） 根据路由渲染界面 实现一个简单的路由1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798let Vue = null;class HistoryRoute &#123; constructor() &#123; this.current = null; &#125;&#125;// 路由类class VueRouter &#123; // 构造函数 constructor(options) &#123; this.mode = options.mode || &quot;hash&quot;; // 记录所有的路由 this.routes = options.routes || []; //你传递的这个路由是一个数组表 // 转为字典存起来 方便取数据 this.routesMap = this.createMap(this.routes); // 记录当前路由类 this.history = new HistoryRoute(); // 监听路由变化 记录当前路由 this.init(); &#125; init() &#123; if (this.mode === &quot;hash&quot;) &#123; // 先判断用户打开时有没有hash值，没有的话跳转到#/ location.hash ? &quot;&quot; : (location.hash = &quot;/&quot;); window.addEventListener(&quot;load&quot;, () =&gt; &#123; this.history.current = location.hash.slice(1); &#125;); window.addEventListener(&quot;hashchange&quot;, () =&gt; &#123; this.history.current = location.hash.slice(1); &#125;); &#125; else &#123; location.pathname ? &quot;&quot; : (location.pathname = &quot;/&quot;); window.addEventListener(&quot;load&quot;, () =&gt; &#123; this.history.current = location.pathname; &#125;); window.addEventListener(&quot;popstate&quot;, () =&gt; &#123; this.history.current = location.pathname; &#125;); &#125; &#125; createMap(routes) &#123; return routes.reduce((pre, current) =&gt; &#123; pre[current.path] = current.component; return pre; &#125;, &#123;&#125;); &#125;&#125;VueRouter.install = function (v) &#123; Vue = v; // 父beforeCreate-&gt; 父created -&gt; 父beforeMounte -&gt; 子beforeCreate -&gt;子create -&gt;子beforeMount -&gt;子 mounted -&gt; 父mounted Vue.mixin(&#123; beforeCreate() &#123; if (this.$options &amp;&amp; this.$options.router) &#123; // 如果是根组件 this._root = this; //把当前实例挂载到_root上 this._router = this.$options.router; // 监听history变化 更新ui Vue.util.defineReactive(this, &quot;xxx&quot;, this._router.history); &#125; else &#123; //如果是子组件 this._root = this.$parent &amp;&amp; this.$parent._root; &#125; Object.defineProperty(this, &quot;$router&quot;, &#123; get() &#123; return this._root._router; &#125;, &#125;); Object.defineProperty(this, &quot;$route&quot;, &#123; get() &#123; return this._root._router.history.current; &#125;, &#125;); &#125;, &#125;); Vue.component(&quot;router-link&quot;, &#123; props: &#123; to: String, &#125;, render(h) &#123; let mode = this._self._root._router.mode; let to = mode === &quot;hash&quot; ? &quot;#&quot; + this.to : this.to; return h(&quot;a&quot;, &#123; attrs: &#123; href: to &#125; &#125;, this.$slots.default); &#125;, &#125;); Vue.component(&quot;router-view&quot;, &#123; render(h) &#123; let current = this._self._root._router.history.current; let routeMap = this._self._root._router.routesMap; return h(routeMap[current]); &#125;, &#125;);&#125;;export default VueRouter;","categories":[{"name":"vue","slug":"vue","permalink":"http://example.com/categories/vue/"}],"tags":[{"name":"vue-router","slug":"vue-router","permalink":"http://example.com/tags/vue-router/"}]},{"title":"Git常用命令","slug":"Git常用命令","date":"2022-09-13T06:58:47.000Z","updated":"2023-12-19T08:01:29.775Z","comments":true,"path":"2022/09/13/Git常用命令/","link":"","permalink":"http://example.com/2022/09/13/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"仓库12345678# 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url] 配置123456789# 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot; 123456789101112131415161718192021# 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed] 代码提交123456789101112131415161718# 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ... 分支123456789101112131415161718192021222324252627282930313233343536373839404142# 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch] 标签1234567891011121314151617181920212223242526# 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag] 查看信息123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog 远程同步1234567891011121314151617181920212223# 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all 撤销12345678910111213141516171819202122232425262728293031# 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop clone 大型仓库报错12345671、克隆最新一次的commitgit clone *** --depth 12、克隆剩余所有git remote set-branches origin &#x27;*&#x27;git fetch -v","categories":[{"name":"git","slug":"git","permalink":"http://example.com/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"}]},{"title":"qt 学习","slug":"qt-学习","date":"2022-09-02T06:40:51.000Z","updated":"2023-12-19T08:01:29.781Z","comments":true,"path":"2022/09/02/qt-学习/","link":"","permalink":"http://example.com/2022/09/02/qt-%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"头文件中尽量不要导出其他类可以使用class等前置声明 可以使的更快（头文件会在启动的时候编译）类似这样 1234567891011121314class QCheckBox;class QLabel;class QLineEdit;class QPushButton;class WJDialog : public QDialog&#123; private: QLabel *label; QLineEdit *lineEdit; QCheckBox *checkBox; QPushButton *pushButton;&#125;; Qt元对象系统 Q_OBJECT宏声明了每一个QObject子类中必须试下的一些内省函数:metaObject()、qt_metacall()等 Qt的moc工具实现了 Q_OBJECT宏声明中声明函数的实现 像connect()和disconnect()这样的成员函数使用内省函数完成工作","categories":[{"name":"qt","slug":"qt","permalink":"http://example.com/categories/qt/"}],"tags":[]},{"title":"Visual Studio Code插件整理","slug":"Visual-Studio-Code插件整理","date":"2022-08-31T06:42:00.000Z","updated":"2023-12-19T08:01:29.777Z","comments":true,"path":"2022/08/31/Visual-Studio-Code插件整理/","link":"","permalink":"http://example.com/2022/08/31/Visual-Studio-Code%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/","excerpt":"","text":"filesize显示当前文件大小String Manipulation字符串转换处理（驼峰、大写开头、下划线等等）Partial Diff对比两段代码或文件Bracket Pair Colorizer让括号拥有独立的颜色，易于区分。可以配合任意主题使用。Atuo Rename Tag修改 html 标签，自动帮你完成尾部闭合标签的同步修改，不过有些bug。Auto Close Tag自动闭合html标签HTML Snippets超级实用且初级的 H5代码片段以及提示HTML CSS Support让 html 标签上写class 智能提示当前项目所支持的样式Color Highlight颜色高亮jQuery Code SnippetsjqueryBootstrap 3 SinnpetBootstrap前端框架代码提示ESlintESLint 是一个代码规范和错误检查工具vetur语法高亮、智能感知、Emmet等翻译(英汉词典)翻译(英汉词典)","categories":[{"name":"个人","slug":"个人","permalink":"http://example.com/categories/%E4%B8%AA%E4%BA%BA/"}],"tags":[{"name":"vscode","slug":"vscode","permalink":"http://example.com/tags/vscode/"}]},{"title":"hexo博客搭建+主题配置","slug":"hexo博客搭建-主题配置","date":"2022-08-30T16:26:22.000Z","updated":"2023-12-19T08:01:29.778Z","comments":true,"path":"2022/08/31/hexo博客搭建-主题配置/","link":"","permalink":"http://example.com/2022/08/31/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/","excerpt":"","text":"安装12345678npm install hexo -ghexo init &lt;folder&gt;hexo ghexo s 发布流程1234hexo cleanhexo generatehexo deploy 常用命令12345678hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 报错【Hexo异常】fatal: in unpopulated submodule ‘.deploy_git’删除 .deploy_git文件夹 重新 hexo g hexo d","categories":[{"name":"个人","slug":"个人","permalink":"http://example.com/categories/%E4%B8%AA%E4%BA%BA/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]}],"categories":[{"name":"go","slug":"go","permalink":"http://example.com/categories/go/"},{"name":"vscode","slug":"vscode","permalink":"http://example.com/categories/vscode/"},{"name":"FUXA, mqtt, web组态","slug":"FUXA-mqtt-web组态","permalink":"http://example.com/categories/FUXA-mqtt-web%E7%BB%84%E6%80%81/"},{"name":"EMQX, mqtt","slug":"EMQX-mqtt","permalink":"http://example.com/categories/EMQX-mqtt/"},{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"},{"name":"EMS","slug":"EMS","permalink":"http://example.com/categories/EMS/"},{"name":"组态","slug":"组态","permalink":"http://example.com/categories/%E7%BB%84%E6%80%81/"},{"name":"iot","slug":"iot","permalink":"http://example.com/categories/iot/"},{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"},{"name":"nosql","slug":"nosql","permalink":"http://example.com/categories/nosql/"},{"name":"webpack","slug":"webpack","permalink":"http://example.com/categories/webpack/"},{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"},{"name":"nginx","slug":"nginx","permalink":"http://example.com/categories/nginx/"},{"name":"vim","slug":"vim","permalink":"http://example.com/categories/vim/"},{"name":"sql","slug":"sql","permalink":"http://example.com/categories/sql/"},{"name":"linux","slug":"linux","permalink":"http://example.com/categories/linux/"},{"name":"php","slug":"php","permalink":"http://example.com/categories/php/"},{"name":"微前端","slug":"微前端","permalink":"http://example.com/categories/%E5%BE%AE%E5%89%8D%E7%AB%AF/"},{"name":"图, 2d","slug":"图-2d","permalink":"http://example.com/categories/%E5%9B%BE-2d/"},{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"},{"name":"js","slug":"js","permalink":"http://example.com/categories/js/"},{"name":"vue","slug":"vue","permalink":"http://example.com/categories/vue/"},{"name":"git","slug":"git","permalink":"http://example.com/categories/git/"},{"name":"qt","slug":"qt","permalink":"http://example.com/categories/qt/"},{"name":"个人","slug":"个人","permalink":"http://example.com/categories/%E4%B8%AA%E4%BA%BA/"}],"tags":[{"name":"vue, 断点调试","slug":"vue-断点调试","permalink":"http://example.com/tags/vue-%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/"},{"name":"物模型","slug":"物模型","permalink":"http://example.com/tags/%E7%89%A9%E6%A8%A1%E5%9E%8B/"},{"name":"springboot","slug":"springboot","permalink":"http://example.com/tags/springboot/"},{"name":"redis","slug":"redis","permalink":"http://example.com/tags/redis/"},{"name":"web","slug":"web","permalink":"http://example.com/tags/web/"},{"name":"webpack","slug":"webpack","permalink":"http://example.com/tags/webpack/"},{"name":"js","slug":"js","permalink":"http://example.com/tags/js/"},{"name":"mxgraph","slug":"mxgraph","permalink":"http://example.com/tags/mxgraph/"},{"name":"递归","slug":"递归","permalink":"http://example.com/tags/%E9%80%92%E5%BD%92/"},{"name":"js, range","slug":"js-range","permalink":"http://example.com/tags/js-range/"},{"name":"vue-router","slug":"vue-router","permalink":"http://example.com/tags/vue-router/"},{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"},{"name":"vscode","slug":"vscode","permalink":"http://example.com/tags/vscode/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]}